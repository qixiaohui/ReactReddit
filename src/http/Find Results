Searching 31 files for "console.e"

/Users/TQi/Documents/workspace/ReactReddit/src/http/ajax.js:
   19  		.then(function(responseData){
   20  			resolve(JSON.stringify(responseData));
   21: 		}).catch((e) => {console.e(e)}).done();
   22  	},
   23  	getStorageToken: function(resolve){
   ..
   48              resolve(JSON.stringify(token));
   49              storage.setStorage("ACCESS_TOKEN", token);
   50: 		}).catch((e) => {console.e(e)}).done();
   51  	},
   52  	checkCaptcha: function(resolve, reject){
   ..
   94  				}
   95  			}).catch((e) => {
   96: 				console.e(e);
   97  			}).done();
   98  
   ..
  144  				}
  145  			}).catch((e) => {
  146: 				console.e(e);
  147  			}).done();			
  148  		};
  ...
  208  				}
  209  			}).catch((e) => {
  210: 				console.e(e);
  211  			}).done();
  212  		};
  ...
  257  				}
  258  			}).catch((e) => {
  259: 				console.e(e);
  260  			}).done();
  261  		};
  ...
  278  		  	}
  279  		  }).catch((e) => {
  280: 		  	console.e(e);
  281  		  }).done();
  282  	},
  ...
  360  				}
  361  			}).catch((e) => {
  362: 				console.e(e);
  363  			}).done();
  364  		};	

/Users/TQi/Documents/workspace/ReactReddit/src/http/Find Results:
    1: Searching 24732 files for "console.error"
    2  
    3  /Users/TQi/Documents/workspace/ReactReddit/node_modules/.bin/acorn:
    4      8  
    5      9  function help(status) {
    6:    10:   var print = (status == 0) ? console.log : console.error;
    7     11    print("usage: " + path.basename(process.argv[1]) + " [--ecma3|--ecma5|--ecma6]");
    8     12    print("        [--tokenize] [--locations] [---allow-hash-bang] [--compact] [--silent] [--help] [--] infile");
    .
   11      6  var filename = process.argv[2];
   12      7  if (!filename) {
   13:     8:   console.error("no filename specified");
   14      9    process.exit(0);
   15     10  }
   ..
   18     29  		process.stdout.write(indent);
   19     30  	} else {
   20:    31: 		console.error('Indentation could not be detected');
   21     32  		process.exit(2);
   22     33  	}
   ..
   25     16    console.log(JSON.stringify(data, null, 2))
   26     17  else {
   27:    18:   console.error('No such errno/code: "' + arg + '"')
   28     19    process.exit(1)
   29     20  }
   ..
   32     61          options = JSON.parse(fs.readFileSync(args.config, 'utf-8'));
   33     62      } catch (err) {
   34:    63:         console.error('Error parsing config: ', err);
   35     64      }
   36     65  }
   ..
   39     54          options = JSON.parse(fs.readFileSync(args.config, 'utf-8'))
   40     55      } catch (err) {
   41:    56:         console.error('Error parsing config: ', err);
   42     57      }
   43     58  }
   ..
   46     16  
   47     17  if (!email) {
   48:    18: 	console.error('Please specify an email');
   49     19  	process.exit(1);
   50     20  }
   ..
   52     22  githubUsername(email, cli.flags.token, function (err, username) {
   53     23  	if (err) {
   54:    24: 		console.error(err);
   55     25  		process.exit(1);
   56     26  	}
   ..
   59      9  
   60     10  if (!files.length) {
   61:    11:   console.error('Usage: image-size image1 [image2] [image3] ...');
   62     12    process.exit(-1);
   63     13  }
   ..
   65     27        console.info(label, '-', grey[0] + image + grey[1]);
   66     28      } else {
   67:    29:       console.error('file doesn\'t exist - ', image);
   68     30      }
   69     31    } catch (e) {
   70:    32:     // console.error(e.stack);
   71:    33:     console.error(red[0] + e.message + red[1], '-', image);
   72     34    }
   73     35  });
   ..
   76     20  
   77     21  if (args.length < 4 || args[2] !== '-c') {
   78:    22:     console.error(USAGE);
   79     23      process.exit(1);
   80     24  }
   ..
   83     26      function cb (err) {
   84     27          if (err) {
   85:    28:             console.error(err.message);
   86     29              process.exit(1);
   87     30          }
   ..
   90     23  if (process.stdin.isTTY) {
   91     24  	if (!cli.input[0]) {
   92:    25: 		console.error('Number required');
   93     26  		process.exit(1);
   94     27  	}
   ..
   97     10   */
   98     11  
   99:    12: console.error([
  100     13    '\033[31mLooks like you installed react-native globally, maybe you meant react-native-cli?',
  101     14    'To fix the issue, run:\033[0m',
  ...
  104     30  
  105     31  if (!argv[1]) {
  106:    32: 	console.error('You have to define how many times to repeat the string.');
  107     33  	process.exit(1);
  108     34  }
  ...
  111     18  if (help || args.length === 0) {
  112     19    // If they didn't ask for help, then this is not a "success"
  113:    20:   var log = help ? console.log : console.error
  114     21    log('Usage: rimraf <path>')
  115     22    log('')
  ...
  118      9    var msg = 'Usage: sane <command> [...directory] [--glob=<filePattern>] ' +
  119     10              '[--poll] [--watchman] [--dot] [--wait=<seconds>]';
  120:    11:   console.error(msg);
  121     12    process.exit();
  122     13  }
  ...
  125     25  
  126     26  if (program.compress && program.block !== undefined) {
  127:    27:     console.error('--block can only be used with decompression');
  128     28      return 1;
  129     29  }
  130     30  
  131     31  if (program.decompress && program.compress) {
  132:    32:     console.error('Must specify either -d or -z.');
  133     33      return 1;
  134     34  }
  ...
  136    124  }
  137    125  if (program.compress) {
  138:   126:     console.error('Compression not yet implemented.');
  139    127      return 1;
  140    128  }
  ...
  143     80  
  144     81  function failInc () {
  145:    82:   console.error("--inc can only be used on a single version with no range")
  146     83    fail()
  147     84  }
  ...
  150    566  
  151    567  function print_error(msg) {
  152:   568:     console.error("%s", msg);
  153    569  }
  154    570  
  ...
  157      5  
  158      6  function usage () {
  159:     7:   console.error('usage: which [-as] program ...')
  160      8    process.exit(1)
  161      9  }
  ...
  163     32          break
  164     33        default:
  165:    34:         console.error('which: illegal option -- ' + flag)
  166     35          usage()
  167     36      }
  ...
  170      8  
  171      9  function help(status) {
  172:    10:   var print = (status == 0) ? console.log : console.error;
  173     11    print("usage: " + path.basename(process.argv[1]) + " [--ecma3|--ecma5|--ecma6]");
  174     12    print("        [--tokenize] [--locations] [---allow-hash-bang] [--compact] [--silent] [--help] [--] infile");
  ...
  177    294          console.trace(msg);
  178    295        } else {
  179:   296:         console.error(msg);
  180    297        }
  181    298        warned = true;
  ...
  183    316        debugs[set] = function() {
  184    317          var msg = exports.format.apply(exports, arguments);
  185:   318:         console.error('%s %d: %s', set, pid, msg);
  186    319        };
  187    320      } else {
  ...
  190    294          console.trace(msg);
  191    295        } else {
  192:   296:         console.error(msg);
  193    297        }
  194    298        warned = true;
  ...
  196    316        debugs[set] = function() {
  197    317          var msg = exports.format.apply(exports, arguments);
  198:   318:         console.error('%s %d: %s', set, pid, msg);
  199    319        };
  200    320      } else {
  ...
  203    637  Dp.field = function(name, type, defaultFn, hidden) {
  204    638      if (this.finalized) {
  205:   639:         console.error("Ignoring attempt to redefine field " +
  206    640                        JSON.stringify(name) + " of finalized type " +
  207    641                        JSON.stringify(this.typeName));
  ...
  210     24  var each = require('async-each');
  211     25  each(['a.js', 'b.js', 'c.js'], fs.readFile, function(error, contents) {
  212:    26:   if (error) console.error(error);
  213     27    console.log('Contents for a, b and c:', contents);
  214     28  });
  ...
  217    814                  if (typeof console !== 'undefined') {
  218    815                      if (err) {
  219:   816:                         if (console.error) {
  220:   817:                             console.error(err);
  221    818                          }
  222    819                      }
  ...
  225   1364  
  226   1365  Logs the result of an async function to the console. Only works in node.js or
  227:  1366: in browsers that support console.log and console.error (such as FF and Chrome).
  228   1367  If multiple arguments are returned from the async function, console.log is
  229   1368  called on each argument in order.
  ...
  231   1394  Logs the result of an async function to the console using console.dir to
  232   1395  display the properties of the resulting object. Only works in node.js or
  233:  1396: in browsers that support console.dir and console.error (such as FF and Chrome).
  234   1397  If multiple arguments are returned from the async function, console.dir is
  235   1398  called on each argument in order.
  ...
  238     53      seenDeprecatedMessages.push(msg);
  239     54  
  240:    55:     console.error(msg);
  241     56    };
  242     57  
  ...
  245    107  
  246    108        if (format.compact) {
  247:   109:         console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
  248    110        }
  249    111      }
  ...
  252      7  var filename = process.argv[2];
  253      8  if (!filename) {
  254:     9:   console.error("no filename specified");
  255     10    process.exit(0);
  256     11  }
  ...
  259     51      seenDeprecatedMessages.push(msg);
  260     52  
  261:    53:     console.error(msg);
  262     54    };
  263     55  
  ...
  266     40      if (err.message === "Invalid string length") {
  267     41        err.message = "Cache too large so it's been cleared.";
  268:    42:       console.error(err.stack);
  269     43      } else {
  270     44        throw err;
  ...
  273      7  var filename = process.argv[2];
  274      8  if (!filename) {
  275:     9:   console.error("no filename specified");
  276     10    process.exit(0);
  277     11  }
  ...
  280     64        fs.writeFile grunt.option(\path) + '.js', it, done
  281     65      .catch !->
  282:    66:       console.error it
  283     67        process.exit 1
  284     68    grunt.registerTask \client ->
  ...
  287   3969  	        } else if(handler = global.onunhandledrejection){
  288   3970  	          handler({promise: promise, reason: value});
  289:  3971: 	        } else if((console = global.console) && console.error){
  290:  3972: 	          console.error('Unhandled promise rejection', value);
  291   3973  	        }
  292   3974  	      });
  ...
  295   3555  	        } else if(handler = global.onunhandledrejection){
  296   3556  	          handler({promise: promise, reason: value});
  297:  3557: 	        } else if((console = global.console) && console.error){
  298:  3558: 	          console.error('Unhandled promise rejection', value);
  299   3559  	        }
  300   3560  	      });
  ...
  303   3955  	        } else if(handler = global.onunhandledrejection){
  304   3956  	          handler({promise: promise, reason: value});
  305:  3957: 	        } else if((console = global.console) && console.error){
  306:  3958: 	          console.error('Unhandled promise rejection', value);
  307   3959  	        }
  308   3960  	      });
  ...
  311    116          } else if(handler = global.onunhandledrejection){
  312    117            handler({promise: promise, reason: value});
  313:   118:         } else if((console = global.console) && console.error){
  314:   119:           console.error('Unhandled promise rejection', value);
  315    120          }
  316    121        });
  ...
  319    116          } else if(handler = global.onunhandledrejection){
  320    117            handler({promise: promise, reason: value});
  321:   118:         } else if((console = global.console) && console.error){
  322:   119:           console.error('Unhandled promise rejection', value);
  323    120          }
  324    121        });
  ...
  327   2500          } else if(handler = global.onunhandledrejection){
  328   2501            handler({promise: promise, reason: value});
  329:  2502:         } else if((console = global.console) && console.error){
  330:  2503:           console.error('Unhandled promise rejection', value);
  331   2504          }
  332   2505        } record.a = undefined;
  ...
  335     40      if (err.message === "Invalid string length") {
  336     41        err.message = "Cache too large so it's been cleared.";
  337:    42:       console.error(err.stack);
  338     43      } else {
  339     44        throw err;
  ...
  342     19      if (err.message === "Invalid string length") {
  343     20        err.message = "Cache too large so it's been cleared.";
  344:    21:       console.error(err.stack);
  345     22      } else {
  346     23        throw err;
  ...
  349      7  var filename = process.argv[2];
  350      8  if (!filename) {
  351:     9:   console.error("no filename specified");
  352     10    process.exit(0);
  353     11  }
  ...
  356      7  var filename = process.argv[2];
  357      8  if (!filename) {
  358:     9:   console.error("no filename specified");
  359     10    process.exit(0);
  360     11  }
  ...
  363      7  var filename = process.argv[2];
  364      8  if (!filename) {
  365:     9:   console.error("no filename specified");
  366     10    process.exit(0);
  367     11  }
  ...
  370      7  var filename = process.argv[2];
  371      8  if (!filename) {
  372:     9:   console.error("no filename specified");
  373     10    process.exit(0);
  374     11  }
  ...
  377    173    cmd();
  378    174  } else {
  379:   175:   console.error("Unknown command:", cmd);
  380    176    process.exit(1);
  381    177  }
  ...
  384     76              handleFile(filename, relative);
  385     77            } catch (err) {
  386:    78:             console.error(err.stack);
  387     79            }
  388     80          });
  ...
  391    142              walk();
  392    143            } catch (err) {
  393:   144:             console.error(err.stack);
  394    145            }
  395    146          }
  ...
  398    117  
  399    118  if (errors.length) {
  400:   119:   console.error(errors.join(". "));
  401    120    process.exit(2);
  402    121  }
  ...
  405     50    } catch (err) {
  406     51      if (commander.watch) {
  407:    52:       console.error(toErrorStack(err));
  408     53        return { ignored: true };
  409     54      } else {
  ...
  411     67  
  412     68  process.on("uncaughtException", function (err) {
  413:    69:   console.error(toErrorStack(err));
  414     70    process.exit(1);
  415     71  });
  ...
  418   2526          } else if(handler = global.onunhandledrejection){
  419   2527            handler({promise: promise, reason: value});
  420:  2528:         } else if((console = global.console) && console.error){
  421:  2529:           console.error('Unhandled promise rejection', value);
  422   2530          }
  423   2531        } record.a = undefined;
  ...
  426   2633          console.trace(msg);
  427   2634        } else {
  428:  2635:         console.error(msg);
  429   2636        }
  430   2637        warned = true;
  ...
  432   2655        debugs[set] = function() {
  433   2656          var msg = exports.format.apply(exports, arguments);
  434:  2657:         console.error('%s %d: %s', set, pid, msg);
  435   2658        };
  436   2659      } else {
  ...
  438   6043  
  439   6044        if (format.compact) {
  440:  6045:         console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
  441   6046        }
  442   6047      }
  ...
  444   8967      seenDeprecatedMessages.push(msg);
  445   8968  
  446:  8969:     console.error(msg);
  447   8970    };
  448   8971  
  ...
  450   13547        } else if (deprecatedKey) {
  451   13548          // deprecated key, remap it to the new one
  452:  13549:         console.error("[BABEL] The transformer " + key + " has been renamed to " + deprecatedKey);
  453   13550          rawKeys.push(deprecatedKey);
  454   13551        } else if (this.transformers[key]) {
  ...
  456   32335          } else if(handler = global.onunhandledrejection){
  457   32336            handler({promise: promise, reason: value});
  458:  32337:         } else if((console = global.console) && console.error){
  459:  32338:           console.error('Unhandled promise rejection', value);
  460   32339          }
  461   32340        } record.a = undefined;
  ...
  463   33861  
  464   33862  /**
  465:  33863:  * Invokes `console.error()` with the specified arguments.
  466   33864   */
  467   33865  
  ...
  469   40678    var set = this.globSet = this.braceExpand()
  470   40679  
  471:  40680:   if (options.debug) this.debug = console.error
  472   40681  
  473   40682    this.debug(this.pattern, set)
  ...
  475   50992      _dereq_(3).readFile(path, "utf-8", function(err, code) {
  476   50993          if (err) {
  477:  50994:             console.error(err);
  478   50995              return;
  479   50996          }
  ...
  481   54793  Dp.field = function(name, type, defaultFn, hidden) {
  482   54794      if (this.finalized) {
  483:  54795:         console.error("Ignoring attempt to redefine field " +
  484   54796                        JSON.stringify(name) + " of finalized type " +
  485   54797                        JSON.stringify(this.typeName));
  ...
  491    123  
  492    124        if (format.compact) {
  493:   125:         console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
  494    126        }
  495    127      }
  ...
  498     74      seenDeprecatedMessages.push(msg);
  499     75  
  500:    76:     console.error(msg);
  501     77    };
  502     78  
  ...
  505    200        } else if (deprecatedKey) {
  506    201          // deprecated key, remap it to the new one
  507:   202:         console.error("[BABEL] The transformer " + key + " has been renamed to " + deprecatedKey);
  508    203          rawKeys.push(deprecatedKey);
  509    204        } else if (this.transformers[key]) {
  ...
  512     61      ) {
  513     62        var loc = esprimaToken.loc.start
  514:    63:       console.error(
  515     64          file + ":" + loc.line + ":" + (loc.column + 1) + ": " +
  516     65          "(token #" + (index + 1) + ")\n" +
  ...
  518     72  
  519     73    if (esprimaTokens.length !== jsTokensTokens.length) {
  520:    74:     console.error(
  521     75        file + ': Number of tokens mismatch.\n' +
  522     76        "  esprima:  " + (esprimaTokens.length + 1) + "\n" +
  ...
  524     91    )
  525     92  } else {
  526:    93:   console.error("Comparison failed.")
  527     94  }
  528     95  
  ...
  531    158    cmd();
  532    159  } else {
  533:   160:   console.error("Unknown command:", cmd);
  534    161    process.exit(1);
  535    162  }
  ...
  538     74              handleFile(filename, relative);
  539     75            } catch (err) {
  540:    76:             console.error(err.stack);
  541     77            }
  542     78          });
  ...
  545    140              walk();
  546    141            } catch (err) {
  547:   142:             console.error(err.stack);
  548    143            }
  549    144          }
  ...
  552    116  
  553    117  if (errors.length) {
  554:   118:   console.error(errors.join(". "));
  555    119    process.exit(2);
  556    120  }
  ...
  559     48    } catch (err) {
  560     49      if (commander.watch) {
  561:    50:       console.error(toErrorStack(err));
  562     51        return { ignored: true };
  563     52      } else {
  ...
  565     65  
  566     66  process.on("uncaughtException", function (err) {
  567:    67:   console.error(toErrorStack(err));
  568     68    process.exit(1);
  569     69  });
  ...
  572      6  var filename = process.argv[2];
  573      7  if (!filename) {
  574:     8:   console.error("no filename specified");
  575      9    process.exit(0);
  576     10  }
  ...
  579    626  writer.end('this is the end\n');
  580    627  writer.on('finish', () => {
  581:   628:   console.error('all writes are now complete.');
  582    629  });
  583    630  ```
  ...
  585    641  var reader = getReadableStreamSomehow();
  586    642  writer.on('pipe', (src) => {
  587:   643:   console.error('something is piping into the writer');
  588    644    assert.equal(src, reader);
  589    645  });
  ...
  591    659  var reader = getReadableStreamSomehow();
  592    660  writer.on('unpipe', (src) => {
  593:   661:   console.error('something has stopped piping into the writer');
  594    662    assert.equal(src, reader);
  595    663  });
  ...
  598    115  fs.readFile("file.json", function(err, val) {
  599    116      if( err ) {
  600:   117:         console.error("unable to read file");
  601    118      }
  602    119      else {
  ...
  604    123          }
  605    124          catch( e ) {
  606:   125:             console.error("invalid json in file");
  607    126          }
  608    127      }
  ...
  610    136  })
  611    137  .catch(SyntaxError, function(e) {
  612:   138:     console.error("invalid json in file");
  613    139  })
  614    140  .catch(function(e) {
  615:   141:     console.error("unable to read file");
  616    142  });
  617    143  ```
  ...
  619    154  //Syntax actually not supported in JS but drives the point
  620    155  catch(SyntaxError e) {
  621:   156:     console.error("invalid json in file");
  622    157  }
  623    158  catch(Error e) {
  624:   159:     console.error("unable to read file");
  625    160  }
  626    161  ```
  ...
  628    251  For handling this problem, in my opinion, this is completely unacceptable and pointless. The user must remember to explicitly call `.done` and that cannot be justified when the problem is forgetting to create an error handler in the first place.
  629    252  
  630:   253: The second approach, which is what bluebird by default takes, is to call a registered handler if a rejection is unhandled by the start of a second turn. The default handler is to write the stack trace to `stderr` or `console.error` in browsers. This is close to what happens with synchronous code - your code doesn't work as expected and you open console and see a stack trace. Nice.
  631    254  
  632    255  Of course this is not perfect, if your code for some reason needs to swoop in and attach error handler to some promise after the promise has been hanging around a while then you will see annoying messages. In that case you can use the `.done()` method to signal that any hanging exceptions should be thrown.
  ...
  634    334      console.log("Successful json");
  635    335  }).catch(SyntaxError, function (e) {
  636:   336:     console.error("file contains invalid json");
  637    337  }).catch(Promise.OperationalError, function (e) {
  638:   338:     console.error("unable to read file, because: ", e.message);
  639    339  });
  640    340  ```
  ...
  642    346  ```js
  643    347  .error(function (e) {
  644:   348:     console.error("unable to read file, because: ", e.message);
  645    349  });
  646    350  ```
  ...
  648    394              a.b.c.d();
  649    395          }).catch(function catcher(e){
  650:   396:             console.error(e.stack);
  651    397          });
  652    398      })
  ...
  654    417              a.b.c.d();
  655    418          }).catch(function catcher(e){
  656:   419:             console.error(e.stack);
  657    420          });
  658    421      });
  ...
  661    626  writer.end('this is the end\n');
  662    627  writer.on('finish', () => {
  663:   628:   console.error('all writes are now complete.');
  664    629  });
  665    630  ```
  ...
  667    641  var reader = getReadableStreamSomehow();
  668    642  writer.on('pipe', (src) => {
  669:   643:   console.error('something is piping into the writer');
  670    644    assert.equal(src, reader);
  671    645  });
  ...
  673    659  var reader = getReadableStreamSomehow();
  674    660  writer.on('unpipe', (src) => {
  675:   661:   console.error('something has stopped piping into the writer');
  676    662    assert.equal(src, reader);
  677    663  });
  ...
  680    542    proc.on('error', function(err) {
  681    543      if (err.code == "ENOENT") {
  682:   544:       console.error('\n  %s(1) does not exist, try --help\n', bin);
  683    545      } else if (err.code == "EACCES") {
  684:   546:       console.error('\n  %s(1) not executable. try chmod or run with root\n', bin);
  685    547      }
  686    548      process.exit(1);
  ...
  688    750  
  689    751  Command.prototype.missingArgument = function(name) {
  690:   752:   console.error();
  691:   753:   console.error("  error: missing required argument `%s'", name);
  692:   754:   console.error();
  693    755    process.exit(1);
  694    756  };
  ...
  696    765  
  697    766  Command.prototype.optionMissingArgument = function(option, flag) {
  698:   767:   console.error();
  699    768    if (flag) {
  700:   769:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  701    770    } else {
  702:   771:     console.error("  error: option `%s' argument missing", option.flags);
  703    772    }
  704:   773:   console.error();
  705    774    process.exit(1);
  706    775  };
  ...
  708    784  Command.prototype.unknownOption = function(flag) {
  709    785    if (this._allowUnknownOption) return;
  710:   786:   console.error();
  711:   787:   console.error("  error: unknown option `%s'", flag);
  712:   788:   console.error();
  713    789    process.exit(1);
  714    790  };
  ...
  716    798  
  717    799  Command.prototype.variadicArgNotLast = function(name) {
  718:   800:   console.error();
  719:   801:   console.error("  error: variadic arguments must be last `%s'", name);
  720:   802:   console.error();
  721    803    process.exit(1);
  722    804  };
  ...
  725    151  
  726    152  if (typeof cmdValue === 'undefined') {
  727:   153:    console.error('no command given!');
  728    154     process.exit(1);
  729    155  }
  ...
  732     35  function handleError(err) {
  733     36    // handle your error appropriately here, e.g.:
  734:    37:   console.error(err) // print the error to STDERR
  735     38    process.exit(1) // exit program with non-zero exit code
  736     39  }
  ...
  739   1442  
  740   1443    * session: add long expires check and prevent excess set-cookie
  741:  1444:   * session: add console.error() of session#save() errors
  742   1445  
  743   1446  2.7.3 / 2013-02-19
  ...
  746    215  
  747    216  /**
  748:   217:  * Log error using console.error.
  749    218   *
  750    219   * @param {Error} err
  ...
  752    222  
  753    223  function logerror(err){
  754:   224:   if (env !== 'test') console.error(err.stack || err.toString());
  755    225  }
  756    226  
  ...
  759     62      }
  760     63      if err
  761:    64:       console.error err
  762     65        process.exit 1
  763     66      grunt.option(\path) || grunt.option(\path, './custom')
  ...
  766   3075  	        } else if(handler = global.onunhandledrejection){
  767   3076  	          handler({promise: promise, reason: value});
  768:  3077: 	        } else if((console = global.console) && console.error){
  769:  3078: 	          console.error('Unhandled promise rejection', value);
  770   3079  	        }
  771   3080  	      } record.a = undefined;
  ...
  774   2748  	        } else if(handler = global.onunhandledrejection){
  775   2749  	          handler({promise: promise, reason: value});
  776:  2750: 	        } else if((console = global.console) && console.error){
  777:  2751: 	          console.error('Unhandled promise rejection', value);
  778   2752  	        }
  779   2753  	      } record.a = undefined;
  ...
  782   3061  	        } else if(handler = global.onunhandledrejection){
  783   3062  	          handler({promise: promise, reason: value});
  784:  3063: 	        } else if((console = global.console) && console.error){
  785:  3064: 	          console.error('Unhandled promise rejection', value);
  786   3065  	        }
  787   3066  	      } record.a = undefined;
  ...
  790    124          } else if(handler = global.onunhandledrejection){
  791    125            handler({promise: promise, reason: value});
  792:   126:         } else if((console = global.console) && console.error){
  793:   127:           console.error('Unhandled promise rejection', value);
  794    128          }
  795    129        } record.a = undefined;
  ...
  798    124          } else if(handler = global.onunhandledrejection){
  799    125            handler({promise: promise, reason: value});
  800:   126:         } else if((console = global.console) && console.error){
  801:   127:           console.error('Unhandled promise rejection', value);
  802    128          }
  803    129        } record.a = undefined;
  ...
  806     70  -        console.trace(msg);
  807     71  -      } else {
  808:    72: -        console.error(msg);
  809     73  -      }
  810     74  -      warned = true;
  ...
  812     92  -      debugs[set] = function() {
  813     93  -        var msg = exports.format.apply(exports, arguments);
  814:    94: -        console.error('%s %d: %s', set, pid, msg);
  815     95  -      };
  816     96  -    } else {
  ...
  818    518  -exports.p = exports.deprecate(function() {
  819    519  -  for (var i = 0, len = arguments.length; i < len; ++i) {
  820:   520: -    console.error(exports.inspect(arguments[i]));
  821    521  -  }
  822:   522: -}, 'util.p: Use console.error() instead');
  823    523  -
  824    524  -
  ...
  826    544  -exports.debug = exports.deprecate(function(x) {
  827    545  -  process.stderr.write('DEBUG: ' + x + '\n');
  828:   546: -}, 'util.debug: Use console.error instead');
  829    547  -
  830    548  -
  ...
  832    551  -    process.stderr.write(arguments[i] + '\n');
  833    552  -  }
  834:   553: -}, 'util.error: Use console.error instead');
  835    554  -
  836    555  -
  ...
  839     42    return ('WebkitAppearance' in document.documentElement.style) ||
  840     43      // is firebug? http://stackoverflow.com/a/398120/376773
  841:    44:     (window.console && (console.firebug || (console.errorxception && console.table))) ||
  842     45      // is firefox >= v31?
  843     46      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  ...
  846    100  
  847    101  /**
  848:   102:  * Invokes `console.error()` with the specified arguments.
  849    103   */
  850    104  
  ...
  853     11  ## Usage
  854     12  
  855:    13:  With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility.
  856     14  
  857     15  Example _app.js_:
  ...
  860    626  writer.end('this is the end\n');
  861    627  writer.on('finish', () => {
  862:   628:   console.error('all writes are now complete.');
  863    629  });
  864    630  ```
  ...
  866    641  var reader = getReadableStreamSomehow();
  867    642  writer.on('pipe', (src) => {
  868:   643:   console.error('something is piping into the writer');
  869    644    assert.equal(src, reader);
  870    645  });
  ...
  872    659  var reader = getReadableStreamSomehow();
  873    660  writer.on('unpipe', (src) => {
  874:   661:   console.error('something has stopped piping into the writer');
  875    662    assert.equal(src, reader);
  876    663  });
  ...
  879     19          "  --config  use specified defs-config.js instead of searching for it",
  880     20      ].join("\n");
  881:    21:     console.error(usage);
  882     22      process.exit(-1);
  883     23  }
  ...
  885     25  
  886     26  if (!fs.existsSync(filename)) {
  887:    27:     console.error("error: file not found <%s>", filename);
  888     28      process.exit(-1);
  889     29  }
  ...
  891     55          var config = tryor(function() { return String(fs.readFileSync(argv.config)) }, null);
  892     56          if (!config) {
  893:    57:             console.error("error: config file not found <%s>", argv.config);
  894     58              process.exit(-1);
  895     59          }
  896     60          var json = tryor(function() { return JSON.parse(config) }, null);
  897     61          if (!json) {
  898:    62:             console.error("error: config file is not valid JSON <%s>", argv.config);
  899     63              process.exit(-1);
  900     64          }
  ...
  902     77              }, null);
  903     78              if (config$0 === null) {
  904:    79:                 console.error("error: config file is not valid JSON <%s>", filenamePath);
  905     80                  process.exit(-1);
  906     81              }
  ...
  909     19          "  --config  use specified defs-config.js instead of searching for it",
  910     20      ].join("\n");
  911:    21:     console.error(usage);
  912     22      process.exit(-1);
  913     23  }
  ...
  915     25  
  916     26  if (!fs.existsSync(filename)) {
  917:    27:     console.error("error: file not found <%s>", filename);
  918     28      process.exit(-1);
  919     29  }
  ...
  921     55          const config = tryor(function() { return String(fs.readFileSync(argv.config)) }, null);
  922     56          if (!config) {
  923:    57:             console.error("error: config file not found <%s>", argv.config);
  924     58              process.exit(-1);
  925     59          }
  926     60          const json = tryor(function() { return JSON.parse(config) }, null);
  927     61          if (!json) {
  928:    62:             console.error("error: config file is not valid JSON <%s>", argv.config);
  929     63              process.exit(-1);
  930     64          }
  ...
  932     77              }, null);
  933     78              if (config === null) {
  934:    79:                 console.error("error: config file is not valid JSON <%s>", filenamePath);
  935     80                  process.exit(-1);
  936     81              }
  ...
  939     40          failureOutput = true
  940     41          if (showHelpOnFail) yargs.showHelp('error')
  941:    42:         if (msg) console.error(msg)
  942     43          if (failMessage) {
  943:    44:           if (msg) console.error('')
  944:    45:           console.error(failMessage)
  945     46          }
  946     47        }
  ...
  949    897  var yargs = require("yargs")
  950    898    .usage("$0 -operand1 number -operand2 number -operation [add|subtract]");
  951:   899: yargs.showHelp(); //prints to stderr using console.error()
  952    900  ```
  953    901  
  ...
  956     29  		process.stdout.write(indent);
  957     30  	} else {
  958:    31: 		console.error('Indentation could not be detected');
  959     32  		process.exit(2);
  960     33  	}
  ...
  963    626  writer.end('this is the end\n');
  964    627  writer.on('finish', () => {
  965:   628:   console.error('all writes are now complete.');
  966    629  });
  967    630  ```
  ...
  969    641  var reader = getReadableStreamSomehow();
  970    642  writer.on('pipe', (src) => {
  971:   643:   console.error('something is piping into the writer');
  972    644    assert.equal(src, reader);
  973    645  });
  ...
  975    659  var reader = getReadableStreamSomehow();
  976    660  writer.on('unpipe', (src) => {
  977:   661:   console.error('something has stopped piping into the writer');
  978    662    assert.equal(src, reader);
  979    663  });
  ...
  982    626  writer.end('this is the end\n');
  983    627  writer.on('finish', () => {
  984:   628:   console.error('all writes are now complete.');
  985    629  });
  986    630  ```
  ...
  988    641  var reader = getReadableStreamSomehow();
  989    642  writer.on('pipe', (src) => {
  990:   643:   console.error('something is piping into the writer');
  991    644    assert.equal(src, reader);
  992    645  });
  ...
  994    659  var reader = getReadableStreamSomehow();
  995    660  writer.on('unpipe', (src) => {
  996:   661:   console.error('something has stopped piping into the writer');
  997    662    assert.equal(src, reader);
  998    663  });
  ...
 1001     39              result = convertIconv(str, to, from);
 1002     40          } catch (E) {
 1003:    41:             console.error(E);
 1004     42              try {
 1005     43                  result = convertIconvLite(str, to, from);
 1006     44              } catch (E) {
 1007:    45:                 console.error(E);
 1008     46                  result = str;
 1009     47              }
 ....
 1011     51              result = convertIconvLite(str, to, from);
 1012     52          } catch (E) {
 1013:    53:             console.error(E);
 1014     54              result = str;
 1015     55          }
 ....
 1018     15  
 1019     16          if (!iconv.supportsNodeEncodingsExtension) {
 1020:    17:             console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
 1021:    18:             console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
 1022     19              return;
 1023     20          }
 ....
 1026     27      if (typeof buf === 'string') {
 1027     28          if (!iconv.skipDecodeWarning) {
 1028:    29:             console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
 1029     30              iconv.skipDecodeWarning = true;
 1030     31          }
 ....
 1033    230              tick + ' ms';
 1034    231          if (failures.length) {
 1035:   232:             console.error(header);
 1036    233              failures.forEach(function (failure) {
 1037:   234:                 console.error(failure.source + ': Expected\n    ' +
 1038    235                      failure.expected.split('\n').join('\n    ') +
 1039    236                      '\nto match\n    ' + failure.actual);
 ....
 1042    492              tick + ' ms';
 1043    493          if (failures.length) {
 1044:   494:             console.error(header);
 1045    495              failures.forEach(function (failure) {
 1046    496                  try {
 ....
 1048    498                      var actualObject = JSON.parse(failure.actual);
 1049    499  
 1050:   500:                     console.error(failure.source + ': Expected\n    ' +
 1051    501                          failure.expected.split('\n').join('\n    ') +
 1052    502                          '\nto match\n    ' + failure.actual + '\nDiff:\n' +
 1053    503                          diff(expectedObject, actualObject));
 1054    504                  } catch (ex) {
 1055:   505:                     console.error(failure.source + ': Expected\n    ' +
 1056    506                          failure.expected.split('\n').join('\n    ') +
 1057    507                          '\nto match\n    ' + failure.actual);
 ....
 1060     16    console.log(JSON.stringify(data, null, 2))
 1061     17  else {
 1062:    18:   console.error('No such errno/code: "' + arg + '"')
 1063     19    process.exit(1)
 1064     20  }
 ....
 1067     76    }
 1068     77  
 1069:    78:   // default logging using console.error
 1070     79    if (log === true) {
 1071     80      log = logerror
 ....
 1073    198  
 1074    199  function logerror(err, str) {
 1075:   200:   console.error(str)
 1076    201  }
 1077    202  
 ....
 1080     59  Possible values:
 1081     60  
 1082:    61:   * `true`: Log errors using `console.error(str)`.
 1083     62    * `false`: Only send the error back in the response.
 1084     63    * A function: pass the error to a function for handling.
 ....
 1087     61          options = JSON.parse(fs.readFileSync(args.config, 'utf-8'));
 1088     62      } catch (err) {
 1089:    63:         console.error('Error parsing config: ', err);
 1090     64      }
 1091     65  }
 ....
 1094     54          options = JSON.parse(fs.readFileSync(args.config, 'utf-8'))
 1095     55      } catch (err) {
 1096:    56:         console.error('Error parsing config: ', err);
 1097     57      }
 1098     58  }
 ....
 1101    230              tick + ' ms';
 1102    231          if (failures.length) {
 1103:   232:             console.error(header);
 1104    233              failures.forEach(function (failure) {
 1105:   234:                 console.error(failure.source + ': Expected\n    ' +
 1106    235                      failure.expected.split('\n').join('\n    ') +
 1107    236                      '\nto match\n    ' + failure.actual);
 ....
 1110    492              tick + ' ms';
 1111    493          if (failures.length) {
 1112:   494:             console.error(header);
 1113    495              failures.forEach(function (failure) {
 1114    496                  try {
 ....
 1116    498                      var actualObject = JSON.parse(failure.actual);
 1117    499  
 1118:   500:                     console.error(failure.source + ': Expected\n    ' +
 1119    501                          failure.expected.split('\n').join('\n    ') +
 1120    502                          '\nto match\n    ' + failure.actual + '\nDiff:\n' +
 1121    503                          diff(expectedObject, actualObject));
 1122    504                  } catch (ex) {
 1123:   505:                     console.error(failure.source + ': Expected\n    ' +
 1124    506                          failure.expected.split('\n').join('\n    ') +
 1125    507                          '\nto match\n    ' + failure.actual);
 ....
 1128    141  
 1129    142    * Improve session-ending error handling
 1130:   143:     - Errors are passed to `next(err)` instead of `console.error`
 1131    144    * deps: debug@1.0.4
 1132    145    * deps: depd@0.4.2
 ....
 1135     20    var time = getTimestamp();
 1136     21    process.stderr.write(time + ' ');
 1137:    22:   console.error.apply(console, arguments);
 1138     23    return this;
 1139     24  }
 ....
 1142     28  ### `log.error(msg...)`
 1143     29  
 1144:    30: Logs ths message as if you called `console.error` but prefixes the output with the
 1145     31  current time in HH:MM:ss format.
 1146     32  
 ....
 1149     71      } else {
 1150     72        if (process.env.NODE_ENV !== 'production') {
 1151:    73:         console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
 1152     74        }
 1153     75        return {
 ....
 1156     69      } else {
 1157     70        if (__DEV__) {
 1158:    71:         console.error(
 1159     72            'Attempted to listen to events during the capture phase on a ' +
 1160     73            'browser that does not support the capture phase. Your application ' +
 ....
 1163     43        });
 1164     44        if (typeof console !== 'undefined') {
 1165:    45:         console.error(message);
 1166     46        }
 1167     47        try {
 ....
 1170     40        var message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);
 1171     41        if (typeof console !== 'undefined') {
 1172:    42:         console.error(message);
 1173     43        }
 1174     44        try {
 ....
 1177    114  
 1178    115  function logerror(err) {
 1179:   116:   console.error(err.stack || err.toString())
 1180    117  }
 1181    118  ```
 ....
 1184    163      return
 1185    164  
 1186:   165:   //console.error('FINISH', this.matches)
 1187    166    common.finish(this)
 1188    167    this.emit('end', this.found)
 ....
 1190    225    }
 1191    226  
 1192:   227:   //console.error('PROCESS %d', this._processing, pattern)
 1193    228  
 1194    229    // Get the first [n] parts of pattern that are all strings.
 ....
 1196    314    }
 1197    315  
 1198:   316:   //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
 1199    317  
 1200    318    var len = matchedEntries.length
 ....
 1202    429      return
 1203    430  
 1204:   431:   //console.error('RD %j %j', +inGlobStar, abs)
 1205    432    if (inGlobStar && !ownProp(this.symlinks, abs))
 1206    433      return this._readdirInGlobStar(abs, cb)
 ....
 1208    497        this.cache[f] = false
 1209    498        if (this.strict) return this.emit('error', er)
 1210:   499:       if (!this.silent) console.error('glob error', er)
 1211    500        break
 1212    501    }
 ....
 1214    512  
 1215    513  Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
 1216:   514:   //console.error('pgs2', prefix, remain[0], entries)
 1217    515  
 1218    516    // no entries means not a dir, so it can never have matches
 ....
 1220    561  Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
 1221    562  
 1222:   563:   //console.error('ps2', prefix, exists)
 1223    564  
 1224    565    if (!this.matches[index])
 ....
 1227    282        this.cache[f] = false
 1228    283        if (this.strict) throw er
 1229:   284:       if (!this.silent) console.error('glob error', er)
 1230    285        break
 1231    286    }
 ....
 1234     41      .catch(function (err) {
 1235     42        if (err instanceof SyntaxError) {
 1236:    43:         return console.error('%s [%s] failed to read JSON: %s', chalk.red('✖'), file, chalk.red(err.message))
 1237     44        }
 1238     45  
 1239     46        if (err instanceof ValidationError) {
 1240     47          err.errors.forEach(function (details) {
 1241:    48:           console.error('%s [%s] failed validation: (%s: %s) %s', chalk.red('✖'), file, chalk.cyan.italic(details.field), chalk.magenta.italic(details.value), chalk.red(details.message))
 1242     49          })
 1243     50  
 ....
 1245     52        }
 1246     53  
 1247:    54:       console.error('%s [%s] an unknown error has occured: %s', chalk.red('✖'), file, chalk.red(err.message))
 1248     55      })
 1249     56  })
 ....
 1252     26      function cb (err) {
 1253     27          if (err) {
 1254:    28:             console.error(err.message);
 1255     29              process.exit(1);
 1256     30          }
 ....
 1259     18  if (help || args.length === 0) {
 1260     19    // If they didn't ask for help, then this is not a "success"
 1261:    20:   var log = help ? console.log : console.error
 1262     21    log('Usage: rimraf <path> [<path> ...]')
 1263     22    log('')
 ....
 1266     80  
 1267     81  function failInc () {
 1268:    82:   console.error("--inc can only be used on a single version with no range")
 1269     83    fail()
 1270     84  }
 ....
 1273     65  		var opts = parser.parse(process.argv);
 1274     66  	} catch (e) {
 1275:    67: 		console.error('sshpk-conv: error: %s', e.message);
 1276     68  		process.exit(1);
 1277     69  	}
 ....
 1279     71  	if (opts.help || opts._args.length > 1) {
 1280     72  		var help = parser.help({}).trimRight();
 1281:    73: 		console.error('sshpk-conv: converts between SSH key formats\n');
 1282:    74: 		console.error(help);
 1283:    75: 		console.error('\navailable formats:');
 1284:    76: 		console.error('  - pem, pkcs1     eg id_rsa');
 1285:    77: 		console.error('  - ssh            eg id_rsa.pub');
 1286:    78: 		console.error('  - pkcs8          format you want for openssl');
 1287:    79: 		console.error('  - openssh        like output of ssh-keygen -o');
 1288:    80: 		console.error('  - rfc4253        raw OpenSSH wire format');
 1289     81  		process.exit(1);
 1290     82  	}
 ....
 1292    108  		}
 1293    109  	} catch (e) {
 1294:   110: 		console.error('sshpk-conv: error opening input file' +
 1295    111  		     ': ' + e.name + ': ' + e.message);
 1296    112  		process.exit(1);
 ....
 1298    121  		}
 1299    122  	} catch (e) {
 1300:   123: 		console.error('sshpk-conv: error opening output file' +
 1301    124  		    ': ' + e.name + ': ' + e.message);
 1302    125  		process.exit(1);
 ....
 1304    143  			var key = f(buf, fmt, inFileName);
 1305    144  		} catch (e) {
 1306:   145: 			console.error('sshpk-conv: ' +
 1307    146  			    e.name + ': ' + e.message);
 1308    147  			process.exit(1);
 ....
 1311     60  		var opts = parser.parse(process.argv);
 1312     61  	} catch (e) {
 1313:    62: 		console.error('sshpk-sign: error: %s', e.message);
 1314     63  		process.exit(1);
 1315     64  	}
 ....
 1317     66  	if (opts.help || opts._args.length > 1) {
 1318     67  		var help = parser.help({}).trimRight();
 1319:    68: 		console.error('sshpk-sign: sign data using an SSH key\n');
 1320:    69: 		console.error(help);
 1321     70  		process.exit(1);
 1322     71  	}
 ....
 1324     73  	if (!opts.identity) {
 1325     74  		var help = parser.help({}).trimRight();
 1326:    75: 		console.error('sshpk-sign: the -i or --identity option ' +
 1327     76  		    'is required\n');
 1328:    77: 		console.error(help);
 1329     78  		process.exit(1);
 1330     79  	}
 ....
 1332     85  		key = sshpk.parsePrivateKey(keyData);
 1333     86  	} catch (e) {
 1334:    87: 		console.error('sshpk-sign: error loading private key "' +
 1335     88  		    opts.identity + '": ' + e.name + ': ' + e.message);
 1336     89  		process.exit(1);
 ....
 1338     96  		signer = key.createSign(hash);
 1339     97  	} catch (e) {
 1340:    98: 		console.error('sshpk-sign: error creating signer: ' +
 1341     99  		    e.name + ': ' + e.message);
 1342    100  		process.exit(1);
 ....
 1344    102  
 1345    103  	if (opts.verbose) {
 1346:   104: 		console.error('sshpk-sign: using %s-%s with a %d bit key',
 1347    105  		    key.type, hash, key.size);
 1348    106  	}
 ....
 1350    125  		}
 1351    126  	} catch (e) {
 1352:   127: 		console.error('sshpk-sign: error opening input file' +
 1353    128  		     ': ' + e.name + ': ' + e.message);
 1354    129  		process.exit(1);
 ....
 1356    138  		}
 1357    139  	} catch (e) {
 1358:   140: 		console.error('sshpk-sign: error opening output file' +
 1359    141  		    ': ' + e.name + ': ' + e.message);
 1360    142  		process.exit(1);
 ....
 1362    149  			sig = signer.sign();
 1363    150  		} catch (e) {
 1364:   151: 			console.error('sshpk-sign: error signing data: ' +
 1365    152  			    e.name + ': ' + e.message);
 1366    153  			process.exit(1);
 ....
 1368    161  				output = output.toString('base64');
 1369    162  		} catch (e) {
 1370:   163: 			console.error('sshpk-sign: error converting signature' +
 1371    164  			    ' to ' + fmt + ' format: ' + e.name + ': ' +
 1372    165  			    e.message);
 ....
 1375     55  		var opts = parser.parse(process.argv);
 1376     56  	} catch (e) {
 1377:    57: 		console.error('sshpk-verify: error: %s', e.message);
 1378     58  		process.exit(3);
 1379     59  	}
 ....
 1381     61  	if (opts.help || opts._args.length > 1) {
 1382     62  		var help = parser.help({}).trimRight();
 1383:    63: 		console.error('sshpk-verify: sign data using an SSH key\n');
 1384:    64: 		console.error(help);
 1385     65  		process.exit(3);
 1386     66  	}
 ....
 1388     68  	if (!opts.identity) {
 1389     69  		var help = parser.help({}).trimRight();
 1390:    70: 		console.error('sshpk-verify: the -i or --identity option ' +
 1391     71  		    'is required\n');
 1392:    72: 		console.error(help);
 1393     73  		process.exit(3);
 1394     74  	}
 ....
 1396     76  	if (!opts.signature) {
 1397     77  		var help = parser.help({}).trimRight();
 1398:    78: 		console.error('sshpk-verify: the -s or --signature option ' +
 1399     79  		    'is required\n');
 1400:    80: 		console.error(help);
 1401     81  		process.exit(3);
 1402     82  	}
 ....
 1404     88  		key = sshpk.parseKey(keyData);
 1405     89  	} catch (e) {
 1406:    90: 		console.error('sshpk-verify: error loading key "' +
 1407     91  		    opts.identity + '": ' + e.name + ': ' + e.message);
 1408     92  		process.exit(2);
 ....
 1410    100  		sig = sshpk.parseSignature(sigData, key.type, fmt);
 1411    101  	} catch (e) {
 1412:   102: 		console.error('sshpk-verify: error parsing signature: ' +
 1413    103  		    e.name + ': ' + e.message);
 1414    104  		process.exit(2);
 ....
 1416    111  		verifier = key.createVerify(hash);
 1417    112  	} catch (e) {
 1418:   113: 		console.error('sshpk-verify: error creating verifier: ' +
 1419    114  		    e.name + ': ' + e.message);
 1420    115  		process.exit(2);
 ....
 1422    117  
 1423    118  	if (opts.verbose) {
 1424:   119: 		console.error('sshpk-verify: using %s-%s with a %d bit key',
 1425    120  		    key.type, hash, key.size);
 1426    121  	}
 ....
 1428    140  		}
 1429    141  	} catch (e) {
 1430:   142: 		console.error('sshpk-verify: error opening input file' +
 1431    143  		     ': ' + e.name + ': ' + e.message);
 1432    144  		process.exit(2);
 ....
 1434    151  			ret = verifier.verify(sig);
 1435    152  		} catch (e) {
 1436:   153: 			console.error('sshpk-verify: error verifying data: ' +
 1437    154  			    e.name + ': ' + e.message);
 1438    155  			process.exit(1);
 ....
 1440    157  
 1441    158  		if (ret) {
 1442:   159: 			console.error('OK');
 1443    160  			process.exit(0);
 1444    161  		}
 1445    162  
 1446:   163: 		console.error('NOT OK');
 1447    164  		process.exit(1);
 1448    165  	});
 ....
 1451     19  
 1452     20  if ('v1' !== arg && 'v4' !== arg) {
 1453:    21:   console.error('Version must be RFC4122 version 1 or version 4, denoted as "v1" or "v4"');
 1454     22    process.exit(1);
 1455     23  }
 ....
 1458     12    if (match) {
 1459     13      var xy = match.slice(1, 3).reverse().map(Number)
 1460:    14:     console.error(xy)
 1461     15    }
 1462     16  
 ....
 1465   1064                  if (typeof console === 'object') {
 1466   1065                      if (err) {
 1467:  1066:                         if (console.error) {
 1468:  1067:                             console.error(err);
 1469   1068                          }
 1470   1069                      }
 1471  
 1472  /Users/TQi/Documents/workspace/ReactReddit/node_modules/fsevents/node_modules/async/dist/async.min.js:
 1473:     1: !function(){function n(){}function t(n){return n}function e(n){return!!n}function r(n){return!n}function u(n){return function(){if(null===n)throw new Error("Callback was already called.");n.apply(this,arguments),n=null}}function i(n){return function(){null!==n&&(n.apply(this,arguments),n=null)}}function o(n){return M(n)||"number"==typeof n.length&&n.length>=0&&n.length%1===0}function c(n,t){for(var e=-1,r=n.length;++e<r;)t(n[e],e,n)}function a(n,t){for(var e=-1,r=n.length,u=Array(r);++e<r;)u[e]=t(n[e],e,n);return u}function f(n){return a(Array(n),function(n,t){return t})}function l(n,t,e){return c(n,function(n,r,u){e=t(e,n,r,u)}),e}function s(n,t){c(W(n),function(e){t(n[e],e)})}function p(n,t){for(var e=0;e<n.length;e++)if(n[e]===t)return e;return-1}function h(n){var t,e,r=-1;return o(n)?(t=n.length,function(){return r++,t>r?r:null}):(e=W(n),t=e.length,function(){return r++,t>r?e[r]:null})}function m(n,t){return t=null==t?n.length-1:+t,function(){for(var e=Math.max(arguments.length-t,0),r=Array(e),u=0;e>u;u++)r[u]=arguments[u+t];switch(t){case 0:return n.call(this,r);case 1:return n.call(this,arguments[0],r)}}}function y(n){return function(t,e,r){return n(t,r)}}function v(t){return function(e,r,o){o=i(o||n),e=e||[];var c=h(e);if(0>=t)return o(null);var a=!1,f=0,l=!1;!function s(){if(a&&0>=f)return o(null);for(;t>f&&!l;){var n=c();if(null===n)return a=!0,void(0>=f&&o(null));f+=1,r(e[n],n,u(function(n){f-=1,n?(o(n),l=!0):s()}))}}()}}function d(n){return function(t,e,r){return n(P.eachOf,t,e,r)}}function g(n){return function(t,e,r,u){return n(v(e),t,r,u)}}function k(n){return function(t,e,r){return n(P.eachOfSeries,t,e,r)}}function b(t,e,r,u){u=i(u||n),e=e||[];var c=o(e)?[]:{};t(e,function(n,t,e){r(n,function(n,r){c[t]=r,e(n)})},function(n){u(n,c)})}function w(n,t,e,r){var u=[];n(t,function(n,t,r){e(n,function(e){e&&u.push({index:t,value:n}),r()})},function(){r(a(u.sort(function(n,t){return n.index-t.index}),function(n){return n.value}))})}function O(n,t,e,r){w(n,t,function(n,t){e(n,function(n){t(!n)})},r)}function S(n,t,e){return function(r,u,i,o){function c(){o&&o(e(!1,void 0))}function a(n,r,u){return o?void i(n,function(r){o&&t(r)&&(o(e(!0,n)),o=i=!1),u()}):u()}arguments.length>3?n(r,u,a,c):(o=i,i=u,n(r,a,c))}}function E(n,t){return t}function L(t,e,r){r=r||n;var u=o(e)?[]:{};t(e,function(n,t,e){n(m(function(n,r){r.length<=1&&(r=r[0]),u[t]=r,e(n)}))},function(n){r(n,u)})}function j(n,t,e,r){var u=[];n(t,function(n,t,r){e(n,function(n,t){u=u.concat(t||[]),r(n)})},function(n){r(n,u)})}function I(t,e,r){function i(t,e,r,u){if(null!=u&&"function"!=typeof u)throw new Error("task callback must be a function");return t.started=!0,M(e)||(e=[e]),0===e.length&&t.idle()?P.setImmediate(function(){t.drain()}):(c(e,function(e){var i={data:e,callback:u||n};r?t.tasks.unshift(i):t.tasks.push(i),t.tasks.length===t.concurrency&&t.saturated()}),void P.setImmediate(t.process))}function o(n,t){return function(){f-=1;var e=!1,r=arguments;c(t,function(n){c(l,function(t,r){t!==n||e||(l.splice(r,1),e=!0)}),n.callback.apply(n,r)}),n.tasks.length+f===0&&n.drain(),n.process()}}if(null==e)e=1;else if(0===e)throw new Error("Concurrency must not be zero");var f=0,l=[],s={tasks:[],concurrency:e,payload:r,saturated:n,empty:n,drain:n,started:!1,paused:!1,push:function(n,t){i(s,n,!1,t)},kill:function(){s.drain=n,s.tasks=[]},unshift:function(n,t){i(s,n,!0,t)},process:function(){for(;!s.paused&&f<s.concurrency&&s.tasks.length;){var n=s.payload?s.tasks.splice(0,s.payload):s.tasks.splice(0,s.tasks.length),e=a(n,function(n){return n.data});0===s.tasks.length&&s.empty(),f+=1,l.push(n[0]);var r=u(o(s,n));t(e,r)}},length:function(){return s.tasks.length},running:function(){return f},workersList:function(){return l},idle:function(){return s.tasks.length+f===0},pause:function(){s.paused=!0},resume:function(){if(s.paused!==!1){s.paused=!1;for(var n=Math.min(s.concurrency,s.tasks.length),t=1;n>=t;t++)P.setImmediate(s.process)}}};return s}function x(n){return m(function(t,e){t.apply(null,e.concat([m(function(t,e){"object"==typeof console&&(t?console.error&&console.error(t):console[n]&&c(e,function(t){console[n](t)}))})]))})}function A(n){return function(t,e,r){n(f(t),e,r)}}function T(n){return m(function(t,e){var r=m(function(e){var r=this,u=e.pop();return n(t,function(n,t,u){n.apply(r,e.concat([u]))},u)});return e.length?r.apply(this,e):r})}function z(n){return m(function(t){var e=t.pop();t.push(function(){var n=arguments;r?P.setImmediate(function(){e.apply(null,n)}):e.apply(null,n)});var r=!0;n.apply(this,t),r=!1})}var q,P={},C="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||this;null!=C&&(q=C.async),P.noConflict=function(){return C.async=q,P};var H=Object.prototype.toString,M=Array.isArray||function(n){return"[object Array]"===H.call(n)},U=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},W=Object.keys||function(n){var t=[];for(var e in n)n.hasOwnProperty(e)&&t.push(e);return t},B="function"==typeof setImmediate&&setImmediate,D=B?function(n){B(n)}:function(n){setTimeout(n,0)};"object"==typeof process&&"function"==typeof process.nextTick?P.nextTick=process.nextTick:P.nextTick=D,P.setImmediate=B?D:P.nextTick,P.forEach=P.each=function(n,t,e){return P.eachOf(n,y(t),e)},P.forEachSeries=P.eachSeries=function(n,t,e){return P.eachOfSeries(n,y(t),e)},P.forEachLimit=P.eachLimit=function(n,t,e,r){return v(t)(n,y(e),r)},P.forEachOf=P.eachOf=function(t,e,r){function o(n){f--,n?r(n):null===c&&0>=f&&r(null)}r=i(r||n),t=t||[];for(var c,a=h(t),f=0;null!=(c=a());)f+=1,e(t[c],c,u(o));0===f&&r(null)},P.forEachOfSeries=P.eachOfSeries=function(t,e,r){function o(){var n=!0;return null===a?r(null):(e(t[a],a,u(function(t){if(t)r(t);else{if(a=c(),null===a)return r(null);n?P.setImmediate(o):o()}})),void(n=!1))}r=i(r||n),t=t||[];var c=h(t),a=c();o()},P.forEachOfLimit=P.eachOfLimit=function(n,t,e,r){v(t)(n,e,r)},P.map=d(b),P.mapSeries=k(b),P.mapLimit=g(b),P.inject=P.foldl=P.reduce=function(n,t,e,r){P.eachOfSeries(n,function(n,r,u){e(t,n,function(n,e){t=e,u(n)})},function(n){r(n,t)})},P.foldr=P.reduceRight=function(n,e,r,u){var i=a(n,t).reverse();P.reduce(i,e,r,u)},P.transform=function(n,t,e,r){3===arguments.length&&(r=e,e=t,t=M(n)?[]:{}),P.eachOf(n,function(n,r,u){e(t,n,r,u)},function(n){r(n,t)})},P.select=P.filter=d(w),P.selectLimit=P.filterLimit=g(w),P.selectSeries=P.filterSeries=k(w),P.reject=d(O),P.rejectLimit=g(O),P.rejectSeries=k(O),P.any=P.some=S(P.eachOf,e,t),P.someLimit=S(P.eachOfLimit,e,t),P.all=P.every=S(P.eachOf,r,r),P.everyLimit=S(P.eachOfLimit,r,r),P.detect=S(P.eachOf,t,E),P.detectSeries=S(P.eachOfSeries,t,E),P.detectLimit=S(P.eachOfLimit,t,E),P.sortBy=function(n,t,e){function r(n,t){var e=n.criteria,r=t.criteria;return r>e?-1:e>r?1:0}P.map(n,function(n,e){t(n,function(t,r){t?e(t):e(null,{value:n,criteria:r})})},function(n,t){return n?e(n):void e(null,a(t.sort(r),function(n){return n.value}))})},P.auto=function(t,e,r){function u(n){g.unshift(n)}function o(n){var t=p(g,n);t>=0&&g.splice(t,1)}function a(){h--,c(g.slice(0),function(n){n()})}"function"==typeof arguments[1]&&(r=e,e=null),r=i(r||n);var f=W(t),h=f.length;if(!h)return r(null);e||(e=h);var y={},v=0,d=!1,g=[];u(function(){h||r(null,y)}),c(f,function(n){function i(){return e>v&&l(k,function(n,t){return n&&y.hasOwnProperty(t)},!0)&&!y.hasOwnProperty(n)}function c(){i()&&(v++,o(c),h[h.length-1](g,y))}if(!d){for(var f,h=M(t[n])?t[n]:[t[n]],g=m(function(t,e){if(v--,e.length<=1&&(e=e[0]),t){var u={};s(y,function(n,t){u[t]=n}),u[n]=e,d=!0,r(t,u)}else y[n]=e,P.setImmediate(a)}),k=h.slice(0,h.length-1),b=k.length;b--;){if(!(f=t[k[b]]))throw new Error("Has nonexistent dependency in "+k.join(", "));if(M(f)&&p(f,n)>=0)throw new Error("Has cyclic dependencies")}i()?(v++,h[h.length-1](g,y)):u(c)}})},P.retry=function(n,t,e){function r(n,t){if("number"==typeof t)n.times=parseInt(t,10)||i;else{if("object"!=typeof t)throw new Error("Unsupported argument type for 'times': "+typeof t);n.times=parseInt(t.times,10)||i,n.interval=parseInt(t.interval,10)||o}}function u(n,t){function e(n,e){return function(r){n(function(n,t){r(!n||e,{err:n,result:t})},t)}}function r(n){return function(t){setTimeout(function(){t(null)},n)}}for(;a.times;){var u=!(a.times-=1);c.push(e(a.task,u)),!u&&a.interval>0&&c.push(r(a.interval))}P.series(c,function(t,e){e=e[e.length-1],(n||a.callback)(e.err,e.result)})}var i=5,o=0,c=[],a={times:i,interval:o},f=arguments.length;if(1>f||f>3)throw new Error("Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)");return 2>=f&&"function"==typeof n&&(e=t,t=n),"function"!=typeof n&&r(a,n),a.callback=e,a.task=t,a.callback?u():u},P.waterfall=function(t,e){function r(n){return m(function(t,u){if(t)e.apply(null,[t].concat(u));else{var i=n.next();i?u.push(r(i)):u.push(e),z(n).apply(null,u)}})}if(e=i(e||n),!M(t)){var u=new Error("First argument to waterfall must be an array of functions");return e(u)}return t.length?void r(P.iterator(t))():e()},P.parallel=function(n,t){L(P.eachOf,n,t)},P.parallelLimit=function(n,t,e){L(v(t),n,e)},P.series=function(n,t){L(P.eachOfSeries,n,t)},P.iterator=function(n){function t(e){function r(){return n.length&&n[e].apply(null,arguments),r.next()}return r.next=function(){return e<n.length-1?t(e+1):null},r}return t(0)},P.apply=m(function(n,t){return m(function(e){return n.apply(null,t.concat(e))})}),P.concat=d(j),P.concatSeries=k(j),P.whilst=function(t,e,r){if(r=r||n,t()){var u=m(function(n,i){n?r(n):t.apply(this,i)?e(u):r.apply(null,[null].concat(i))});e(u)}else r(null)},P.doWhilst=function(n,t,e){var r=0;return P.whilst(function(){return++r<=1||t.apply(this,arguments)},n,e)},P.until=function(n,t,e){return P.whilst(function(){return!n.apply(this,arguments)},t,e)},P.doUntil=function(n,t,e){return P.doWhilst(n,function(){return!t.apply(this,arguments)},e)},P.during=function(t,e,r){r=r||n;var u=m(function(n,e){n?r(n):(e.push(i),t.apply(this,e))}),i=function(n,t){n?r(n):t?e(u):r(null)};t(i)},P.doDuring=function(n,t,e){var r=0;P.during(function(n){r++<1?n(null,!0):t.apply(this,arguments)},n,e)},P.queue=function(n,t){var e=I(function(t,e){n(t[0],e)},t,1);return e},P.priorityQueue=function(t,e){function r(n,t){return n.priority-t.priority}function u(n,t,e){for(var r=-1,u=n.length-1;u>r;){var i=r+(u-r+1>>>1);e(t,n[i])>=0?r=i:u=i-1}return r}function i(t,e,i,o){if(null!=o&&"function"!=typeof o)throw new Error("task callback must be a function");return t.started=!0,M(e)||(e=[e]),0===e.length?P.setImmediate(function(){t.drain()}):void c(e,function(e){var c={data:e,priority:i,callback:"function"==typeof o?o:n};t.tasks.splice(u(t.tasks,c,r)+1,0,c),t.tasks.length===t.concurrency&&t.saturated(),P.setImmediate(t.process)})}var o=P.queue(t,e);return o.push=function(n,t,e){i(o,n,t,e)},delete o.unshift,o},P.cargo=function(n,t){return I(n,1,t)},P.log=x("log"),P.dir=x("dir"),P.memoize=function(n,e){var r={},u={},i=Object.prototype.hasOwnProperty;e=e||t;var o=m(function(t){var o=t.pop(),c=e.apply(null,t);i.call(r,c)?P.setImmediate(function(){o.apply(null,r[c])}):i.call(u,c)?u[c].push(o):(u[c]=[o],n.apply(null,t.concat([m(function(n){r[c]=n;var t=u[c];delete u[c];for(var e=0,i=t.length;i>e;e++)t[e].apply(null,n)})])))});return o.memo=r,o.unmemoized=n,o},P.unmemoize=function(n){return function(){return(n.unmemoized||n).apply(null,arguments)}},P.times=A(P.map),P.timesSeries=A(P.mapSeries),P.timesLimit=function(n,t,e,r){return P.mapLimit(f(n),t,e,r)},P.seq=function(){var t=arguments;return m(function(e){var r=this,u=e[e.length-1];"function"==typeof u?e.pop():u=n,P.reduce(t,e,function(n,t,e){t.apply(r,n.concat([m(function(n,t){e(n,t)})]))},function(n,t){u.apply(r,[n].concat(t))})})},P.compose=function(){return P.seq.apply(null,Array.prototype.reverse.call(arguments))},P.applyEach=T(P.eachOf),P.applyEachSeries=T(P.eachOfSeries),P.forever=function(t,e){function r(n){return n?i(n):void o(r)}var i=u(e||n),o=z(t);r()},P.ensureAsync=z,P.constant=m(function(n){var t=[null].concat(n);return function(n){return n.apply(this,t)}}),P.wrapSync=P.asyncify=function(n){return m(function(t){var e,r=t.pop();try{e=n.apply(this,t)}catch(u){return r(u)}U(e)&&"function"==typeof e.then?e.then(function(n){r(null,n)})["catch"](function(n){r(n.message?n:new Error(n))}):r(null,e)})},"object"==typeof module&&module.exports?module.exports=P:"function"==typeof define&&define.amd?define([],function(){return P}):C.async=P}();
 1474      2  //# sourceMappingURL=dist/async.min.map
 1475  
 ....
 1477   1064                  if (typeof console === 'object') {
 1478   1065                      if (err) {
 1479:  1066:                         if (console.error) {
 1480:  1067:                             console.error(err);
 1481   1068                          }
 1482   1069                      }
 ....
 1485    338    })
 1486    339  }, function (err) {
 1487:   340:   if (err) console.error(err.message);
 1488    341    // configs is now a map of JSON data
 1489    342    doSomethingWith(configs);
 ....
 1491   1102    )(req.session.user_id, function (err, cats) {
 1492   1103      if (err) {
 1493:  1104:       console.error(err);
 1494   1105        response.json({ status: 'error', message: err.message });
 1495   1106      } else {
 ....
 1497   1816  
 1498   1817  Logs the result of an `async` function to the `console`. Only works in Node.js or
 1499:  1818: in browsers that support `console.log` and `console.error` (such as FF and Chrome).
 1500   1819  If multiple arguments are returned from the async function, `console.log` is
 1501   1820  called on each argument in order.
 ....
 1503   1846  Logs the result of an `async` function to the `console` using `console.dir` to
 1504   1847  display the properties of the resulting object. Only works in Node.js or
 1505:  1848: in browsers that support `console.dir` and `console.error` (such as FF and Chrome).
 1506   1849  If multiple arguments are returned from the async function, `console.dir` is
 1507   1850  called on each argument in order.
 ....
 1510     18    if (!didTypeWarning && typeof key !== 'string' && typeof key !== 'number') {
 1511     19      didTypeWarning = true
 1512:    20:     console.error(new TypeError("LRU: key must be a string or number. Almost certainly a bug! " + typeof key).stack)
 1513     21    }
 1514     22  }
 ....
 1517     27  ## Keys should always be Strings or Numbers
 1518     28  
 1519:    29: Note: this module will print warnings to `console.error` if you use a
 1520     30  key that is not a String or Number.  Because items are stored in an
 1521     31  object, which coerces keys to a string, it won't go well for you if
 ....
 1524     45    t.equal(refs, startRefs, 'no leaky refs')
 1525     46  
 1526:    47:   console.error('start: %j\n' +
 1527     48                  'end:   %j', start, end);
 1528     49    t.pass();
 ....
 1531      8    , inherits = require("inherits")
 1532      9    , assert = require("assert").ok
 1533:    10:   , debug = process.env.DEBUG ? console.error : function () {}
 1534     11  
 1535     12  function BlockStream (size, opt) {
 ....
 1538    542    proc.on('error', function(err) {
 1539    543      if (err.code == "ENOENT") {
 1540:   544:       console.error('\n  %s(1) does not exist, try --help\n', bin);
 1541    545      } else if (err.code == "EACCES") {
 1542:   546:       console.error('\n  %s(1) not executable. try chmod or run with root\n', bin);
 1543    547      }
 1544    548      process.exit(1);
 ....
 1546    750  
 1547    751  Command.prototype.missingArgument = function(name) {
 1548:   752:   console.error();
 1549:   753:   console.error("  error: missing required argument `%s'", name);
 1550:   754:   console.error();
 1551    755    process.exit(1);
 1552    756  };
 ....
 1554    765  
 1555    766  Command.prototype.optionMissingArgument = function(option, flag) {
 1556:   767:   console.error();
 1557    768    if (flag) {
 1558:   769:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
 1559    770    } else {
 1560:   771:     console.error("  error: option `%s' argument missing", option.flags);
 1561    772    }
 1562:   773:   console.error();
 1563    774    process.exit(1);
 1564    775  };
 ....
 1566    784  Command.prototype.unknownOption = function(flag) {
 1567    785    if (this._allowUnknownOption) return;
 1568:   786:   console.error();
 1569:   787:   console.error("  error: unknown option `%s'", flag);
 1570:   788:   console.error();
 1571    789    process.exit(1);
 1572    790  };
 ....
 1574    798  
 1575    799  Command.prototype.variadicArgNotLast = function(name) {
 1576:   800:   console.error();
 1577:   801:   console.error("  error: variadic arguments must be last `%s'", name);
 1578:   802:   console.error();
 1579    803    process.exit(1);
 1580    804  };
 ....
 1583    151  
 1584    152  if (typeof cmdValue === 'undefined') {
 1585:   153:    console.error('no command given!');
 1586    154     process.exit(1);
 1587    155  }
 ....
 1590     70  -        console.trace(msg);
 1591     71  -      } else {
 1592:    72: -        console.error(msg);
 1593     73  -      }
 1594     74  -      warned = true;
 ....
 1596     92  -      debugs[set] = function() {
 1597     93  -        var msg = exports.format.apply(exports, arguments);
 1598:    94: -        console.error('%s %d: %s', set, pid, msg);
 1599     95  -      };
 1600     96  -    } else {
 ....
 1602    518  -exports.p = exports.deprecate(function() {
 1603    519  -  for (var i = 0, len = arguments.length; i < len; ++i) {
 1604:   520: -    console.error(exports.inspect(arguments[i]));
 1605    521  -  }
 1606:   522: -}, 'util.p: Use console.error() instead');
 1607    523  -
 1608    524  -
 ....
 1610    544  -exports.debug = exports.deprecate(function(x) {
 1611    545  -  process.stderr.write('DEBUG: ' + x + '\n');
 1612:   546: -}, 'util.debug: Use console.error instead');
 1613    547  -
 1614    548  -
 ....
 1616    551  -    process.stderr.write(arguments[i] + '\n');
 1617    552  -  }
 1618:   553: -}, 'util.error: Use console.error instead');
 1619    554  -
 1620    555  -
 ....
 1623     79    "name": "dashdash",
 1624     80    "optionalDependencies": {},
 1625:    81:   "readme": "A light, featureful and explicit option parsing library for node.js.\n\n[Why another one? See below](#why). tl;dr: The others I've tried are one of\ntoo loosey goosey (not explicit), too big/too many deps, or ill specified.\nYMMV.\n\nFollow <a href=\"https://twitter.com/intent/user?screen_name=trentmick\" target=\"_blank\">@trentmick</a>\nfor updates to node-dashdash.\n\n# Install\n\n    npm install dashdash\n\n\n# Usage\n\n```javascript\nvar dashdash = require('dashdash');\n\n// Specify the options. Minimally `name` (or `names`) and `type`\n// must be given for each.\nvar options = [\n    {\n        // `names` or a single `name`. First element is the `opts.KEY`.\n        names: ['help', 'h'],\n        // See \"Option specs\" below for types.\n        type: 'bool',\n        help: 'Print this help and exit.'\n    }\n];\n\n// Shortcut form. As called it infers `process.argv`. See below for\n// the longer form to use methods like `.help()` on the Parser object.\nvar opts = dashdash.parse({options: options});\n\nconsole.log(\"opts:\", opts);\nconsole.log(\"args:\", opts._args);\n```\n\n\n# Longer Example\n\nA more realistic [starter script \"foo.js\"](./examples/foo.js) is as follows.\nThis also shows using `parser.help()` for formatted option help.\n\n```javascript\nvar dashdash = require('./lib/dashdash');\n\nvar options = [\n    {\n        name: 'version',\n        type: 'bool',\n        help: 'Print tool version and exit.'\n    },\n    {\n        names: ['help', 'h'],\n        type: 'bool',\n        help: 'Print this help and exit.'\n    },\n    {\n        names: ['verbose', 'v'],\n        type: 'arrayOfBool',\n        help: 'Verbose output. Use multiple times for more verbose.'\n    },\n    {\n        names: ['file', 'f'],\n        type: 'string',\n        help: 'File to process',\n        helpArg: 'FILE'\n    }\n];\n\nvar parser = dashdash.createParser({options: options});\ntry {\n    var opts = parser.parse(process.argv);\n} catch (e) {\n    console.error('foo: error: %s', e.message);\n    process.exit(1);\n}\n\nconsole.log(\"# opts:\", opts);\nconsole.log(\"# args:\", opts._args);\n\n// Use `parser.help()` for formatted options help.\nif (opts.help) {\n    var help = parser.help({includeEnv: true}).trimRight();\n    console.log('usage: node foo.js [OPTIONS]\\n'\n                + 'options:\\n'\n                + help);\n    process.exit(0);\n}\n\n// ...\n```\n\n\nSome example output from this script (foo.js):\n\n```\n$ node foo.js -h\n# opts: { help: true,\n  _order: [ { name: 'help', value: true, from: 'argv' } ],\n  _args: [] }\n# args: []\nusage: node foo.js [OPTIONS]\noptions:\n    --version             Print tool version and exit.\n    -h, --help            Print this help and exit.\n    -v, --verbose         Verbose output. Use multiple times for more verbose.\n    -f FILE, --file=FILE  File to process\n\n$ node foo.js -v\n# opts: { verbose: [ true ],\n  _order: [ { name: 'verbose', value: true, from: 'argv' } ],\n  _args: [] }\n# args: []\n\n$ node foo.js --version arg1\n# opts: { version: true,\n  _order: [ { name: 'version', value: true, from: 'argv' } ],\n  _args: [ 'arg1' ] }\n# args: [ 'arg1' ]\n\n$ node foo.js -f bar.txt\n# opts: { file: 'bar.txt',\n  _order: [ { name: 'file', value: 'bar.txt', from: 'argv' } ],\n  _args: [] }\n# args: []\n\n$ node foo.js -vvv --file=blah\n# opts: { verbose: [ true, true, true ],\n  file: 'blah',\n  _order:\n   [ { name: 'verbose', value: true, from: 'argv' },\n     { name: 'verbose', value: true, from: 'argv' },\n     { name: 'verbose', value: true, from: 'argv' },\n     { name: 'file', value: 'blah', from: 'argv' } ],\n  _args: [] }\n# args: []\n```\n\n\nSee the [\"examples\"](examples/) dir for a number of starter examples using\nsome of dashdash's features.\n\n\n# Environment variable integration\n\nIf you want to allow environment variables to specify options to your tool,\ndashdash makes this easy. We can change the 'verbose' option in the example\nabove to include an 'env' field:\n\n```javascript\n    {\n        names: ['verbose', 'v'],\n        type: 'arrayOfBool',\n        env: 'FOO_VERBOSE',         // <--- add this line\n        help: 'Verbose output. Use multiple times for more verbose.'\n    },\n```\n\nthen the **\"FOO_VERBOSE\" environment variable** can be used to set this\noption:\n\n```shell\n$ FOO_VERBOSE=1 node foo.js\n# opts: { verbose: [ true ],\n  _order: [ { name: 'verbose', value: true, from: 'env' } ],\n  _args: [] }\n# args: []\n```\n\nBoolean options will interpret the empty string as unset, '0' as false\nand anything else as true.\n\n```shell\n$ FOO_VERBOSE= node examples/foo.js                 # not set\n# opts: { _order: [], _args: [] }\n# args: []\n\n$ FOO_VERBOSE=0 node examples/foo.js                # '0' is false\n# opts: { verbose: [ false ],\n  _order: [ { key: 'verbose', value: false, from: 'env' } ],\n  _args: [] }\n# args: []\n\n$ FOO_VERBOSE=1 node examples/foo.js                # true\n# opts: { verbose: [ true ],\n  _order: [ { key: 'verbose', value: true, from: 'env' } ],\n  _args: [] }\n# args: []\n\n$ FOO_VERBOSE=boogabooga node examples/foo.js       # true\n# opts: { verbose: [ true ],\n  _order: [ { key: 'verbose', value: true, from: 'env' } ],\n  _args: [] }\n# args: []\n```\n\nNon-booleans can be used as well. Strings:\n\n```shell\n$ FOO_FILE=data.txt node examples/foo.js\n# opts: { file: 'data.txt',\n  _order: [ { key: 'file', value: 'data.txt', from: 'env' } ],\n  _args: [] }\n# args: []\n```\n\nNumbers:\n\n```shell\n$ FOO_TIMEOUT=5000 node examples/foo.js\n# opts: { timeout: 5000,\n  _order: [ { key: 'timeout', value: 5000, from: 'env' } ],\n  _args: [] }\n# args: []\n\n$ FOO_TIMEOUT=blarg node examples/foo.js\nfoo: error: arg for \"FOO_TIMEOUT\" is not a positive integer: \"blarg\"\n```\n\nWith the `includeEnv: true` config to `parser.help()` the environment\nvariable can also be included in **help output**:\n\n    usage: node foo.js [OPTIONS]\n    options:\n        --version             Print tool version and exit.\n        -h, --help            Print this help and exit.\n        -v, --verbose         Verbose output. Use multiple times for more verbose.\n                              Environment: FOO_VERBOSE=1\n        -f FILE, --file=FILE  File to process\n\n\n# Bash completion\n\nDashdash provides a simple way to create a Bash completion file that you\ncan place in your \"bash_completion.d\" directory -- sometimes that is\n\"/usr/local/etc/bash_completion.d/\"). Features:\n\n- Support for short and long opts\n- Support for knowing which options take arguments\n- Support for subcommands (e.g. 'git log <TAB>' to show just options for the\n  log subcommand). See\n  [node-cmdln](https://github.com/trentm/node-cmdln#bash-completion) for\n  how to integrate that.\n- Does the right thing with \"--\" to stop options.\n- Custom optarg and arg types for custom completions.\n\nDashdash will return bash completion file content given a parser instance:\n\n    var parser = dashdash.createParser({options: options});\n    console.log( parser.bashCompletion({name: 'mycli'}) );\n\nor directly from a `options` array of options specs:\n\n    var code = dashdash.bashCompletionFromOptions({\n        name: 'mycli',\n        options: OPTIONS\n    });\n\nWrite that content to \"/usr/local/etc/bash_completion.d/mycli\" and you will\nhave Bash completions for `mycli`. Alternatively you can write it to\nany file (e.g. \"~/.bashrc\") and source it.\n\nYou could add a `--completion` hidden option to your tool that emits the\ncompletion content and document for your users to call that to install\nBash completions.\n\nSee [examples/ddcompletion.js](examples/ddcompletion.js) for a complete\nexample, including how one can define bash functions for completion of custom\noption types. Also see [node-cmdln](https://github.com/trentm/node-cmdln) for\nhow it uses this for Bash completion for full multi-subcommand tools.\n\n- TODO: document specExtra\n- TODO: document includeHidden\n- TODO: document custom types, `function complete\\_FOO` guide, completionType\n- TODO: document argtypes\n\n\n# Parser config\n\nParser construction (i.e. `dashdash.createParser(CONFIG)`) takes the\nfollowing fields:\n\n- `options` (Array of option specs). Required. See the\n  [Option specs](#option-specs) section below.\n\n- `interspersed` (Boolean). Optional. Default is true. If true this allows\n  interspersed arguments and options. I.e.:\n\n        node ./tool.js -v arg1 arg2 -h   # '-h' is after interspersed args\n\n  Set it to false to have '-h' **not** get parsed as an option in the above\n  example.\n\n- `allowUnknown` (Boolean).  Optional.  Default is false.  If false, this causes\n  unknown arguments to throw an error.  I.e.:\n\n        node ./tool.js -v arg1 --afe8asefksjefhas\n\n  Set it to true to treat the unknown option as a positional\n  argument.\n\n  **Caveat**: When a shortopt group, such as `-xaz` contains a mix of\n  known and unknown options, the *entire* group is passed through\n  unmolested as a positional argument.\n\n  Consider if you have a known short option `-a`, and parse the\n  following command line:\n\n        node ./tool.js -xaz\n\n  where `-x` and `-z` are unknown.  There are multiple ways to\n  interpret this:\n\n    1. `-x` takes a value: `{x: 'az'}`\n    2. `-x` and `-z` are both booleans: `{x:true,a:true,z:true}`\n\n  Since dashdash does not know what `-x` and `-z` are, it can't know\n  if you'd prefer to receive `{a:true,_args:['-x','-z']}` or\n  `{x:'az'}`, or `{_args:['-xaz']}`. Leaving the positional arg unprocessed\n  is the easiest mistake for the user to recover from.\n\n\n# Option specs\n\nExample using all fields (required fields are noted):\n\n```javascript\n{\n    names: ['file', 'f'],       // Required (one of `names` or `name`).\n    type: 'string',             // Required.\n    completionType: 'filename',\n    env: 'MYTOOL_FILE',\n    help: 'Config file to load before running \"mytool\"',\n    helpArg: 'PATH',\n    helpWrap: false,\n    default: path.resolve(process.env.HOME, '.mytoolrc')\n}\n```\n\nEach option spec in the `options` array must/can have the following fields:\n\n- `name` (String) or `names` (Array). Required. These give the option name\n  and aliases. The first name (if more than one given) is the key for the\n  parsed `opts` object.\n\n- `type` (String). Required. One of:\n\n    - bool\n    - string\n    - number\n    - integer\n    - positiveInteger\n    - date (epoch seconds, e.g. 1396031701, or ISO 8601 format\n      `YYYY-MM-DD[THH:MM:SS[.sss][Z]]`, e.g. \"2014-03-28T18:35:01.489Z\")\n    - arrayOfBool\n    - arrayOfString\n    - arrayOfNumber\n    - arrayOfInteger\n    - arrayOfPositiveInteger\n    - arrayOfDate\n\n  FWIW, these names attempt to match with asserts on\n  [assert-plus](https://github.com/mcavage/node-assert-plus).\n  You can add your own custom option types with `dashdash.addOptionType`.\n  See below.\n\n- `completionType` (String). Optional. This is used for [Bash\n  completion](#bash-completion) for an option argument. If not specified,\n  then the value of `type` is used. Any string may be specified, but only the\n  following values have meaning:\n\n    - `none`: Provide no completions.\n    - `file`: Bash's default completion (i.e. `complete -o default`), which\n      includes filenames.\n    - *Any string FOO for which a `function complete_FOO` Bash function is\n      defined.* This is for custom completions for a given tool. Typically\n      these custom functions are provided in the `specExtra` argument to\n      `dashdash.bashCompletionFromOptions()`. See\n      [\"examples/ddcompletion.js\"](examples/ddcompletion.js) for an example.\n\n- `env` (String or Array of String). Optional. An environment variable name\n  (or names) that can be used as a fallback for this option. For example,\n  given a \"foo.js\" like this:\n\n        var options = [{names: ['dry-run', 'n'], env: 'FOO_DRY_RUN'}];\n        var opts = dashdash.parse({options: options});\n\n  Both `node foo.js --dry-run` and `FOO_DRY_RUN=1 node foo.js` would result\n  in `opts.dry_run = true`.\n\n  An environment variable is only used as a fallback, i.e. it is ignored if\n  the associated option is given in `argv`.\n\n- `help` (String). Optional. Used for `parser.help()` output.\n\n- `helpArg` (String). Optional. Used in help output as the placeholder for\n  the option argument, e.g. the \"PATH\" in:\n\n        ...\n        -f PATH, --file=PATH    File to process\n        ...\n\n- `helpWrap` (Boolean). Optional, default true. Set this to `false` to have\n  that option's `help` *not* be text wrapped in `<parser>.help()` output.\n\n- `default`. Optional. A default value used for this option, if the\n  option isn't specified in argv.\n\n- `hidden` (Boolean). Optional, default false. If true, help output will not\n  include this option. See also the `includeHidden` option to\n  `bashCompletionFromOptions()` for [Bash completion](#bash-completion).\n\n\n# Option group headings\n\nYou can add headings between option specs in the `options` array.  To do so,\nsimply add an object with only a `group` property -- the string to print as\nthe heading for the subsequent options in the array.  For example:\n\n```javascript\nvar options = [\n    {\n        group: 'Armament Options'\n    },\n    {\n        names: [ 'weapon', 'w' ],\n        type: 'string'\n    },\n    {\n        group: 'General Options'\n    },\n    {\n        names: [ 'help', 'h' ],\n        type: 'bool'\n    }\n];\n...\n```\n\nNote: You can use an empty string, `{group: ''}`, to get a blank line in help\noutput between groups of options.\n\n\n# Help config\n\nThe `parser.help(...)` function is configurable as follows:\n\n        Options:\n          Armament Options:\n        ^^  -w WEAPON, --weapon=WEAPON  Weapon with which to crush. One of: |\n       /                                sword, spear, maul                  |\n      /   General Options:                                                  |\n     /      -h, --help                  Print this help and exit.           |\n    /   ^^^^                            ^                                   |\n    \\       `-- indent                   `-- helpCol              maxCol ---'\n     `-- headingIndent\n\n- `indent` (Number or String). Default 4. Set to a number (for that many\n  spaces) or a string for the literal indent.\n- `headingIndent` (Number or String). Default half length of `indent`. Set to\n  a number (for that many spaces) or a string for the literal indent. This\n  indent applies to group heading lines, between normal option lines.\n- `nameSort` (String). Default is 'length'. By default the names are\n  sorted to put the short opts first (i.e. '-h, --help' preferred\n  to '--help, -h'). Set to 'none' to not do this sorting.\n- `maxCol` (Number). Default 80. Note that reflow is just done on whitespace\n  so a long token in the option help can overflow maxCol.\n- `helpCol` (Number). If not set a reasonable value will be determined\n  between `minHelpCol` and `maxHelpCol`.\n- `minHelpCol` (Number). Default 20.\n- `maxHelpCol` (Number). Default 40.\n- `helpWrap` (Boolean). Default true. Set to `false` to have option `help`\n  strings *not* be textwrapped to the helpCol..maxCol range.\n- `includeEnv` (Boolean). Default false. If the option has associated\n  environment variables (via the `env` option spec attribute), then\n  append mentioned of those envvars to the help string.\n- `includeDefault` (Boolean). Default false. If the option has a default value\n  (via the `default` option spec attribute, or a default on the option's type),\n  then a \"Default: VALUE\" string will be appended to the help string.\n\n\n# Custom option types\n\nDashdash includes a good starter set of option types that it will parse for\nyou. However, you can add your own via:\n\n    var dashdash = require('dashdash');\n    dashdash.addOptionType({\n        name: '...',\n        takesArg: true,\n        helpArg: '...',\n        parseArg: function (option, optstr, arg) {\n            ...\n        },\n        array: false,  // optional\n        arrayFlatten: false,  // optional\n        default: ...,   // optional\n        completionType: ...  // optional\n    });\n\nFor example, a simple option type that accepts 'yes', 'y', 'no' or 'n' as\na boolean argument would look like:\n\n    var dashdash = require('dashdash');\n\n    function parseYesNo(option, optstr, arg) {\n        var argLower = arg.toLowerCase()\n        if (~['yes', 'y'].indexOf(argLower)) {\n            return true;\n        } else if (~['no', 'n'].indexOf(argLower)) {\n            return false;\n        } else {\n            throw new Error(format(\n                'arg for \"%s\" is not \"yes\" or \"no\": \"%s\"',\n                optstr, arg));\n        }\n    }\n\n    dashdash.addOptionType({\n        name: 'yesno'\n        takesArg: true,\n        helpArg: '<yes|no>',\n        parseArg: parseYesNo\n    });\n\n    var options = {\n        {names: ['answer', 'a'], type: 'yesno'}\n    };\n    var opts = dashdash.parse({options: options});\n\nSee \"examples/custom-option-\\*.js\" for other examples.\nSee the `addOptionType` block comment in \"lib/dashdash.js\" for more details.\nPlease let me know [with an\nissue](https://github.com/trentm/node-dashdash/issues/new) if you write a\ngenerally useful one.\n\n\n\n# Why\n\nWhy another node.js option parsing lib?\n\n- `nopt` really is just for \"tools like npm\". Implicit opts (e.g. '--no-foo'\n  works for every '--foo'). Can't disable abbreviated opts. Can't do multiple\n  usages of same opt, e.g. '-vvv' (I think). Can't do grouped short opts.\n\n- `optimist` has surprise interpretation of options (at least to me).\n  Implicit opts mean ambiguities and poor error handling for fat-fingering.\n  `process.exit` calls makes it hard to use as a libary.\n\n- `optparse` Incomplete docs. Is this an attempted clone of Python's `optparse`.\n  Not clear. Some divergence. `parser.on(\"name\", ...)` API is weird.\n\n- `argparse` Dep on underscore. No thanks just for option processing.\n  `find lib | wc -l` -> `26`. Overkill.\n  Argparse is a bit different anyway. Not sure I want that.\n\n- `posix-getopt` No type validation. Though that isn't a killer. AFAIK can't\n  have a long opt without a short alias. I.e. no `getopt_long` semantics.\n  Also, no whizbang features like generated help output.\n\n- [\"commander.js\"](https://github.com/visionmedia/commander.js): I wrote\n  [a critique](http://trentm.com/2014/01/a-critique-of-commander-for-nodejs.html)\n  a while back. It seems fine, but last I checked had\n  [an outstanding bug](https://github.com/visionmedia/commander.js/pull/121)\n  that would prevent me from using it.\n\n\n# License\n\nMIT. See LICENSE.txt.\n",
 1626     82    "readmeFilename": "README.md",
 1627     83    "repository": {
 ....
 1630     75      var opts = parser.parse(process.argv);
 1631     76  } catch (e) {
 1632:    77:     console.error('foo: error: %s', e.message);
 1633     78      process.exit(1);
 1634     79  }
 ....
 1637     42    return ('WebkitAppearance' in document.documentElement.style) ||
 1638     43      // is firebug? http://stackoverflow.com/a/398120/376773
 1639:    44:     (window.console && (console.firebug || (console.errorxception && console.table))) ||
 1640     45      // is firefox >= v31?
 1641     46      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
 ....
 1644    100  
 1645    101  /**
 1646:   102:  * Invokes `console.error()` with the specified arguments.
 1647    103   */
 1648    104  
 ....
 1651     11  ## Usage
 1652     12  
 1653:    13:  With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility.
 1654     14  
 1655     15  Example _app.js_:
 ....
 1658    176  request.post({url:'http://service.com/upload', formData: formData}, function(err, httpResponse, body) {
 1659    177    if (err) {
 1660:   178:     return console.error('upload failed:', err);
 1661    179    }
 1662    180    console.log('Upload successful!  Server responded with:', body);
 ....
 1665      4         })
 1666      5    .on("child", function (c) {
 1667:     6:     console.error(c.path.substr(c.root.path.length + 1))
 1668      7      c.on("ignoreFile", onIgnoreFile)
 1669      8    })
 ....
 1671     10  
 1672     11  function onIgnoreFile (e) {
 1673:    12:   console.error("adding ignore file", e.path)
 1674     13  }
 1675     14  
 ....
 1678    155    var set = this.globSet = this.braceExpand()
 1679    156  
 1680:   157:   if (options.debug) this.debug = console.error
 1681    158  
 1682    159    this.debug(this.pattern, set)
 ....
 1685     56    "name": "fstream-ignore",
 1686     57    "optionalDependencies": {},
 1687:    58:   "readme": "# fstream-ignore\n\nA fstream DirReader that filters out files that match globs in `.ignore`\nfiles throughout the tree, like how git ignores files based on a\n`.gitignore` file.\n\nHere's an example:\n\n```javascript\nvar Ignore = require(\"fstream-ignore\")\nIgnore({ path: __dirname\n       , ignoreFiles: [\".ignore\", \".gitignore\"]\n       })\n  .on(\"child\", function (c) {\n    console.error(c.path.substr(c.root.path.length + 1))\n  })\n  .pipe(tar.Pack())\n  .pipe(fs.createWriteStream(\"foo.tar\"))\n```\n\nThis will tar up the files in __dirname into `foo.tar`, ignoring\nanything matched by the globs in any .iginore or .gitignore file.\n",
 1688     59    "readmeFilename": "README.md",
 1689     60    "repository": {
 ....
 1692     13         })
 1693     14    .on("child", function (c) {
 1694:    15:     console.error(c.path.substr(c.root.path.length + 1))
 1695     16    })
 1696     17    .pipe(tar.Pack())
 ....
 1699     17               , ignoreFiles: [".basic-ignore"] })
 1700     18      .on("ignoreFile", function (e) {
 1701:    19:       console.error("ignore file!", e)
 1702     20      })
 1703     21      .on("child", function (e) {
 ....
 1706     20    }
 1707     21    fs.writeFileSync(file, rules)
 1708:    22:   console.error(file, rules)
 1709     23  }
 1710     24  
 ....
 1713     23               , ignoreFiles: [".ignore"] })
 1714     24      .on("ignoreFile", function (e) {
 1715:    25:       console.error("ignore file!", e)
 1716     26      })
 1717     27      .on("child", function (e) {
 ....
 1720     62               , ignoreFiles: [".gitignore", ".ignore"] })
 1721     63      .on("ignoreFile", function (e) {
 1722:    64:       console.error("ignore file!", e)
 1723     65      })
 1724     66      .on("child", function (e) {
 ....
 1727     25  r.on('entry', appears)
 1728     26  r.on('ready', function () {
 1729:    27:   console.error('ready to begin!', r.path)
 1730     28  })
 1731     29  
 1732     30  function appears (entry) {
 1733:    31:   console.error(indent + 'a %s appears!', entry.type, entry.basename, typeof entry.basename)
 1734     32    if (foggy) {
 1735:    33:     console.error('FOGGY!')
 1736     34      var p = entry
 1737     35      do {
 1738:    36:       console.error(p.depth, p.path, p._paused)
 1739     37        p = p.parent
 1740     38      } while (p)
 ....
 1742     51      if (!foggy) return
 1743     52      if (who) {
 1744:    53:       console.error('%s breaks the spell!', who && who.path)
 1745     54      } else {
 1746:    55:       console.error('the spell expires!')
 1747     56      }
 1748:    57:     console.error('\u001b[mthe fog lifts!\n')
 1749     58      clearTimeout(foggy)
 1750     59      foggy = null
 ....
 1752     69        process.nextTick(function () {
 1753     70          if (!foggy && !ended) { // && Math.random() < 0.3) {
 1754:    71:           console.error(indent + '%s casts a spell', entry.basename)
 1755:    72:           console.error('\na slowing fog comes over the battlefield...\n\u001b[32m')
 1756     73            entry.pause()
 1757     74            entry.once('resume', liftFog)
 ....
 1759     81    return function (c) {
 1760     82      var e = Math.random() < 0.5
 1761:    83:     console.error(indent + '%s %s for %d damage!',
 1762     84        entry.basename,
 1763     85        e ? 'is struck' : 'fires a chunk',
 ....
 1765     91    return function () {
 1766     92      var e = Math.random() < 0.5
 1767:    93:     console.error(indent + '%s %s',
 1768     94        entry.basename,
 1769     95        e ? 'turns to flee' : 'is vanquished!')
 ....
 1771    101  // w.on('ready', function () { attacks(w) })
 1772    102  function attacks (entry) {
 1773:   103:   console.error(indent + '%s %s!', entry.basename,
 1774    104      entry.type === 'Directory' ? 'calls for backup' : 'attacks')
 1775    105    entry.on('entry', attacks)
 ....
 1777    110  r.on('end', function () {
 1778    111    if (foggy) clearTimeout(foggy)
 1779:   112:   console.error("\u001b[mIT'S OVER!!")
 1780:   113:   console.error('A WINNAR IS YOU!')
 1781    114  
 1782    115    console.log('ok ' + (i++) + ' A WINNAR IS YOU')
 ....
 1785     20  r.on('entry', appears)
 1786     21  r.on('ready', function () {
 1787:    22:   console.error('ready to begin!', r.path)
 1788     23  })
 1789     24  
 1790     25  function appears (entry) {
 1791:    26:   console.error(indent + 'a %s appears!', entry.type, entry.basename, typeof entry.basename, entry)
 1792     27    if (foggy) {
 1793:    28:     console.error('FOGGY!')
 1794     29      var p = entry
 1795     30      do {
 1796:    31:       console.error(p.depth, p.path, p._paused)
 1797     32        p = p.parent
 1798     33      } while (p)
 ....
 1800     46      if (!foggy) return
 1801     47      if (who) {
 1802:    48:       console.error('%s breaks the spell!', who && who.path)
 1803     49      } else {
 1804:    50:       console.error('the spell expires!')
 1805     51      }
 1806:    52:     console.error('\u001b[mthe fog lifts!\n')
 1807     53      clearTimeout(foggy)
 1808     54      foggy = null
 ....
 1810     64        process.nextTick(function () {
 1811     65          if (!foggy && !ended) { // && Math.random() < 0.3) {
 1812:    66:           console.error(indent + '%s casts a spell', entry.basename)
 1813:    67:           console.error('\na slowing fog comes over the battlefield...\n\u001b[32m')
 1814     68            entry.pause()
 1815     69            entry.once('resume', liftFog)
 ....
 1817     76    return function (c) {
 1818     77      var e = Math.random() < 0.5
 1819:    78:     console.error(indent + '%s %s for %d damage!',
 1820     79        entry.basename,
 1821     80        e ? 'is struck' : 'fires a chunk',
 ....
 1823     86    return function () {
 1824     87      var e = Math.random() < 0.5
 1825:    88:     console.error(indent + '%s %s',
 1826     89        entry.basename,
 1827     90        e ? 'turns to flee' : 'is vanquished!')
 ....
 1829     96  // w.on('ready', function () { attacks(w) })
 1830     97  function attacks (entry) {
 1831:    98:   console.error(indent + '%s %s!', entry.basename,
 1832     99      entry.type === 'Directory' ? 'calls for backup' : 'attacks')
 1833    100    entry.on('entry', attacks)
 ....
 1835    104  r.on('end', function () {
 1836    105    if (foggy) clearTimeout(foggy)
 1837:   106:   console.error("\u001b[mIT'S OVER!!")
 1838:   107:   console.error('A WINNAR IS YOU!')
 1839    108  
 1840    109    console.log('ok 1 A WINNAR IS YOU')
 ....
 1843     21      gotReady = true
 1844     22      children = fs.readdirSync(dir).length
 1845:    23:     console.error('Setting expected children to ' + children)
 1846     24      t.equal(r.type, 'Directory', 'should be a directory')
 1847     25    })
 ....
 1850     32    var er = decorate(msg, code, self)
 1851     33    if (!self.listeners('warn')) {
 1852:    34:     console.error('%s %s\n' +
 1853     35      'path = %s\n' +
 1854     36      'syscall = %s\n' +
 ....
 1857     33    stream.pipe = (function (orig) {
 1858     34      return function (dest) {
 1859:    35:       // console.error(' === open the pipes', dest && dest.path)
 1860     36  
 1861     37        // let the entries flow through one at a time.
 ....
 1863     40        ;(function unblockEntry () {
 1864     41          var entry = entryBuffer[e++]
 1865:    42:         // console.error(" ==== unblock entry", entry && entry.path)
 1866     43          if (!entry) return resume()
 1867     44          entry.on('end', unblockEntry)
 ....
 1870     70  
 1871     71    if (self._paused || self._currentEntry || self._aborted) {
 1872:    72:     // console.error('DR paused=%j, current=%j, aborted=%j', self._paused, !!self._currentEntry, self._aborted)
 1873     73      return
 1874     74    }
 ....
 1876    108      var entry = Reader(childProps, stat)
 1877    109  
 1878:   110:     // console.error("DR Entry", p, stat.size)
 1879    111  
 1880    112      self._currentEntry = entry
 ....
 1882    139  
 1883    140      entry.on('ready', function EMITCHILD () {
 1884:   141:       // console.error("DR emit child", entry._path)
 1885    142        if (self._paused) {
 1886:   143:         // console.error("  DR emit child - try again later")
 1887    144          // pause the child, and emit the "entry" event once we drain.
 1888:   145:         // console.error("DR pausing child entry")
 1889    146          entry.pause(self)
 1890    147          return self.once('resume', EMITCHILD)
 ....
 1892    235  
 1893    236    self._paused = false
 1894:   237:   // console.error('DR Emit Resume', self._path)
 1895    238    self.emit('resume', who)
 1896    239    if (self._paused) {
 1897:   240:     // console.error('DR Re-paused', self._path)
 1898    241      return
 1899    242    }
 ....
 1902     57    var self = this
 1903     58  
 1904:    59:   // console.error('\tadd', entry._path, '->', self._path)
 1905     60    collect(entry)
 1906     61    if (!self.ready || self._currentEntry) {
 ....
 1908     78    var self = this
 1909     79  
 1910:    80:   // console.error('DW Process p=%j', self._processing, self.basename)
 1911     81  
 1912     82    if (self._processing) return
 ....
 1914     84    var entry = self._buffer.shift()
 1915     85    if (!entry) {
 1916:    86:     // console.error("DW Drain")
 1917     87      self.emit('drain')
 1918     88      if (self._ended) self._finish()
 ....
 1920     91  
 1921     92    self._processing = true
 1922:    93:   // console.error("DW Entry", entry._path)
 1923     94  
 1924     95    self.emit('entry', entry)
 ....
 1926    104      if (pp === self.root._path || pp === self._path ||
 1927    105        (pp && pp.indexOf(self._path) === 0)) {
 1928:   106:       // console.error('DW Exit (recursive)', entry.basename, self._path)
 1929    107        self._processing = false
 1930    108        if (entry._collected) entry.pipe()
 ....
 1932    112    } while (p)
 1933    113  
 1934:   114:   // console.error("DW not recursive")
 1935    115  
 1936    116    // chop off the entry's root dir, replace with ours
 ....
 1938    142    var child = self._currentChild = new Writer(props)
 1939    143    child.on('ready', function () {
 1940:   144:     // console.error("DW Child Ready", child.type, child._path)
 1941:   145:     // console.error("  resuming", entry._path)
 1942    146      entry.pipe(child)
 1943    147      entry.resume()
 ....
 1945    167      if (ended) return
 1946    168      ended = true
 1947:   169:     // console.error("* DW Child end", child.basename)
 1948    170      self._currentChild = null
 1949    171      self._processing = false
 ....
 1952     12  
 1953     13  function FileReader (props) {
 1954:    14:   // console.error("    FR create", props.path, props.size, new Error().stack)
 1955     15    var self = this
 1956     16    if (!(self instanceof FileReader)) {
 ....
 1958     42  
 1959     43    stream.on('data', function (c) {
 1960:    44:     // console.error('\t\t%d %s', c.length, self.basename)
 1961     45      self._bytesEmitted += c.length
 1962     46      // no point saving empty chunks
 ....
 1964     55    stream.on('end', function () {
 1965     56      if (self._paused || self._buffer.length) {
 1966:    57:       // console.error('FR Buffering End', self._path)
 1967     58        self._buffer.push(EOF)
 1968     59        self._read()
 ....
 1970     71    stream.on('close', function () {
 1971     72      if (self._paused || self._buffer.length) {
 1972:    73:       // console.error('FR Buffering Close', self._path)
 1973     74        self._buffer.push(CLOSE)
 1974     75        self._read()
 1975     76      } else {
 1976:    77:       // console.error('FR close 1', self._path)
 1977     78        self.emit('close')
 1978     79      }
 ....
 1980     89  FileReader.prototype._read = function () {
 1981     90    var self = this
 1982:    91:   // console.error('FR _read', self._path)
 1983     92    if (self._paused) {
 1984:    93:     // console.error('FR _read paused', self._path)
 1985     94      return
 1986     95    }
 1987     96  
 1988     97    if (!self._stream) {
 1989:    98:     // console.error('FR _getStream calling', self._path)
 1990     99      return self._getStream()
 1991    100    }
 ....
 1993    102    // clear out the buffer, if there is one.
 1994    103    if (self._buffer.length) {
 1995:   104:     // console.error('FR _read has buffer', self._buffer.length, self._path)
 1996    105      var buf = self._buffer
 1997    106      for (var i = 0, l = buf.length; i < l; i++) {
 1998    107        var c = buf[i]
 1999    108        if (c === EOF) {
 2000:   109:         // console.error('FR Read emitting buffered end', self._path)
 2001    110          self.emit('end')
 2002    111        } else if (c === CLOSE) {
 2003:   112:         // console.error('FR Read emitting buffered close', self._path)
 2004    113          self.emit('close')
 2005    114        } else {
 2006:   115:         // console.error('FR Read emitting buffered data', self._path)
 2007    116          self.emit('data', c)
 2008    117        }
 2009    118  
 2010    119        if (self._paused) {
 2011:   120:         // console.error('FR Read Re-pausing at '+i, self._path)
 2012    121          self._buffer = buf.slice(i)
 2013    122          return
 ....
 2015    125      self._buffer.length = 0
 2016    126    }
 2017:   127: // console.error("FR _read done")
 2018    128  // that's about all there is to it.
 2019    129  }
 ....
 2021    131  FileReader.prototype.pause = function (who) {
 2022    132    var self = this
 2023:   133:   // console.error('FR Pause', self._path)
 2024    134    if (self._paused) return
 2025    135    who = who || self
 ....
 2027    141  FileReader.prototype.resume = function (who) {
 2028    142    var self = this
 2029:   143:   // console.error('FR Resume', self._path)
 2030    144    if (!self._paused) return
 2031    145    who = who || self
 ....
 2034     37  
 2035     38    self._stream.on('open', function () {
 2036:    39:     // console.error("FW open", self._buffer, self._path)
 2037     40      self.ready = true
 2038     41      self._buffer.forEach(function (c) {
 ....
 2040     53  
 2041     54    self._stream.on('close', function () {
 2042:    55:     // console.error('\n\nFW Stream Close', self._path, self.size)
 2043     56      self._finish()
 2044     57    })
 ....
 2046     72  
 2047     73    var ret = self._stream.write(c)
 2048:    74:   // console.error('\t-- fw wrote, _stream says', ret, self._stream._queue.length)
 2049     75  
 2050     76    // allow 2 buffered writes, because otherwise there's just too
 ....
 2053     30  
 2054     31  LinkWriter.prototype._create = function () {
 2055:    32:   // console.error(" LW _create")
 2056     33    var self = this
 2057     34    var hard = self.type === 'Link' || process.platform === 'win32'
 ....
 2059     87  
 2060     88  LinkWriter.prototype.end = function () {
 2061:    89:   // console.error("LW finish in end")
 2062     90    this._ended = true
 2063     91    if (this.ready) {
 ....
 2066     68      'stat'
 2067     69    ].forEach(function (ev) {
 2068:    70:     // console.error('~~ proxy event', ev, self.path)
 2069     71      proxy.on(ev, self.emit.bind(self, ev))
 2070     72    })
 ....
 2072     75  
 2073     76    proxy.on('ready', function () {
 2074:    77:     // console.error("~~ proxy is ready!", self.path)
 2075     78      self.ready = true
 2076     79      self.emit('ready')
 ....
 2079     51  
 2080     52  ProxyWriter.prototype._addProxy = function (proxy) {
 2081:    53:   // console.error("~~ set proxy", this.path)
 2082     54    var self = this
 2083     55    if (self._proxy) {
 ....
 2085     73    var calls = self._buffer
 2086     74    calls.forEach(function (c) {
 2087:    75:     // console.error("~~ ~~ proxy buffered call", c[0], c[1])
 2088     76      proxy[c[0]].apply(proxy, c[1])
 2089     77    })
 ....
 2091     81  
 2092     82  ProxyWriter.prototype.add = function (entry) {
 2093:    83:   // console.error("~~ proxy add")
 2094     84    collect(entry)
 2095     85  
 ....
 2097     93  
 2098     94  ProxyWriter.prototype.write = function (c) {
 2099:    95:   // console.error('~~ proxy write')
 2100     96    if (!this._proxy) {
 2101     97      this._buffer.push(['write', [c]])
 ....
 2103    103  
 2104    104  ProxyWriter.prototype.end = function (c) {
 2105:   105:   // console.error('~~ proxy end')
 2106    106    if (!this._proxy) {
 2107    107      this._buffer.push(['end', [c]])
 ....
 2110    113    props.parent = props.root = null
 2111    114  
 2112:   115:   // console.error("\n\n\n%s setting size to", props.path, props.size)
 2113    116    self.size = props.size
 2114    117    self.filter = typeof props.filter === 'function' ? props.filter : null
 ....
 2116    121    // this will stat the thing, and then call self._read()
 2117    122    // to start reading whatever it is.
 2118:   123:   // console.error("calling stat", props.path, currentStat)
 2119    124    self._stat(currentStat)
 2120    125  }
 ....
 2122    137    var props = self.props
 2123    138    var stat = props.follow ? 'stat' : 'lstat'
 2124:   139:   // console.error("Reader._stat", self._path, currentStat)
 2125    140    if (currentStat) process.nextTick(statCb.bind(null, null, currentStat))
 2126    141    else fs[stat](self._path, statCb)
 2127    142  
 2128    143    function statCb (er, props_) {
 2129:   144:     // console.error("Reader._stat, statCb", self._path, props_, props_.nlink)
 2130    145      if (er) return self.error(er)
 2131    146  
 ....
 2133    161      if (handleHardlinks && type !== 'Directory' && props.nlink && props.nlink > 1) {
 2134    162        var k = props.dev + ':' + props.ino
 2135:   163:       // console.error("Reader has nlink", self._path, k)
 2136    164        if (hardLinks[k] === self._path || !hardLinks[k]) {
 2137    165          hardLinks[k] = self._path
 ....
 2139    169          self.Link = self.props.Link = true
 2140    170          self.linkpath = self.props.linkpath = hardLinks[k]
 2141:   171:         // console.error("Hardlink detected, switching mode", self._path, self.linkpath)
 2142    172          // Setting __proto__ would arguably be the "correct"
 2143    173          // approach here, but that just seems too wrong.
 ....
 2145    232    }
 2146    233  
 2147:   234:   // console.error("R Pipe apply Stream Pipe")
 2148    235    return Stream.prototype.pipe.apply(this, arguments)
 2149    236  }
 ....
 2152     85    props.parent = props.root = null
 2153     86  
 2154:    87:   // console.error("\n\n\n%s setting size to", props.path, props.size)
 2155     88    self.size = props.size
 2156     89  
 ....
 2158    163  
 2159    164  function create (self) {
 2160:   165:   // console.error("W create", self._path, Writer.dirmode)
 2161    166  
 2162    167    // XXX Need to clobber non-dirs that are in the way,
 2163    168    // unless { clobber: false } in the props.
 2164    169    mkdir(path.dirname(self._path), Writer.dirmode, function (er, made) {
 2165:   170:     // console.error("W created", path.dirname(self._path), er)
 2166    171      if (er) return self.error(er)
 2167    172  
 ....
 2169    248    self._finishing = true
 2170    249  
 2171:   250:   // console.error(" W Finish", self._path, self.size)
 2172    251  
 2173    252    // set up all the things.
 ....
 2175    262      self._old.atime = new Date(0)
 2176    263      self._old.mtime = new Date(0)
 2177:   264:     // console.error(" W Finish Stale Stat", self._path, self.size)
 2178    265      setProps(self._old)
 2179    266    } else {
 2180    267      var stat = self.props.follow ? 'stat' : 'lstat'
 2181:   268:     // console.error(" W Finish Stating", self._path, self.size)
 2182    269      fs[stat](self._path, function (er, current) {
 2183:   270:       // console.error(" W Finish Stated", self._path, self.size, current)
 2184    271        if (er) {
 2185    272          // if we're in the process of writing out a
 ....
 2187    300    function next (what) {
 2188    301      return function (er) {
 2189:   302:       // console.error("   W Finish", what, todo)
 2190    303        if (errState) return
 2191    304        if (er) {
 ....
 2194     15      var m = util.format.apply(util, arguments)
 2195     16      m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
 2196:    17:     console.error(m)
 2197     18    }
 2198     19  
 ....
 2201     41      .catch(function (err) {
 2202     42        if (err instanceof SyntaxError) {
 2203:    43:         return console.error('%s [%s] failed to read JSON: %s', chalk.red('✖'), file, chalk.red(err.message))
 2204     44        }
 2205     45  
 2206     46        if (err instanceof ValidationError) {
 2207     47          err.errors.forEach(function (details) {
 2208:    48:           console.error('%s [%s] failed validation: (%s: %s) %s', chalk.red('✖'), file, chalk.cyan.italic(details.field), chalk.magenta.italic(details.value), chalk.red(details.message))
 2209     49          })
 2210     50  
 ....
 2212     52        }
 2213     53  
 2214:    54:       console.error('%s [%s] an unknown error has occured: %s', chalk.red('✖'), file, chalk.red(err.message))
 2215     55      })
 2216     56  })
 ....
 2219     55  validate(data)
 2220     56    .then(data => console.log('horray!'))
 2221:    57:   .catch(console.error)
 2222     58  ```
 2223     59  
 ....
 2225     68  validate.log(data)
 2226     69    .then(data => console.log('horray!'))
 2227:    70:   .catch(console.error)
 2228     71  ```
 2229     72  
 ....
 2231     81  validate.cache(data)
 2232     82    .then(data => console.log('horray!'))
 2233:    83:   .catch(console.error)
 2234     84  ```
 2235     85  
 ....
 2237     94  validate.cacheEntry(data)
 2238     95    .then(data => console.log('horray!'))
 2239:    96:   .catch(console.error)
 2240     97  ```
 2241     98  
 ....
 2243    107  validate.content(data)
 2244    108    .then(data => console.log('horray!'))
 2245:   109:   .catch(console.error)
 2246    110  ```
 2247    111  
 ....
 2249    120  validate.cookie(data)
 2250    121    .then(data => console.log('horray!'))
 2251:   122:   .catch(console.error)
 2252    123  ```
 2253    124  
 ....
 2255    133  validate.creator(data)
 2256    134    .then(data => console.log('horray!'))
 2257:   135:   .catch(console.error)
 2258    136  ```
 2259    137  
 ....
 2261    146  validate.entry(data)
 2262    147    .then(data => console.log('horray!'))
 2263:   148:   .catch(console.error)
 2264    149  ```
 2265    150  
 ....
 2267    163  validate.page(data)
 2268    164    .then(data => console.log('horray!'))
 2269:   165:   .catch(console.error)
 2270    166  ```
 2271    167  
 ....
 2273    176  validate.pageTimings(data)
 2274    177    .then(data => console.log('horray!'))
 2275:   178:   .catch(console.error)
 2276    179  ```
 2277    180  
 ....
 2279    189  validate.postData(data)
 2280    190    .then(data => console.log('horray!'))
 2281:   191:   .catch(console.error)
 2282    192  ```
 2283    193  
 ....
 2285    202  validate.record(data)
 2286    203    .then(data => console.log('horray!'))
 2287:   204:   .catch(console.error)
 2288    205  ```
 2289    206  
 ....
 2291    215  validate.request(data)
 2292    216    .then(data => console.log('horray!'))
 2293:   217:   .catch(console.error)
 2294    218  ```
 2295    219  
 ....
 2297    228  validate.cacheEntry(data)
 2298    229    .then(data => console.log('horray!'))
 2299:   230:   .catch(console.error)
 2300    231  ```
 2301    232  
 ....
 2303    241  validate.timings(data)
 2304    242    .then(data => console.log('horray!'))
 2305:   243:   .catch(console.error)
 2306    244  ```
 2307    245  
 ....
 2310    484          }
 2311    485          catch (err) {
 2312:   486:             console.error('[hawk] could not write to storage.');
 2313:   487:             console.error(err);
 2314    488          }
 2315    489      },
 ....
 2318   1364  
 2319   1365                  var orig = Browser.utils.storage.setItem;
 2320:  1366:                 var consoleOrig = console.error;
 2321   1367                  var count = 0;
 2322:  1368:                 console.error = function () {
 2323   1369  
 2324   1370                      if (count++ === 2) {
 2325   1371  
 2326:  1372:                         console.error = consoleOrig;
 2327   1373                      }
 2328   1374                  };
 ....
 2331     26      function cb (err) {
 2332     27          if (err) {
 2333:    28:             console.error(err.message);
 2334     29              process.exit(1);
 2335     30          }
 ....
 2338      2  
 2339      3  mkdirp('/tmp/foo/bar/baz', function (err) {
 2340:     4:     if (err) console.error(err)
 2341      5      else console.log('pow!')
 2342      6  });
 ....
 2345     75    "name": "mkdirp",
 2346     76    "optionalDependencies": {},
 2347:    77:   "readme": "# mkdirp\n\nLike `mkdir -p`, but in node.js!\n\n[![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp)\n\n# example\n\n## pow.js\n\n```js\nvar mkdirp = require('mkdirp');\n    \nmkdirp('/tmp/foo/bar/baz', function (err) {\n    if (err) console.error(err)\n    else console.log('pow!')\n});\n```\n\nOutput\n\n```\npow!\n```\n\nAnd now /tmp/foo/bar/baz exists, huzzah!\n\n# methods\n\n```js\nvar mkdirp = require('mkdirp');\n```\n\n## mkdirp(dir, opts, cb)\n\nCreate a new directory and any necessary subdirectories at `dir` with octal\npermission string `opts.mode`. If `opts` is a non-object, it will be treated as\nthe `opts.mode`.\n\nIf `opts.mode` isn't specified, it defaults to `0777 & (~process.umask())`.\n\n`cb(err, made)` fires with the error or the first directory `made`\nthat had to be created, if any.\n\nYou can optionally pass in an alternate `fs` implementation by passing in\n`opts.fs`. Your implementation should have `opts.fs.mkdir(path, mode, cb)` and\n`opts.fs.stat(path, cb)`.\n\n## mkdirp.sync(dir, opts)\n\nSynchronously create a new directory and any necessary subdirectories at `dir`\nwith octal permission string `opts.mode`. If `opts` is a non-object, it will be\ntreated as the `opts.mode`.\n\nIf `opts.mode` isn't specified, it defaults to `0777 & (~process.umask())`.\n\nReturns the first directory that had to be created, if any.\n\nYou can optionally pass in an alternate `fs` implementation by passing in\n`opts.fs`. Your implementation should have `opts.fs.mkdirSync(path, mode)` and\n`opts.fs.statSync(path)`.\n\n# usage\n\nThis package also ships with a `mkdirp` command.\n\n```\nusage: mkdirp [DIR1,DIR2..] {OPTIONS}\n\n  Create each supplied directory including any necessary parent directories that\n  don't yet exist.\n  \n  If the directory already exists, do nothing.\n\nOPTIONS are:\n\n  -m, --mode   If a directory needs to be created, set the mode as an octal\n               permission string.\n\n```\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install mkdirp\n```\n\nto get the library, or\n\n```\nnpm install -g mkdirp\n```\n\nto get the command.\n\n# license\n\nMIT\n",
 2348     78    "readmeFilename": "readme.markdown",
 2349     79    "repository": {
 ....
 2352     13      
 2353     14  mkdirp('/tmp/foo/bar/baz', function (err) {
 2354:    15:     if (err) console.error(err)
 2355     16      else console.log('pow!')
 2356     17  });
 ....
 2359     19  
 2360     20  test('clobber-pre', function (t) {
 2361:    21:     console.error("about to write to "+itw)
 2362     22      fs.writeFileSync(itw, 'I AM IN THE WAY, THE TRUTH, AND THE LIGHT.');
 2363     23  
 ....
 2366     33                  });
 2367     34              } else {
 2368:    35:                 console.error('['+package_json.name+'] No objects found at https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix );
 2369     36              }
 2370     37              return callback();
 ....
 2373    147                  testbinary(gyp, argv, function(err) {
 2374    148                      if (err) {
 2375:   149:                         console.error('['+package_json.name+'] ' + err.message);
 2376    150                          log.error("Testing local pre-built binary failed, attempting to re-download");
 2377    151                          place_binary(from,to,opts,function(err) {
 ....
 2379    186                                      if (error) console.log(error);
 2380    187                                      if (should_do_fallback_build) {
 2381:   188:                                         console.error('['+package_json.name+'] ' + err.message);
 2382    189                                          log.error("Testing pre-built binary failed, attempting to source compile");
 2383    190                                          return do_build(gyp,argv,callback);
 ....
 2386     35               .pipe(write(tarball))
 2387     36               .on('error', function(err) {
 2388:    37:                 if (err)  console.error('['+package_json.name+'] ' + err.message);
 2389     38                  return callback(err);
 2390     39               })
 ....
 2393      2  
 2394      3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
 2395:     4:   ? function () { console.error.apply(console, arguments) }
 2396      5    : function () {}
 2397      6  
 ....
 2400    145  the offending `nopt.invalidHandler(key, val, types)`.
 2401    146  
 2402:   147: If no `nopt.invalidHandler` is assigned, then it will console.error
 2403    148  its whining.  If it is assigned to boolean `false` then the warning is
 2404    149  suppressed.
 ....
 2407      2    var nodeuuid = require('../uuid');
 2408      3  } catch (e) {
 2409:     4:   console.error('node-uuid require failed - skipping tests');
 2410      5  }
 2411      6  
 ....
 2413      8    var uuid = require('uuid');
 2414      9  } catch (e) {
 2415:    10:   console.error('uuid require failed - skipping tests');
 2416     11  }
 2417     12  
 ....
 2419     14    var uuidjs = require('uuid-js');
 2420     15  } catch (e) {
 2421:    16:   console.error('uuid-js require failed - skipping tests');
 2422     17  }
 2423     18  
 ....
 2426     19  
 2427     20  if ('v1' !== arg && 'v4' !== arg) {
 2428:    21:   console.error('Version must be RFC4122 version 1 or version 4, denoted as "v1" or "v4"');
 2429     22    process.exit(1);
 2430     23  }
 ....
 2433      3  log.heading = 'npm'
 2434      4  
 2435:     5: console.error('log.level=silly')
 2436      6  log.level = 'silly'
 2437      7  log.silly('silly prefix', 'x = %j', {foo:{bar:'baz'}})
 ....
 2439     13  log.silent('silent prefix', 'x = %j', {foo:{bar:'baz'}})
 2440     14  
 2441:    15: console.error('log.level=silent')
 2442     16  log.level = 'silent'
 2443     17  log.silly('silly prefix', 'x = %j', {foo:{bar:'baz'}})
 ....
 2445     23  log.silent('silent prefix', 'x = %j', {foo:{bar:'baz'}})
 2446     24  
 2447:    25: console.error('log.level=info')
 2448     26  log.level = 'info'
 2449     27  log.silly('silly prefix', 'x = %j', {foo:{bar:'baz'}})
 ....
 2452    190    log.on('info prefix', logPrefixEvents.push.bind(logPrefixEvents))
 2453    191  
 2454:   192:   console.error('log.level=silly')
 2455    193    log.level = 'silly'
 2456    194    log.silly('silly prefix', 'x = %j', {foo:{bar:'baz'}})
 ....
 2458    200    log.silent('silent prefix', 'x = %j', {foo:{bar:'baz'}})
 2459    201  
 2460:   202:   console.error('log.level=silent')
 2461    203    log.level = 'silent'
 2462    204    log.silly('silly prefix', 'x = %j', {foo:{bar:'baz'}})
 ....
 2464    210    log.silent('silent prefix', 'x = %j', {foo:{bar:'baz'}})
 2465    211  
 2466:   212:   console.error('log.level=info')
 2467    213    log.level = 'info'
 2468    214    log.silly('silly prefix', 'x = %j', {foo:{bar:'baz'}})
 ....
 2471    620  writer.end('this is the end\n');
 2472    621  writer.on('finish', function() {
 2473:   622:   console.error('all writes are now complete.');
 2474    623  });
 2475    624  ```
 ....
 2477    635  var reader = getReadableStreamSomehow();
 2478    636  writer.on('pipe', function(src) {
 2479:   637:   console.error('something is piping into the writer');
 2480    638    assert.equal(src, reader);
 2481    639  });
 ....
 2483    652  var reader = getReadableStreamSomehow();
 2484    653  writer.on('unpipe', function(src) {
 2485:   654:   console.error('something has stopped piping into the writer');
 2486    655    assert.equal(src, reader);
 2487    656  });
 ....
 2490    100    "name": "request",
 2491    101    "optionalDependencies": {},
 2492:   102:   "readme": "\n# Request - Simplified HTTP client\n\n[![npm package](https://nodei.co/npm/request.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/request/)\n\n[![Build status](https://img.shields.io/travis/request/request.svg?style=flat-square)](https://travis-ci.org/request/request)\n[![Coverage](https://img.shields.io/codecov/c/github/request/request.svg?style=flat-square)](https://codecov.io/github/request/request?branch=master)\n[![Coverage](https://img.shields.io/coveralls/request/request.svg?style=flat-square)](https://coveralls.io/r/request/request)\n[![Dependency Status](https://img.shields.io/david/request/request.svg?style=flat-square)](https://david-dm.org/request/request)\n[![Gitter](https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square)](https://gitter.im/request/request?utm_source=badge)\n\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```js\nvar request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Show the HTML for the Google homepage.\n  }\n})\n```\n\n\n## Table of contents\n\n- [Streaming](#streaming)\n- [Forms](#forms)\n- [HTTP Authentication](#http-authentication)\n- [Custom HTTP Headers](#custom-http-headers)\n- [OAuth Signing](#oauth-signing)\n- [Proxies](#proxies)\n- [Unix Domain Sockets](#unix-domain-sockets)\n- [TLS/SSL Protocol](#tlsssl-protocol)\n- [Support for HAR 1.2](#support-for-har-12)\n- [**All Available Options**](#requestoptions-callback)\n\nRequest also offers [convenience methods](#convenience-methods) like\n`request.defaults` and `request.post`, and there are\nlots of [usage examples](#examples) and several\n[debugging techniques](#debugging).\n\n\n---\n\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```js\nrequest('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don’t already provide one).\n\n```js\nfs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))\n```\n\nRequest can also `pipe` to itself. When doing so, `content-type` and `content-length` are preserved in the PUT headers.\n\n```js\nrequest.get('http://google.com/img.png').pipe(request.put('http://mysite.com/img.png'))\n```\n\nRequest emits a \"response\" event when a response is received. The `response` argument will be an instance of [http.IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage).\n\n```js\nrequest\n  .get('http://google.com/img.png')\n  .on('response', function(response) {\n    console.log(response.statusCode) // 200\n    console.log(response.headers['content-type']) // 'image/png'\n  })\n  .pipe(request.put('http://mysite.com/img.png'))\n```\n\nTo easily handle errors when streaming requests, listen to the `error` event before piping:\n\n```js\nrequest\n  .get('http://mysite.com/doodle.png')\n  .on('error', function(err) {\n    console.log(err)\n  })\n  .pipe(fs.createWriteStream('doodle.png'))\n```\n\nNow let’s get fancy.\n\n```js\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    if (req.method === 'PUT') {\n      req.pipe(request.put('http://mysite.com/doodle.png'))\n    } else if (req.method === 'GET' || req.method === 'HEAD') {\n      request.get('http://mysite.com/doodle.png').pipe(resp)\n    }\n  }\n})\n```\n\nYou can also `pipe()` from `http.ServerRequest` instances, as well as to `http.ServerResponse` instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don't really care about security, you can do:\n\n```js\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    var x = request('http://mysite.com/doodle.png')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since `pipe()` returns the destination stream in ≥ Node 0.5.x you can do one line proxying. :)\n\n```js\nreq.pipe(request('http://mysite.com/doodle.png')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```js\nvar r = request.defaults({'proxy':'http://localproxy.com'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    r.get('http://google.com/doodle.png').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Forms\n\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\n\n\n#### application/x-www-form-urlencoded (URL-Encoded Forms)\n\nURL-encoded forms are simple.\n\n```js\nrequest.post('http://service.com/upload', {form:{key:'value'}})\n// or\nrequest.post('http://service.com/upload').form({key:'value'})\n// or\nrequest.post({url:'http://service.com/upload', form: {key:'value'}}, function(err,httpResponse,body){ /* ... */ })\n```\n\n\n#### multipart/form-data (Multipart Form Uploads)\n\nFor `multipart/form-data` we use the [form-data](https://github.com/form-data/form-data) library by [@felixge](https://github.com/felixge). For the most cases, you can pass your upload form data via the `formData` option.\n\n\n```js\nvar formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: new Buffer([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});\n```\n\nFor advanced cases, you can access the form-data object itself via `r.form()`. This can be modified until the request is fired on the next cycle of the event-loop. (Note that this calling `form()` will clear the currently set form data for that request.)\n\n```js\n// NOTE: Advanced use-case, for normal use see 'formData' usage above\nvar r = request.post('http://service.com/upload', function optionalCallback(err, httpResponse, body) {...})\nvar form = r.form();\nform.append('my_field', 'my_value');\nform.append('my_buffer', new Buffer([1, 2, 3]));\nform.append('custom_file', fs.createReadStream(__dirname + '/unicycle.jpg'), {filename: 'unicycle.jpg'});\n```\nSee the [form-data README](https://github.com/form-data/form-data) for more information & examples.\n\n\n#### multipart/related\n\nSome variations in different HTTP implementations require a newline/CRLF before, after, or both before and after the boundary of a `multipart/related` request (using the multipart option). This has been observed in the .NET WebAPI version 4.0. You can turn on a boundary preambleCRLF or postamble by passing them as `true` to your request options.\n\n```js\n  request({\n    method: 'PUT',\n    preambleCRLF: true,\n    postambleCRLF: true,\n    uri: 'http://service.com/upload',\n    multipart: [\n      {\n        'content-type': 'application/json',\n        body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n      },\n      { body: 'I am an attachment' },\n      { body: fs.createReadStream('image.png') }\n    ],\n    // alternatively pass an object containing additional options\n    multipart: {\n      chunked: false,\n      data: [\n        {\n          'content-type': 'application/json',\n          body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n        },\n        { body: 'I am an attachment' }\n      ]\n    }\n  },\n  function (error, response, body) {\n    if (error) {\n      return console.error('upload failed:', error);\n    }\n    console.log('Upload successful!  Server responded with:', body);\n  })\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## HTTP Authentication\n\n```js\nrequest.get('http://some.server.com/').auth('username', 'password', false);\n// or\nrequest.get('http://some.server.com/', {\n  'auth': {\n    'user': 'username',\n    'pass': 'password',\n    'sendImmediately': false\n  }\n});\n// or\nrequest.get('http://some.server.com/').auth(null, null, true, 'bearerToken');\n// or\nrequest.get('http://some.server.com/', {\n  'auth': {\n    'bearer': 'bearerToken'\n  }\n});\n```\n\nIf passed as an option, `auth` should be a hash containing values:\n\n- `user` || `username`\n- `pass` || `password`\n- `sendImmediately` (optional)\n- `bearer` (optional)\n\nThe method form takes parameters\n`auth(username, password, sendImmediately, bearer)`.\n\n`sendImmediately` defaults to `true`, which causes a basic or bearer\nauthentication header to be sent.  If `sendImmediately` is `false`, then\n`request` will retry with a proper authentication header after receiving a\n`401` response from the server (which must contain a `WWW-Authenticate` header\nindicating the required authentication method).\n\nNote that you can also specify basic authentication using the URL itself, as\ndetailed in [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt).  Simply pass the\n`user:password` before the host with an `@` sign:\n\n```js\nvar username = 'username',\n    password = 'password',\n    url = 'http://' + username + ':' + password + '@some.server.com';\n\nrequest({url: url}, function (error, response, body) {\n   // Do more stuff with 'body' here\n});\n```\n\nDigest authentication is supported, but it only works with `sendImmediately`\nset to `false`; otherwise `request` will send basic authentication on the\ninitial request, which will probably cause the request to fail.\n\nBearer authentication is supported, and is activated when the `bearer` value is\navailable. The value may be either a `String` or a `Function` returning a\n`String`. Using a function to supply the bearer token is particularly useful if\nused in conjunction with `defaults` to allow a single function to supply the\nlast known token at the time of sending a request, or to compute one on the fly.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Custom HTTP Headers\n\nHTTP Headers, such as `User-Agent`, can be set in the `options` object.\nIn the example below, we call the github API to find out the number\nof stars and forks for the request repository. This requires a\ncustom `User-Agent` header as well as https.\n\n```js\nvar request = require('request');\n\nvar options = {\n  url: 'https://api.github.com/repos/request/request',\n  headers: {\n    'User-Agent': 'request'\n  }\n};\n\nfunction callback(error, response, body) {\n  if (!error && response.statusCode == 200) {\n    var info = JSON.parse(body);\n    console.log(info.stargazers_count + \" Stars\");\n    console.log(info.forks_count + \" Forks\");\n  }\n}\n\nrequest(options, callback);\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## OAuth Signing\n\n[OAuth version 1.0](https://tools.ietf.org/html/rfc5849) is supported.  The\ndefault signing algorithm is\n[HMAC-SHA1](https://tools.ietf.org/html/rfc5849#section-3.4.2):\n\n```js\n// OAuth1.0 - 3-legged server side flow (Twitter example)\n// step 1\nvar qs = require('querystring')\n  , oauth =\n    { callback: 'http://mysite.com/callback/'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = 'https://api.twitter.com/oauth/request_token'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Ideally, you would take the body in the response\n  // and construct a URL that a user clicks on (like a sign in button).\n  // The verifier is only available in the response after a user has\n  // verified with twitter that they are authorizing your app.\n\n  // step 2\n  var req_data = qs.parse(body)\n  var uri = 'https://api.twitter.com/oauth/authenticate'\n    + '?' + qs.stringify({oauth_token: req_data.oauth_token})\n  // redirect the user to the authorize uri\n\n  // step 3\n  // after the user is redirected back to your server\n  var auth_data = qs.parse(body)\n    , oauth =\n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: auth_data.oauth_token\n      , token_secret: req_data.oauth_token_secret\n      , verifier: auth_data.oauth_verifier\n      }\n    , url = 'https://api.twitter.com/oauth/access_token'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    // ready to make signed requests on behalf of the user\n    var perm_data = qs.parse(body)\n      , oauth =\n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_data.oauth_token\n        , token_secret: perm_data.oauth_token_secret\n        }\n      , url = 'https://api.twitter.com/1.1/users/show.json'\n      , qs =\n        { screen_name: perm_data.screen_name\n        , user_id: perm_data.user_id\n        }\n      ;\n    request.get({url:url, oauth:oauth, qs:qs, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\nFor [RSA-SHA1 signing](https://tools.ietf.org/html/rfc5849#section-3.4.3), make\nthe following changes to the OAuth options object:\n* Pass `signature_method : 'RSA-SHA1'`\n* Instead of `consumer_secret`, specify a `private_key` string in\n  [PEM format](http://how2ssl.com/articles/working_with_pem_files/)\n\nFor [PLAINTEXT signing](http://oauth.net/core/1.0/#anchor22), make\nthe following changes to the OAuth options object:\n* Pass `signature_method : 'PLAINTEXT'`\n\nTo send OAuth parameters via query params or in a post body as described in The\n[Consumer Request Parameters](http://oauth.net/core/1.0/#consumer_req_param)\nsection of the oauth1 spec:\n* Pass `transport_method : 'query'` or `transport_method : 'body'` in the OAuth\n  options object.\n* `transport_method` defaults to `'header'`\n\nTo use [Request Body Hash](https://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html) you can either\n* Manually generate the body hash and pass it as a string `body_hash: '...'`\n* Automatically generate the body hash by passing `body_hash: true`\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Proxies\n\nIf you specify a `proxy` option, then the request (and any subsequent\nredirects) will be sent via a connection to the proxy server.\n\nIf your endpoint is an `https` url, and you are using a proxy, then\nrequest will send a `CONNECT` request to the proxy server *first*, and\nthen use the supplied connection to connect to the endpoint.\n\nThat is, first it will make a request like:\n\n```\nHTTP/1.1 CONNECT endpoint-server.com:80\nHost: proxy-server.com\nUser-Agent: whatever user agent you specify\n```\n\nand then the proxy server make a TCP connection to `endpoint-server`\non port `80`, and return a response that looks like:\n\n```\nHTTP/1.1 200 OK\n```\n\nAt this point, the connection is left open, and the client is\ncommunicating directly with the `endpoint-server.com` machine.\n\nSee [the wikipedia page on HTTP Tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel)\nfor more information.\n\nBy default, when proxying `http` traffic, request will simply make a\nstandard proxied `http` request.  This is done by making the `url`\nsection of the initial line of the request a fully qualified url to\nthe endpoint.\n\nFor example, it will make a single request that looks like:\n\n```\nHTTP/1.1 GET http://endpoint-server.com/some-url\nHost: proxy-server.com\nOther-Headers: all go here\n\nrequest body or whatever\n```\n\nBecause a pure \"http over http\" tunnel offers no additional security\nor other features, it is generally simpler to go with a\nstraightforward HTTP proxy in this case.  However, if you would like\nto force a tunneling proxy, you may set the `tunnel` option to `true`.\n\nYou can also make a standard proxied `http` request by explicitly setting\n`tunnel : false`, but **note that this will allow the proxy to see the traffic\nto/from the destination server**.\n\nIf you are using a tunneling proxy, you may set the\n`proxyHeaderWhiteList` to share certain headers with the proxy.\n\nYou can also set the `proxyHeaderExclusiveList` to share certain\nheaders only with the proxy and not with destination host.\n\nBy default, this set is:\n\n```\naccept\naccept-charset\naccept-encoding\naccept-language\naccept-ranges\ncache-control\ncontent-encoding\ncontent-language\ncontent-length\ncontent-location\ncontent-md5\ncontent-range\ncontent-type\nconnection\ndate\nexpect\nmax-forwards\npragma\nproxy-authorization\nreferer\nte\ntransfer-encoding\nuser-agent\nvia\n```\n\nNote that, when using a tunneling proxy, the `proxy-authorization`\nheader and any headers from custom `proxyHeaderExclusiveList` are\n*never* sent to the endpoint server, but only to the proxy server.\n\n\n### Controlling proxy behaviour using environment variables\n\nThe following environment variables are respected by `request`:\n\n * `HTTP_PROXY` / `http_proxy`\n * `HTTPS_PROXY` / `https_proxy`\n * `NO_PROXY` / `no_proxy`\n\nWhen `HTTP_PROXY` / `http_proxy` are set, they will be used to proxy non-SSL requests that do not have an explicit `proxy` configuration option present. Similarly, `HTTPS_PROXY` / `https_proxy` will be respected for SSL requests that do not have an explicit `proxy` configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the `proxy` configuration option. Furthermore, the `proxy` configuration option can be explicitly set to false / null to opt out of proxying altogether for that request.\n\n`request` is also aware of the `NO_PROXY`/`no_proxy` environment variables. These variables provide a granular way to opt out of proxying, on a per-host basis. It should contain a comma separated list of hosts to opt out of proxying. It is also possible to opt of proxying when a particular destination port is used. Finally, the variable may be set to `*` to opt out of the implicit proxy configuration of the other environment variables.\n\nHere's some examples of valid `no_proxy` values:\n\n * `google.com` - don't proxy HTTP/HTTPS requests to Google.\n * `google.com:443` - don't proxy HTTPS requests to Google, but *do* proxy HTTP requests to Google.\n * `google.com:443, yahoo.com:80` - don't proxy HTTPS requests to Google, and don't proxy HTTP requests to Yahoo!\n * `*` - ignore `https_proxy`/`http_proxy` environment variables altogether.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## UNIX Domain Sockets\n\n`request` supports making requests to [UNIX Domain Sockets](https://en.wikipedia.org/wiki/Unix_domain_socket). To make one, use the following URL scheme:\n\n```js\n/* Pattern */ 'http://unix:SOCKET:PATH'\n/* Example */ request.get('http://unix:/absolute/path/to/unix.socket:/request/path')\n```\n\nNote: The `SOCKET` path is assumed to be absolute to the root of the host file system.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## TLS/SSL Protocol\n\nTLS/SSL Protocol options, such as `cert`, `key` and `passphrase`, can be\nset directly in `options` object, in the `agentOptions` property of the `options` object, or even in `https.globalAgent.options`. Keep in mind that, although `agentOptions` allows for a slightly wider range of configurations, the recommended way is via `options` object directly, as using `agentOptions` or `https.globalAgent.options` would not be applied in the same way in proxied environments (as data travels through a TLS connection instead of an http/https agent).\n\n```js\nvar fs = require('fs')\n    , path = require('path')\n    , certFile = path.resolve(__dirname, 'ssl/client.crt')\n    , keyFile = path.resolve(__dirname, 'ssl/client.key')\n    , caFile = path.resolve(__dirname, 'ssl/ca.cert.pem')\n    , request = require('request');\n\nvar options = {\n    url: 'https://api.some-server.com/',\n    cert: fs.readFileSync(certFile),\n    key: fs.readFileSync(keyFile),\n    passphrase: 'password',\n    ca: fs.readFileSync(caFile)\n    }\n};\n\nrequest.get(options);\n```\n\n### Using `options.agentOptions`\n\nIn the example below, we call an API requires client side SSL certificate\n(in PEM format) with passphrase protected private key (in PEM format) and disable the SSLv3 protocol:\n\n```js\nvar fs = require('fs')\n    , path = require('path')\n    , certFile = path.resolve(__dirname, 'ssl/client.crt')\n    , keyFile = path.resolve(__dirname, 'ssl/client.key')\n    , request = require('request');\n\nvar options = {\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        cert: fs.readFileSync(certFile),\n        key: fs.readFileSync(keyFile),\n        // Or use `pfx` property replacing `cert` and `key` when using private key, certificate and CA certs in PFX or PKCS12 format:\n        // pfx: fs.readFileSync(pfxFilePath),\n        passphrase: 'password',\n        securityOptions: 'SSL_OP_NO_SSLv3'\n    }\n};\n\nrequest.get(options);\n```\n\nIt is able to force using SSLv3 only by specifying `secureProtocol`:\n\n```js\nrequest.get({\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        secureProtocol: 'SSLv3_method'\n    }\n});\n```\n\nIt is possible to accept other certificates than those signed by generally allowed Certificate Authorities (CAs).\nThis can be useful, for example,  when using self-signed certificates.\nTo require a different root certificate, you can specify the signing CA by adding the contents of the CA's certificate file to the `agentOptions`.\nThe certificate the domain presents must be signed by the root certificate specified:\n\n```js\nrequest.get({\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        ca: fs.readFileSync('ca.cert.pem')\n    }\n});\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Support for HAR 1.2\n\nThe `options.har` property will override the values: `url`, `method`, `qs`, `headers`, `form`, `formData`, `body`, `json`, as well as construct multipart data and read files from disk when `request.postData.params[].fileName` is present without a matching `value`.\n\na validation step will check if the HAR Request format matches the latest spec (v1.2) and will skip parsing if not matching.\n\n```js\n  var request = require('request')\n  request({\n    // will be ignored\n    method: 'GET',\n    uri: 'http://www.google.com',\n\n    // HTTP Archive Request Object\n    har: {\n      url: 'http://www.mockbin.com/har',\n      method: 'POST',\n      headers: [\n        {\n          name: 'content-type',\n          value: 'application/x-www-form-urlencoded'\n        }\n      ],\n      postData: {\n        mimeType: 'application/x-www-form-urlencoded',\n        params: [\n          {\n            name: 'foo',\n            value: 'bar'\n          },\n          {\n            name: 'hello',\n            value: 'world'\n          }\n        ]\n      }\n    }\n  })\n\n  // a POST request will be sent to http://www.mockbin.com\n  // with body an application/x-www-form-urlencoded body:\n  // foo=bar&hello=world\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n## request(options, callback)\n\nThe first argument can be either a `url` or an `options` object. The only required option is `uri`; all others are optional.\n\n- `uri` || `url` - fully qualified uri or a parsed url object from `url.parse()`\n- `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain.  If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. When `baseUrl` is given, `uri` must also be a string.\n- `method` - http method (default: `\"GET\"`)\n- `headers` - http headers (default: `{}`)\n\n---\n\n- `qs` - object containing querystring values to be appended to the `uri`\n- `qsParseOptions` - object containing options to pass to the [qs.parse](https://github.com/hapijs/qs#parsing-objects) method. Alternatively pass options to the [querystring.parse](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_parse_str_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`\n- `qsStringifyOptions` - object containing options to pass to the [qs.stringify](https://github.com/hapijs/qs#stringifying) method. Alternatively pass options to the  [querystring.stringify](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`. For example, to change the way arrays are converted to query strings using the `qs` module pass the `arrayFormat` option with one of `indices|brackets|repeat`\n- `useQuerystring` - If true, use `querystring` to stringify and parse\n  querystrings, otherwise use `qs` (default: `false`).  Set this option to\n  `true` if you need arrays to be serialized as `foo=bar&foo=baz` instead of the\n  default `foo[0]=bar&foo[1]=baz`.\n\n---\n\n- `body` - entity body for PATCH, POST and PUT requests. Must be a `Buffer` or `String`, unless `json` is `true`. If `json` is `true`, then `body` must be a JSON-serializable object.\n- `form` - when passed an object or a querystring, this sets `body` to a querystring representation of value, and adds `Content-type: application/x-www-form-urlencoded` header. When passed no options, a `FormData` instance is returned (and is piped to request). See \"Forms\" section above.\n- `formData` - Data to pass for a `multipart/form-data` request. See\n  [Forms](#forms) section above.\n- `multipart` - array of objects which contain their own headers and `body`\n  attributes. Sends a `multipart/related` request. See [Forms](#forms) section\n  above.\n  - Alternatively you can pass in an object `{chunked: false, data: []}` where\n    `chunked` is used to specify whether the request is sent in\n    [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)\n    In non-chunked requests, data items with body streams are not allowed.\n- `preambleCRLF` - append a newline/CRLF before the boundary of your `multipart/form-data` request.\n- `postambleCRLF` - append a newline/CRLF at the end of the boundary of your `multipart/form-data` request.\n- `json` - sets `body` to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as JSON.\n- `jsonReviver` - a [reviver function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) that will be passed to `JSON.parse()` when parsing a JSON response body.\n\n---\n\n- `auth` - A hash containing values `user` || `username`, `pass` || `password`, and `sendImmediately` (optional).  See documentation above.\n- `oauth` - Options for OAuth HMAC-SHA1 signing. See documentation above.\n- `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\n- `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`. Also requires the property `bucket`, unless you’re specifying your `bucket` as part of the path, or the request doesn’t use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter `sign_version` with value `4` otherwise the default is version 2. **Note:** you need to `npm install aws4` first.\n- `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.\n\n---\n\n- `followRedirect` - follow HTTP 3xx responses as redirects (default: `true`). This property can also be implemented as function which gets `response` object as a single argument and should return `true` if redirects should continue or `false` otherwise.\n- `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects (default: `false`)\n- `maxRedirects` - the maximum number of redirects to follow (default: `10`)\n- `removeRefererHeader` - removes the referer header when a redirect happens (default: `false`). **Note:** if true, referer header set in the initial request is preserved during redirect chain.\n\n---\n\n- `encoding` - Encoding to be used on `setEncoding` of response data. If `null`, the `body` is returned as a `Buffer`. Anything else **(including the default value of `undefined`)** will be passed as the [encoding](http://nodejs.org/api/buffer.html#buffer_buffer) parameter to `toString()` (meaning this is effectively `utf8` by default). (**Note:** if you expect binary data, you should set `encoding: null`.)\n- `gzip` - If `true`, add an `Accept-Encoding` header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response.  **Note:** Automatic decoding of the response content is performed on the body data returned through `request` (both through the `request` stream and passed to the callback function) but is not performed on the `response` stream (available from the `response` event) which is the unmodified `http.IncomingMessage` object which may contain compressed data. See example below.\n- `jar` - If `true`, remember cookies for future use (or define your custom cookie jar; see examples section)\n\n---\n\n- `agent` - `http(s).Agent` instance to use\n- `agentClass` - alternatively specify your agent's class name\n- `agentOptions` - and pass its options. **Note:** for HTTPS see [tls API doc for TLS/SSL options](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback) and the [documentation above](#using-optionsagentoptions).\n- `forever` - set to `true` to use the [forever-agent](https://github.com/request/forever-agent) **Note:** Defaults to `http(s).Agent({keepAlive:true})` in node 0.12+\n- `pool` - An object describing which agents to use for the request. If this option is omitted the request will use the global agent (as long as your options allow for it). Otherwise, request will search the pool for your custom agent. If no custom agent is found, a new agent will be created and added to the pool. **Note:** `pool` is used only when the `agent` option is not specified.\n  - A `maxSockets` property can also be provided on the `pool` object to set the max number of sockets for all agents created (ex: `pool: {maxSockets: Infinity}`).\n  - Note that if you are sending multiple requests in a loop and creating\n    multiple new `pool` objects, `maxSockets` will not work as intended.  To\n    work around this, either use [`request.defaults`](#requestdefaultsoptions)\n    with your pool options or create the pool object with the `maxSockets`\n    property outside of the loop.\n- `timeout` - Integer containing the number of milliseconds to wait for a\nserver to send response headers (and start the response body) before aborting\nthe request. Note that if the underlying TCP connection cannot be established,\nthe OS-wide TCP connection timeout will overrule the `timeout` option ([the\ndefault in Linux can be anywhere from 20-120 seconds][linux-timeout]).\n\n[linux-timeout]: http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout\n\n---\n\n- `localAddress` - Local interface to bind for network connections.\n- `proxy` - An HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`)\n- `strictSSL` - If `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option.\n- `tunnel` - controls the behavior of\n  [HTTP `CONNECT` tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling)\n  as follows:\n   - `undefined` (default) - `true` if the destination is `https`, `false` otherwise\n   - `true` - always tunnel to the destination by making a `CONNECT` request to\n     the proxy\n   - `false` - request the destination as a `GET` request.\n- `proxyHeaderWhiteList` - A whitelist of headers to send to a\n  tunneling proxy.\n- `proxyHeaderExclusiveList` - A whitelist of headers to send\n  exclusively to a tunneling proxy and not to destination.\n\n---\n\n- `time` - If `true`, the request-response cycle (including all redirects) is timed at millisecond resolution, and the result provided on the response's `elapsedTime` property.\n- `har` - A [HAR 1.2 Request Object](http://www.softwareishard.com/blog/har-12-spec/#request), will be processed from HAR format into options overwriting matching values *(see the [HAR 1.2 section](#support-for-har-1.2) for details)*\n\nThe callback argument gets 3 arguments:\n\n1. An `error` when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object)\n2. An [`http.IncomingMessage`](http://nodejs.org/api/http.html#http_http_incomingmessage) object\n3. The third is the `response` body (`String` or `Buffer`, or JSON object if the `json` option is supplied)\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n\n### request.defaults(options)\n\nThis method **returns a wrapper** around the normal request API that defaults\nto whatever options you pass to it.\n\n**Note:** `request.defaults()` **does not** modify the global request API;\ninstead, it **returns a wrapper** that has your default settings applied to it.\n\n**Note:** You can call `.defaults()` on the wrapper that is returned from\n`request.defaults` to add/override defaults that were previously defaulted.\n\nFor example:\n```js\n//requests using baseRequest() will set the 'x-token' header\nvar baseRequest = request.defaults({\n  headers: {'x-token': 'my-token'}\n})\n\n//requests using specialRequest() will include the 'x-token' header set in\n//baseRequest and will also include the 'special' header\nvar specialRequest = baseRequest.defaults({\n  headers: {special: 'special value'}\n})\n```\n\n### request.put\n\nSame as `request()`, but defaults to `method: \"PUT\"`.\n\n```js\nrequest.put(url)\n```\n\n### request.patch\n\nSame as `request()`, but defaults to `method: \"PATCH\"`.\n\n```js\nrequest.patch(url)\n```\n\n### request.post\n\nSame as `request()`, but defaults to `method: \"POST\"`.\n\n```js\nrequest.post(url)\n```\n\n### request.head\n\nSame as `request()`, but defaults to `method: \"HEAD\"`.\n\n```js\nrequest.head(url)\n```\n\n### request.del\n\nSame as `request()`, but defaults to `method: \"DELETE\"`.\n\n```js\nrequest.del(url)\n```\n\n### request.get\n\nSame as `request()` (for uniformity).\n\n```js\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```js\nrequest.cookie('key1=value1')\n```\n### request.jar()\n\nFunction that creates a new cookie jar.\n\n```js\nrequest.jar()\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Debugging\n\nThere are at least three ways to debug the operation of `request`:\n\n1. Launch the node process like `NODE_DEBUG=request node script.js`\n   (`lib,request,otherlib` works too).\n\n2. Set `require('request').debug = true` at any time (this does the same thing\n   as #1).\n\n3. Use the [request-debug module](https://github.com/request/request-debug) to\n   view request and response headers and bodies.\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Timeouts\n\nMost requests to external servers should have a timeout attached, in case the\nserver is not responding in a timely manner. Without a timeout, your code may\nhave a socket open/consume resources for minutes or more.\n\nThere are two main types of timeouts: **connection timeouts** and **read\ntimeouts**. A connect timeout occurs if the timeout is hit while your client is\nattempting to establish a connection to a remote machine (corresponding to the\n[connect() call][connect] on the socket). A read timeout occurs any time the\nserver is too slow to send back a part of the response.\n\nThese two situations have widely different implications for what went wrong\nwith the request, so it's useful to be able to distinguish them. You can detect\ntimeout errors by checking `err.code` for an 'ETIMEDOUT' value. Further, you\ncan detect whether the timeout was a connection timeout by checking if the\n`err.connect` property is set to `true`.\n\n```js\nrequest.get('http://10.255.255.1', {timeout: 1500}, function(err) {\n    console.log(err.code === 'ETIMEDOUT');\n    // Set to `true` if the timeout was a connection timeout, `false` or\n    // `undefined` otherwise.\n    console.log(err.connect === true);\n    process.exit(0);\n});\n```\n\n[connect]: http://linux.die.net/man/2/connect\n\n## Examples:\n\n```js\n  var request = require('request')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: 'PUT'\n    , uri: 'http://mikeal.iriscouch.com/testjs/' + rand\n    , multipart:\n      [ { 'content-type': 'application/json'\n        ,  body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n        }\n      , { body: 'I am an attachment' }\n      ]\n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log('document saved as: http://mikeal.iriscouch.com/testjs/'+ rand)\n      } else {\n        console.log('error: '+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\n\nFor backwards-compatibility, response compression is not supported by default.\nTo accept gzip-compressed responses, set the `gzip` option to `true`.  Note\nthat the body data passed through `request` is automatically decompressed\nwhile the response object is unmodified and will contain compressed data if\nthe server sent a compressed response.\n\n```js\n  var request = require('request')\n  request(\n    { method: 'GET'\n    , uri: 'http://www.google.com'\n    , gzip: true\n    }\n  , function (error, response, body) {\n      // body is the decompressed response body\n      console.log('server encoded the data as: ' + (response.headers['content-encoding'] || 'identity'))\n      console.log('the decoded data is: ' + body)\n    }\n  ).on('data', function(data) {\n    // decompressed data as it is received\n    console.log('decoded chunk: ' + data)\n  })\n  .on('response', function(response) {\n    // unmodified http.IncomingMessage object\n    response.on('data', function(data) {\n      // compressed data as it is received\n      console.log('received ' + data.length + ' bytes of compressed data')\n    })\n  })\n```\n\nCookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set `jar` to `true` (either in `defaults` or `options`).\n\n```js\nvar request = request.defaults({jar: true})\nrequest('http://www.google.com', function () {\n  request('http://images.google.com')\n})\n```\n\nTo use a custom cookie jar (instead of `request`’s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)\n\n```js\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest('http://www.google.com', function () {\n  request('http://images.google.com')\n})\n```\n\nOR\n\n```js\nvar j = request.jar();\nvar cookie = request.cookie('key1=value1');\nvar url = 'http://www.google.com';\nj.setCookie(cookie, url);\nrequest({url: url, jar: j}, function () {\n  request('http://images.google.com')\n})\n```\n\nTo use a custom cookie store (such as a\n[`FileCookieStore`](https://github.com/mitsuru/tough-cookie-filestore)\nwhich supports saving to and restoring from JSON files), pass it as a parameter\nto `request.jar()`:\n\n```js\nvar FileCookieStore = require('tough-cookie-filestore');\n// NOTE - currently the 'cookies.json' file must already exist!\nvar j = request.jar(new FileCookieStore('cookies.json'));\nrequest = request.defaults({ jar : j })\nrequest('http://www.google.com', function() {\n  request('http://images.google.com')\n})\n```\n\nThe cookie store must be a\n[`tough-cookie`](https://github.com/SalesforceEng/tough-cookie)\nstore and it must support synchronous operations; see the\n[`CookieStore` API docs](https://github.com/SalesforceEng/tough-cookie#cookiestore-api)\nfor details.\n\nTo inspect your cookie jar after a request:\n\n```js\nvar j = request.jar()\nrequest({url: 'http://www.google.com', jar: j}, function () {\n  var cookie_string = j.getCookieString(url); // \"key1=value1; key2=value2; ...\"\n  var cookies = j.getCookies(url);\n  // [{key: 'key1', value: 'value1', domain: \"www.google.com\", ...}, ...]\n})\n```\n\n[back to top](#table-of-contents)\n",
 2493    103    "readmeFilename": "README.md",
 2494    104    "repository": {
 ....
 2497    191  request.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {
 2498    192    if (err) {
 2499:   193:     return console.error('upload failed:', err);
 2500    194    }
 2501    195    console.log('Upload successful!  Server responded with:', body);
 ....
 2503    242    function (error, response, body) {
 2504    243      if (error) {
 2505:   244:       return console.error('upload failed:', error);
 2506    245      }
 2507    246      console.log('Upload successful!  Server responded with:', body);
 ....
 2510    148  function debug() {
 2511    149    if (Request.debug) {
 2512:   150:     console.error('REQUEST %s', util.format.apply(util, arguments))
 2513    151    }
 2514    152  }
 ....
 2516    531  
 2517    532      // self.on('pipe', function () {
 2518:   533:     //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
 2519    534      // })
 2520    535    })
 ....
 2522    933      if (self.encoding) {
 2523    934        if (self.dests.length !== 0) {
 2524:   935:         console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.')
 2525    936        } else if (responseContent.setEncoding) {
 2526    937          responseContent.setEncoding(self.encoding)
 ....
 2529     18  if (help || args.length === 0) {
 2530     19    // If they didn't ask for help, then this is not a "success"
 2531:    20:   var log = help ? console.log : console.error
 2532     21    log('Usage: rimraf <path> [<path> ...]')
 2533     22    log('')
 ....
 2536    297    }
 2537    298  
 2538:   299:   //console.error('PROCESS %d', this._processing, pattern)
 2539    300  
 2540    301    // Get the first [n] parts of pattern that are all strings.
 ....
 2542    389    }
 2543    390  
 2544:   391:   //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
 2545    392  
 2546    393    var len = matchedEntries.length
 ....
 2548    516      return
 2549    517  
 2550:   518:   //console.error('RD %j %j', +inGlobStar, abs)
 2551    519    if (inGlobStar && !ownProp(this.symlinks, abs))
 2552    520      return this._readdirInGlobStar(abs, cb)
 ....
 2554    591        }
 2555    592        if (!this.silent)
 2556:   593:         console.error('glob error', er)
 2557    594        break
 2558    595    }
 ....
 2560    607  
 2561    608  Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
 2562:   609:   //console.error('pgs2', prefix, remain[0], entries)
 2563    610  
 2564    611    // no entries means not a dir, so it can never have matches
 ....
 2566    656  Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
 2567    657  
 2568:   658:   //console.error('ps2', prefix, exists)
 2569    659  
 2570    660    if (!this.matches[index])
 ....
 2573    155    var set = this.globSet = this.braceExpand()
 2574    156  
 2575:   157:   if (options.debug) this.debug = console.error
 2576    158  
 2577    159    this.debug(this.pattern, set)
 ....
 2580    321          throw er
 2581    322        if (!this.silent)
 2582:   323:         console.error('glob error', er)
 2583    324        break
 2584    325    }
 ....
 2587     80  
 2588     81  function failInc () {
 2589:    82:   console.error("--inc can only be used on a single version with no range")
 2590     83    fail()
 2591     84  }
 ....
 2594     65  		var opts = parser.parse(process.argv);
 2595     66  	} catch (e) {
 2596:    67: 		console.error('sshpk-conv: error: %s', e.message);
 2597     68  		process.exit(1);
 2598     69  	}
 ....
 2600     71  	if (opts.help || opts._args.length > 1) {
 2601     72  		var help = parser.help({}).trimRight();
 2602:    73: 		console.error('sshpk-conv: converts between SSH key formats\n');
 2603:    74: 		console.error(help);
 2604:    75: 		console.error('\navailable formats:');
 2605:    76: 		console.error('  - pem, pkcs1     eg id_rsa');
 2606:    77: 		console.error('  - ssh            eg id_rsa.pub');
 2607:    78: 		console.error('  - pkcs8          format you want for openssl');
 2608:    79: 		console.error('  - openssh        like output of ssh-keygen -o');
 2609:    80: 		console.error('  - rfc4253        raw OpenSSH wire format');
 2610     81  		process.exit(1);
 2611     82  	}
 ....
 2613    108  		}
 2614    109  	} catch (e) {
 2615:   110: 		console.error('sshpk-conv: error opening input file' +
 2616    111  		     ': ' + e.name + ': ' + e.message);
 2617    112  		process.exit(1);
 ....
 2619    121  		}
 2620    122  	} catch (e) {
 2621:   123: 		console.error('sshpk-conv: error opening output file' +
 2622    124  		    ': ' + e.name + ': ' + e.message);
 2623    125  		process.exit(1);
 ....
 2625    143  			var key = f(buf, fmt, inFileName);
 2626    144  		} catch (e) {
 2627:   145: 			console.error('sshpk-conv: ' +
 2628    146  			    e.name + ': ' + e.message);
 2629    147  			process.exit(1);
 ....
 2632     60  		var opts = parser.parse(process.argv);
 2633     61  	} catch (e) {
 2634:    62: 		console.error('sshpk-sign: error: %s', e.message);
 2635     63  		process.exit(1);
 2636     64  	}
 ....
 2638     66  	if (opts.help || opts._args.length > 1) {
 2639     67  		var help = parser.help({}).trimRight();
 2640:    68: 		console.error('sshpk-sign: sign data using an SSH key\n');
 2641:    69: 		console.error(help);
 2642     70  		process.exit(1);
 2643     71  	}
 ....
 2645     73  	if (!opts.identity) {
 2646     74  		var help = parser.help({}).trimRight();
 2647:    75: 		console.error('sshpk-sign: the -i or --identity option ' +
 2648     76  		    'is required\n');
 2649:    77: 		console.error(help);
 2650     78  		process.exit(1);
 2651     79  	}
 ....
 2653     85  		key = sshpk.parsePrivateKey(keyData);
 2654     86  	} catch (e) {
 2655:    87: 		console.error('sshpk-sign: error loading private key "' +
 2656     88  		    opts.identity + '": ' + e.name + ': ' + e.message);
 2657     89  		process.exit(1);
 ....
 2659     96  		signer = key.createSign(hash);
 2660     97  	} catch (e) {
 2661:    98: 		console.error('sshpk-sign: error creating signer: ' +
 2662     99  		    e.name + ': ' + e.message);
 2663    100  		process.exit(1);
 ....
 2665    102  
 2666    103  	if (opts.verbose) {
 2667:   104: 		console.error('sshpk-sign: using %s-%s with a %d bit key',
 2668    105  		    key.type, hash, key.size);
 2669    106  	}
 ....
 2671    125  		}
 2672    126  	} catch (e) {
 2673:   127: 		console.error('sshpk-sign: error opening input file' +
 2674    128  		     ': ' + e.name + ': ' + e.message);
 2675    129  		process.exit(1);
 ....
 2677    138  		}
 2678    139  	} catch (e) {
 2679:   140: 		console.error('sshpk-sign: error opening output file' +
 2680    141  		    ': ' + e.name + ': ' + e.message);
 2681    142  		process.exit(1);
 ....
 2683    149  			sig = signer.sign();
 2684    150  		} catch (e) {
 2685:   151: 			console.error('sshpk-sign: error signing data: ' +
 2686    152  			    e.name + ': ' + e.message);
 2687    153  			process.exit(1);
 ....
 2689    161  				output = output.toString('base64');
 2690    162  		} catch (e) {
 2691:   163: 			console.error('sshpk-sign: error converting signature' +
 2692    164  			    ' to ' + fmt + ' format: ' + e.name + ': ' +
 2693    165  			    e.message);
 ....
 2696     55  		var opts = parser.parse(process.argv);
 2697     56  	} catch (e) {
 2698:    57: 		console.error('sshpk-verify: error: %s', e.message);
 2699     58  		process.exit(3);
 2700     59  	}
 ....
 2702     61  	if (opts.help || opts._args.length > 1) {
 2703     62  		var help = parser.help({}).trimRight();
 2704:    63: 		console.error('sshpk-verify: sign data using an SSH key\n');
 2705:    64: 		console.error(help);
 2706     65  		process.exit(3);
 2707     66  	}
 ....
 2709     68  	if (!opts.identity) {
 2710     69  		var help = parser.help({}).trimRight();
 2711:    70: 		console.error('sshpk-verify: the -i or --identity option ' +
 2712     71  		    'is required\n');
 2713:    72: 		console.error(help);
 2714     73  		process.exit(3);
 2715     74  	}
 ....
 2717     76  	if (!opts.signature) {
 2718     77  		var help = parser.help({}).trimRight();
 2719:    78: 		console.error('sshpk-verify: the -s or --signature option ' +
 2720     79  		    'is required\n');
 2721:    80: 		console.error(help);
 2722     81  		process.exit(3);
 2723     82  	}
 ....
 2725     88  		key = sshpk.parseKey(keyData);
 2726     89  	} catch (e) {
 2727:    90: 		console.error('sshpk-verify: error loading key "' +
 2728     91  		    opts.identity + '": ' + e.name + ': ' + e.message);
 2729     92  		process.exit(2);
 ....
 2731    100  		sig = sshpk.parseSignature(sigData, key.type, fmt);
 2732    101  	} catch (e) {
 2733:   102: 		console.error('sshpk-verify: error parsing signature: ' +
 2734    103  		    e.name + ': ' + e.message);
 2735    104  		process.exit(2);
 ....
 2737    111  		verifier = key.createVerify(hash);
 2738    112  	} catch (e) {
 2739:   113: 		console.error('sshpk-verify: error creating verifier: ' +
 2740    114  		    e.name + ': ' + e.message);
 2741    115  		process.exit(2);
 ....
 2743    117  
 2744    118  	if (opts.verbose) {
 2745:   119: 		console.error('sshpk-verify: using %s-%s with a %d bit key',
 2746    120  		    key.type, hash, key.size);
 2747    121  	}
 ....
 2749    140  		}
 2750    141  	} catch (e) {
 2751:   142: 		console.error('sshpk-verify: error opening input file' +
 2752    143  		     ': ' + e.name + ': ' + e.message);
 2753    144  		process.exit(2);
 ....
 2755    151  			ret = verifier.verify(sig);
 2756    152  		} catch (e) {
 2757:   153: 			console.error('sshpk-verify: error verifying data: ' +
 2758    154  			    e.name + ': ' + e.message);
 2759    155  			process.exit(1);
 ....
 2761    157  
 2762    158  		if (ret) {
 2763:   159: 			console.error('OK');
 2764    160  			process.exit(0);
 2765    161  		}
 2766    162  
 2767:   163: 		console.error('NOT OK');
 2768    164  		process.exit(1);
 2769    165  	});
 ....
 2772     63    "name": "tar-pack",
 2773     64    "optionalDependencies": {},
 2774:    65:   "readme": "# Tar Pack\n\nPackage and un-package modules of some sort (in tar/gz bundles).  This is mostly useful for package managers.  Note that it doesn't check for or touch `package.json` so it can be used even if that's not the way you store your package info.\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/tar-pack/master.svg)](https://travis-ci.org/ForbesLindesay/tar-pack)\n[![Dependency Status](https://img.shields.io/david/ForbesLindesay/tar-pack.svg)](https://david-dm.org/ForbesLindesay/tar-pack)\n[![NPM version](https://img.shields.io/npm/v/tar-pack.svg)](https://www.npmjs.com/package/tar-pack)\n\n## Installation\n\n    $ npm install tar-pack\n\n## API\n\n### pack(folder|packer, [options])\n\nPack the folder at `folder` into a gzipped tarball and return the tgz as a stream.  Files ignored by `.gitignore` will not be in the package.\n\nYou can optionally pass a `fstream.DirReader` directly, instead of folder.  For example, to create an npm package, do:\n\n```js\npack(require(\"fstream-npm\")(folder), [options])\n```\n\nOptions:\n\n - `noProprietary` (defaults to `false`) Set this to `true` to prevent any proprietary attributes being added to the tarball.  These attributes are allowed by the spec, but may trip up some poorly written tarball parsers.\n - `ignoreFiles` (defaults to `['.gitignore']`) These files can specify files to be excluded from the package using the syntax of `.gitignore`.  This option is ignored if you parse a `fstream.DirReader` instead of a string for folder.\n - `filter` (defaults to `entry => true`) A function that takes an entry and returns `true` if it should be included in the package and `false` if it should not.  Entryies are of the form `{path, basename, dirname, type}` where (type is \"Directory\" or \"File\").  This function is ignored if you parse a `fstream.DirReader` instead of a string for folder.\n\nExample:\n\n```js\nvar write = require('fs').createWriteStream\nvar pack = require('tar-pack').pack\npack(process.cwd())\n  .pipe(write(__dirname + '/package.tar.gz'))\n  .on('error', function (err) {\n    console.error(err.stack)\n  })\n  .on('close', function () {\n    console.log('done')\n  })\n```\n\n### unpack(folder, [options,] cb)\n\nReturn a stream that unpacks a tarball into a folder at `folder`.  N.B. the output folder will be removed first if it already exists.\n\nThe callback is called with an optional error and, as its second argument, a string which is one of:\n\n - `'directory'`, indicating that the extracted package was a directory (either `.tar.gz` or `.tar`)\n - `'file'`, incating that the extracted package was just a single file (extracted to `defaultName`, see options)\n\nBasic Options:\n\n - `defaultName` (defaults to `index.js`) If the package is a single file, rather than a tarball, it will be \"extracted\" to this file name, set to `false` to disable.\n\nAdvanced Options (you probably don't need any of these):\n\n - `gid` - (defaults to `null`) the `gid` to use when writing files\n - `uid` - (defaults to `null`) the `uid` to use when writing files\n - `dmode` - (defaults to `0777`) The mode to use when creating directories\n - `fmode` - (defaults to `0666`) The mode to use when creating files\n - `unsafe` - (defaults to `false`) (on non win32 OSes it overrides `gid` and `uid` with the current processes IDs)\n\nExample:\n\n```js\nvar read = require('fs').createReadStream\nvar unpack = require('tar-pack').unpack\nread(process.cwd() + '/package.tar.gz')\n  .pipe(unpack(__dirname + '/package/', function (err) {\n    if (err) console.error(err.stack)\n    else console.log('done')\n  }))\n```\n\n## License\n\n  BSD",
 2775     66    "readmeFilename": "README.md",
 2776     67    "repository": {
 ....
 2779     37    .pipe(write(__dirname + '/package.tar.gz'))
 2780     38    .on('error', function (err) {
 2781:    39:     console.error(err.stack)
 2782     40    })
 2783     41    .on('close', function () {
 ....
 2785     72  read(process.cwd() + '/package.tar.gz')
 2786     73    .pipe(unpack(__dirname + '/package/', function (err) {
 2787:    74:     if (err) console.error(err.stack)
 2788     75      else console.log('done')
 2789     76    }))
 ....
 2792      4  
 2793      5  function onError(err) {
 2794:     6:   console.error('An error occurred:', err)
 2795      7  }
 2796      8  
 ....
 2799      7  
 2800      8  function onError(err) {
 2801:     9:   console.error('An error occurred:', err)
 2802     10  }
 2803     11  
 ....
 2806      5    .pipe(tar.Parse())
 2807      6    .on("extendedHeader", function (e) {
 2808:     7:     console.error("extended pax header", e.props)
 2809      8      e.on("end", function () {
 2810:     9:       console.error("extended pax fields:", e.fields)
 2811     10      })
 2812     11    })
 2813     12    .on("ignoredEntry", function (e) {
 2814:    13:     console.error("ignoredEntry?!?", e.props)
 2815     14    })
 2816     15    .on("longLinkpath", function (e) {
 2817:    16:     console.error("longLinkpath entry", e.props)
 2818     17      e.on("end", function () {
 2819:    18:       console.error("value=%j", e.body.toString())
 2820     19      })
 2821     20    })
 2822     21    .on("longPath", function (e) {
 2823:    22:     console.error("longPath entry", e.props)
 2824     23      e.on("end", function () {
 2825:    24:       console.error("value=%j", e.body.toString())
 2826     25      })
 2827     26    })
 2828     27    .on("entry", function (e) {
 2829:    28:     console.error("entry", e.props)
 2830     29      e.on("data", function (c) {
 2831:    30:       console.error("  >>>" + c.toString().replace(/\n/g, "\\n"))
 2832     31      })
 2833     32      e.on("end", function () {
 2834:    33:       console.error("  <<<EOF")
 2835     34      })
 2836     35    })
 ....
 2839     57  
 2840     58  EntryWriter.prototype.write = function (c) {
 2841:    59:   // console.error(".. ew write")
 2842     60    if (this._ended) return this.emit("error", new Error("write after end"))
 2843     61    this._buffer.push(c)
 ....
 2845     66  
 2846     67  EntryWriter.prototype.end = function (c) {
 2847:    68:   // console.error(".. ew end")
 2848     69    if (c) this._buffer.push(c)
 2849     70    this._buffer.push(EOF)
 ....
 2851     75  
 2852     76  EntryWriter.prototype.pause = function () {
 2853:    77:   // console.error(".. ew pause")
 2854     78    this._paused = true
 2855     79    this.emit("pause")
 ....
 2857     81  
 2858     82  EntryWriter.prototype.resume = function () {
 2859:    83:   // console.error(".. ew resume")
 2860     84    this._paused = false
 2861     85    this.emit("resume")
 ....
 2863     88  
 2864     89  EntryWriter.prototype.add = function (entry) {
 2865:    90:   // console.error(".. ew add")
 2866     91    if (!this.parent) return this.emit("error", new Error("no parent"))
 2867     92  
 ....
 2869     99  
 2870    100  EntryWriter.prototype._header = function () {
 2871:   101:   // console.error(".. ew header")
 2872    102    if (this._didHeader) return
 2873    103    this._didHeader = true
 ....
 2875    121    }
 2876    122  
 2877:   123:   // console.error(".. .. ew headerBlock emitting")
 2878    124    this.emit("data", headerBlock)
 2879    125    this.emit("header")
 ....
 2881    127  
 2882    128  EntryWriter.prototype._process = function () {
 2883:   129:   // console.error(".. .. ew process")
 2884    130    if (!this._didHeader && !this._meta) {
 2885    131      this._header()
 ....
 2887    133  
 2888    134    if (this._paused || this._processing) {
 2889:   135:     // console.error(".. .. .. paused=%j, processing=%j", this._paused, this._processing)
 2890    136      return
 2891    137    }
 ....
 2893    141    var buf = this._buffer
 2894    142    for (var i = 0; i < buf.length; i ++) {
 2895:   143:     // console.error(".. .. .. i=%d", i)
 2896    144  
 2897    145      var c = buf[i]
 ....
 2899    149  
 2900    150      if (this._paused) {
 2901:   151:       // console.error(".. .. .. paused mid-emission")
 2902    152        this._processing = false
 2903    153        if (i < buf.length) {
 ....
 2905    159    }
 2906    160  
 2907:   161:   // console.error(".. .. .. emitted")
 2908    162    this._buffer.length = 0
 2909    163    this._processing = false
 2910    164  
 2911:   165:   // console.error(".. .. .. emitting drain")
 2912    166    this.emit("drain")
 2913    167  }
 ....
 2916     90  
 2917     91  Entry.prototype.resume = function () {
 2918:    92:   // console.error("    Tar Entry resume", this.path)
 2919     93    this.emit("resume")
 2920     94    this._paused = false
 ....
 2922     99    // This is bound to the instance
 2923    100  Entry.prototype._read = function () {
 2924:   101:   // console.error("    Tar Entry _read", this.path)
 2925    102  
 2926    103    if (this._paused || this._reading || this._ended) return
 ....
 2929     15  // Don't be shy with it.  Just encode everything.
 2930     16  function ExtendedHeaderWriter (props) {
 2931:    17:   // console.error(">> ehw ctor")
 2932     18    var me = this
 2933     19  
 ....
 2935     44  
 2936     45    EntryWriter.call(me, p)
 2937:    46:   // console.error(">> ehw props", me.props)
 2938     47    me.props = p
 2939     48  
 ....
 2941     51  
 2942     52  ExtendedHeaderWriter.prototype.end = function () {
 2943:    53:   // console.error(">> ehw end")
 2944     54    var me = this
 2945     55  
 ....
 2947     72    me._ready = true
 2948     73  
 2949:    74:   // console.error(">> ehw _process calling end()", me.props)
 2950     75    this._stream.end()
 2951     76  }
 2952     77  
 2953     78  ExtendedHeaderWriter.prototype._encodeFields = function () {
 2954:    79:   // console.error(">> ehw _encodeFields")
 2955     80    this.body = []
 2956     81    if (this.fields.prefix) {
 ....
 2958     91  
 2959     92  function encodeFields (fields, prefix, body, nop) {
 2960:    93:   // console.error(">> >> ehw encodeFields")
 2961     94    // "%d %s=%s\n", <length>, <keyword>, <value>
 2962     95    // The length is a decimal number, and includes itself and the \n
 ....
 2964    161      , digits = Math.floor(Math.log(s.length) / Math.log(10)) + 1
 2965    162  
 2966:   163:   // console.error("1 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
 2967    164  
 2968    165    // if adding that many digits will make it go over that length,
 ....
 2970    173    // itself.  In that case, just bump it up again.
 2971    174    if (s.length + digits >= Math.pow(10, digits)) digits += 1
 2972:   175:   // console.error("2 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
 2973    176  
 2974    177    var len = digits + s.length
 2975:   178:   // console.error("3 s=%j digits=%j s.length=%d len=%d", s.toString(), digits, s.length, len)
 2976    179    var lenBuf = new Buffer("" + len)
 2977    180    if (lenBuf.length + s.length !== len) {
 ....
 2980     65        ; i < l
 2981     66        ; this._position++, this._fieldPos++, i++) {
 2982:    67:     // console.error("top of loop, size="+this._size)
 2983     68  
 2984     69      var b = c[i]
 ....
 2986     78  
 2987     79        case SIZE:
 2988:    80:         // console.error("parsing size, b=%d, rest=%j", b, c.slice(i).toString())
 2989     81          if (b === space) {
 2990     82            this._state = KEY
 ....
 2992    108          // field must end with cr
 2993    109          if (this._fieldPos === this._size - 1) {
 2994:   110:           // console.error("finished with "+this._key)
 2995    111            if (b !== cr) {
 2996    112              error(this, "expected \\n at end of field")
 ....
 2999     74  
 3000     75    // this._fst.on("end", function () {
 3001:    76:   //   console.error("\nEEEE Extract End", me._fst.path)
 3002     77    // })
 3003     78  
 3004     79    this._fst.on("close", function () {
 3005:    80:     // console.error("\nEEEE Extract End", me._fst.path)
 3006     81      me.emit("finish")
 3007     82      me.emit("end")
 ....
 3010     46    // the path field.
 3011     47    if (obj.prefix) {
 3012:    48:     // console.error("%% header encoding, got a prefix", obj.prefix)
 3013     49      obj.path = obj.prefix + "/" + obj.path
 3014:    50:     // console.error("%% header encoding, prefixed path", obj.path)
 3015     51      obj.prefix = ""
 3016     52    }
 ....
 3018     72        case "prefix":
 3019     73          // special, this is an extension of the "path" field.
 3020:    74:         // console.error("%% header encoding, skip prefix later")
 3021     75          break
 3022     76  
 ....
 3024    118              off = fieldOffs[fields.prefix]
 3025    119              end = fieldEnds[fields.prefix]
 3026:   120:             // console.error("%% header writing prefix", off, end, prefix)
 3027    121              ret = writeText(block, off, end, prefix) || ret
 3028    122              break
 ....
 3030    128          // on old implementations no matter what we do here.
 3031    129          // Null out the prefix, and fallthrough to default.
 3032:   130:         // console.error("%% header writing no prefix")
 3033    131          var poff = fieldOffs[fields.prefix]
 3034    132            , pend = fieldEnds[fields.prefix]
 ....
 3036    163  
 3037    164    num = num || 0
 3038:   165:   // console.error("  numeric", num)
 3039    166  
 3040    167    if (num instanceof Date ||
 ....
 3042    306            return
 3043    307          } else {
 3044:   308:           // console.error("ustar:", val, val.toString())
 3045    309            this.ustar = val.toString()
 3046    310          }
 ....
 3048    325          }
 3049    326          prefix = val.toString("utf8").replace(/\0+$/, "")
 3050:   327:         // console.error("%% header reading prefix", prefix)
 3051    328          break
 3052    329  
 ....
 3054    343    if (prefix) {
 3055    344      this.path = prefix + "/" + this.path
 3056:   345:     // console.error("%% header got a prefix", this.path)
 3057    346    }
 3058    347  }
 ....
 3061     17  
 3062     18  function Pack (props) {
 3063:    19:   // console.error("-- p ctor")
 3064     20    var me = this
 3065     21    if (!(me instanceof Pack)) return new Pack(props)
 ....
 3067     29    me.writable = true
 3068     30    me._buffer = []
 3069:    31:   // console.error("-- -- set current to null in ctor")
 3070     32    me._currentEntry = null
 3071     33    me._processing = false
 ....
 3073     45  
 3074     46  Pack.prototype.addGlobal = function (props) {
 3075:    47:   // console.error("-- p addGlobal")
 3076     48    if (this._didGlobal) return
 3077     49    this._didGlobal = true
 ....
 3079    104  
 3080    105    if (entry.ready === false) {
 3081:   106:     // console.error("-- entry is not ready", entry)
 3082    107      me._buffer.unshift(entry)
 3083    108      entry.on("ready", function () {
 3084:   109:       // console.error("-- -- ready!", entry)
 3085    110        me._process()
 3086    111      })
 ....
 3088    179    }
 3089    180  
 3090:   181:   // console.error("-- new writer", wprops)
 3091    182    // if (!wprops.type) {
 3092:   183:   //   // console.error("-- no type?", entry.constructor.name, entry)
 3093    184    // }
 3094    185  
 3095:   186:   // console.error("-- -- set current to new writer", wprops.path)
 3096    187    var writer = me._currentEntry = EntryWriter(wprops)
 3097    188  
 ....
 3099    190  
 3100    191    // writer.on("end", function () {
 3101:   192:   //   // console.error("-- -- writer end", writer.path)
 3102    193    // })
 3103    194  
 ....
 3105    201        return this.toString().split(/\0/).join(".")
 3106    202      }
 3107:   203:     // console.error("-- -- writer header %j", writer.props)
 3108    204      if (writer.props.size === 0) nextEntry()
 3109    205    })
 ....
 3111    211      ended = true
 3112    212  
 3113:   213:     // console.error("-- -- writer close", writer.path)
 3114:   214:     // console.error("-- -- set current to null", wprops.path)
 3115    215      me._currentEntry = null
 3116    216      me._processing = false
 ....
 3118    219  
 3119    220    writer.on("error", function (er) {
 3120:   221:     // console.error("-- -- writer error", writer.path)
 3121    222      me.emit("error", er)
 3122    223    })
 ....
 3124    226    // or data, since they'll be added directly.
 3125    227    if (entry === me._pipeRoot) {
 3126:   228:     // console.error("-- is the root, don't auto-add")
 3127    229      writer.add = null
 3128    230    }
 ....
 3131     44    fs[method] = function () {
 3132     45      var args = [].slice.call(arguments)
 3133:    46:     console.error("slow", method, args[0])
 3134     47      var cb = args.pop()
 3135     48  
 ....
 3138    138        , parsed = new TarHeader(header)
 3139    139  
 3140:   140:     // console.error(parsed)
 3141    141      t.has(parsed, expect, "parse " + name)
 3142    142    })
 ....
 3145    817  
 3146    818    pack.on("data", function (c) {
 3147:   819:     // console.error("PACK DATA")
 3148    820      if (c.length !== 512) {
 3149    821        // this one is too noisy, only assert if it'll be relevant
 ....
 3151    826  
 3152    827    pack.on("end", function () {
 3153:   828:     // console.error("PACK END")
 3154    829      t.pass("parser ends")
 3155    830      parse.end()
 ....
 3157    856  
 3158    857      if (ev !== wanted[0] || e.path !== wanted[1].path) {
 3159:   858:       console.error("wanted", wanted)
 3160:   859:       console.error([ev, e.props])
 3161    860        e.on("end", function () {
 3162:   861:         console.error(e.fields)
 3163    862          throw "break"
 3164    863        })
 ....
 3167    871  
 3168    872    pack.on("data", function (c) {
 3169:   873:     // console.error("PACK DATA")
 3170    874      if (c.length !== 512) {
 3171    875        // this one is too noisy, only assert if it'll be relevant
 ....
 3173    880  
 3174    881    pack.on("end", function () {
 3175:   882:     // console.error("PACK END")
 3176    883      t.pass("parser ends")
 3177    884      parse.end()
 ....
 3179    921  
 3180    922      if (ev !== wanted[0] || e.path !== wanted[1].path) {
 3181:   923:       console.error("wanted", wanted)
 3182:   924:       console.error([ev, e.props])
 3183    925        e.on("end", function () {
 3184:   926:         console.error(e.fields)
 3185    927          throw "break"
 3186    928        })
 ....
 3189    236        args.unshift('TUNNEL:')
 3190    237      }
 3191:   238:     console.error.apply(console, args)
 3192    239    }
 3193    240  } else {
 ....
 3196     14  if (!isNaN(group)) group = +group
 3197     15  
 3198:    16: console.error([user, group])
 3199     17  
 3200     18  try {
 ....
 3203     16   *
 3204     17   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 3205:    18:  * will invoke `console.trace()` instead of `console.error()`.
 3206     19   *
 3207     20   * @param {Function} fn - the function to deprecate
 ....
 3210     22  
 3211     23    evt.on('fsevent', function(name, flags, id) {
 3212:    24:     console.error("id:\t" + id);
 3213:    25:     console.error("flags:\t" + JSON.stringify(flags));
 3214     26      if (name === __dirname + '/temp') return;
 3215     27      if (path.basename(name) === 'created-fsevent') {
 ....
 3217     36  
 3218     37    evt.on('change', function(name, info) {
 3219:    38:     console.error("name:\t" + name);
 3220:    39:     console.error("base:\t" + path.basename(name));
 3221:    40:     console.error("event:\t" + info.event);
 3222:    41:     console.error("info:\t" + JSON.stringify(info));
 3223     42      if (name === __dirname + '/temp') return;
 3224     43      t.ok(name === info.path, 'matched path');
 ....
 3226     65  
 3227     66    setTimeout(function() {
 3228:    67:     console.error("===========================================================================");
 3229:    68:     console.error("\twriteFileSync(__dirname + '/temp/created-fsevent', 'created-fsevent');");
 3230     69      fs.writeFileSync(__dirname + '/temp/created-fsevent', 'created-fsevent');
 3231     70  
 3232:    71:     console.error("===========================================================================");
 3233     72    }, 500);
 3234     73    setTimeout(function() {
 3235:    74:     console.error("===========================================================================");
 3236:    75:     console.error("\trenameSync(__dirname + '/temp/created-fsevent', __dirname + '/temp/moved-fsevent');");
 3237     76      fs.renameSync(__dirname + '/temp/created-fsevent', __dirname + '/temp/moved-fsevent');
 3238     77  
 3239:    78:     console.error("===========================================================================");
 3240     79  
 3241     80    }, 1000);
 3242     81    setTimeout(function() {
 3243:    82:     console.error("===========================================================================");
 3244:    83:     console.error("\tunlinkSync(__dirname + '/temp/moved-fsevent');");
 3245     84      fs.unlinkSync(__dirname + '/temp/moved-fsevent');
 3246:    85:     console.error("===========================================================================");
 3247     86    }, 1500);
 3248     87    setTimeout(function() {
 3249:    88:     console.error("===========================================================================");
 3250:    89:     console.error("\trmdirSync(__dirname + '/temp');");
 3251     90      fs.rmdirSync(__dirname + '/temp');
 3252:    91:     console.error("===========================================================================");
 3253     92    }, 2000);
 3254     93  });
 ....
 3257     16  
 3258     17  if (!email) {
 3259:    18: 	console.error('Please specify an email');
 3260     19  	process.exit(1);
 3261     20  }
 ....
 3263     22  githubUsername(email, cli.flags.token, function (err, username) {
 3264     23  	if (err) {
 3265:    24: 		console.error(err);
 3266     25  		process.exit(1);
 3267     26  	}
 ....
 3270    126          console.trace(msg)
 3271    127        else
 3272:   128:         console.error(msg)
 3273    129  
 3274    130        exports.deprecationWarned = true
 ....
 3277    284    }
 3278    285  
 3279:   286:   //console.error('PROCESS %d', this._processing, pattern)
 3280    287  
 3281    288    // Get the first [n] parts of pattern that are all strings.
 ....
 3283    376    }
 3284    377  
 3285:   378:   //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
 3286    379  
 3287    380    var len = matchedEntries.length
 ....
 3289    503      return
 3290    504  
 3291:   505:   //console.error('RD %j %j', +inGlobStar, abs)
 3292    506    if (inGlobStar && !ownProp(this.symlinks, abs))
 3293    507      return this._readdirInGlobStar(abs, cb)
 ....
 3295    578        }
 3296    579        if (!this.silent)
 3297:   580:         console.error('glob error', er)
 3298    581        break
 3299    582    }
 ....
 3301    594  
 3302    595  Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
 3303:   596:   //console.error('pgs2', prefix, remain[0], entries)
 3304    597  
 3305    598    // no entries means not a dir, so it can never have matches
 ....
 3307    643  Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
 3308    644  
 3309:   645:   //console.error('ps2', prefix, exists)
 3310    646  
 3311    647    if (!this.matches[index])
 ....
 3314    321          throw er
 3315    322        if (!this.silent)
 3316:   323:         console.error('glob error', er)
 3317    324        break
 3318    325    }
 ....
 3321    297    }
 3322    298  
 3323:   299:   //console.error('PROCESS %d', this._processing, pattern)
 3324    300  
 3325    301    // Get the first [n] parts of pattern that are all strings.
 ....
 3327    389    }
 3328    390  
 3329:   391:   //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
 3330    392  
 3331    393    var len = matchedEntries.length
 ....
 3333    516      return
 3334    517  
 3335:   518:   //console.error('RD %j %j', +inGlobStar, abs)
 3336    519    if (inGlobStar && !ownProp(this.symlinks, abs))
 3337    520      return this._readdirInGlobStar(abs, cb)
 ....
 3339    591        }
 3340    592        if (!this.silent)
 3341:   593:         console.error('glob error', er)
 3342    594        break
 3343    595    }
 ....
 3345    607  
 3346    608  Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
 3347:   609:   //console.error('pgs2', prefix, remain[0], entries)
 3348    610  
 3349    611    // no entries means not a dir, so it can never have matches
 ....
 3351    656  Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
 3352    657  
 3353:   658:   //console.error('ps2', prefix, exists)
 3354    659  
 3355    660    if (!this.matches[index])
 ....
 3358    321          throw er
 3359    322        if (!this.silent)
 3360:   323:         console.error('glob error', er)
 3361    324        break
 3362    325    }
 ....
 3365    626  writer.end('this is the end\n');
 3366    627  writer.on('finish', () => {
 3367:   628:   console.error('all writes are now complete.');
 3368    629  });
 3369    630  ```
 ....
 3371    641  var reader = getReadableStreamSomehow();
 3372    642  writer.on('pipe', (src) => {
 3373:   643:   console.error('something is piping into the writer');
 3374    644    assert.equal(src, reader);
 3375    645  });
 ....
 3377    659  var reader = getReadableStreamSomehow();
 3378    660  writer.on('unpipe', (src) => {
 3379:   661:   console.error('something has stopped piping into the writer');
 3380    662    assert.equal(src, reader);
 3381    663  });
 ....
 3384     15      var m = util.format.apply(util, arguments)
 3385     16      m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
 3386:    17:     console.error(m)
 3387     18    }
 3388     19  
 ....
 3391    626  writer.end('this is the end\n');
 3392    627  writer.on('finish', () => {
 3393:   628:   console.error('all writes are now complete.');
 3394    629  });
 3395    630  ```
 ....
 3397    641  var reader = getReadableStreamSomehow();
 3398    642  writer.on('pipe', (src) => {
 3399:   643:   console.error('something is piping into the writer');
 3400    644    assert.equal(src, reader);
 3401    645  });
 ....
 3403    659  var reader = getReadableStreamSomehow();
 3404    660  writer.on('unpipe', (src) => {
 3405:   661:   console.error('something has stopped piping into the writer');
 3406    662    assert.equal(src, reader);
 3407    663  });
 ....
 3410     45      return $.html();
 3411     46    } else {
 3412:    47:     console.error('Please supply valid content to be updated.');
 3413     48    }
 3414     49  };
 ....
 3417     27      if (typeof buf === 'string') {
 3418     28          if (!iconv.skipDecodeWarning) {
 3419:    29:             console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
 3420     30              iconv.skipDecodeWarning = true;
 3421     31          }
 ....
 3424      9  
 3425     10  if (!files.length) {
 3426:    11:   console.error('Usage: image-size image1 [image2] [image3] ...');
 3427     12    process.exit(-1);
 3428     13  }
 ....
 3430     27        console.info(label, '-', grey[0] + image + grey[1]);
 3431     28      } else {
 3432:    29:       console.error('file doesn\'t exist - ', image);
 3433     30      }
 3434     31    } catch (e) {
 3435:    32:     // console.error(e.stack);
 3436:    33:     console.error(red[0] + e.message + red[1], '-', image);
 3437     34    }
 3438     35  });
 ....
 3441     12  isexe('some-file-name', function (err, isExe) {
 3442     13    if (err) {
 3443:    14:     console.error('probably file does not exist or something', err)
 3444     15    } else if (isExe) {
 3445:    16:     console.error('this thing can be run')
 3446     17    } else {
 3447:    18:     console.error('cannot be run')
 3448     19    }
 3449     20  })
 ....
 3452     20  
 3453     21  if (args.length < 4 || args[2] !== '-c') {
 3454:    22:     console.error(USAGE);
 3455     23      process.exit(1);
 3456     24  }
 ....
 3459      6    , req = request({url: 'http://isaacs.couchone.com/registry/_all_docs'})
 3460      7    , logger = es.mapSync(function (data) {  //create a stream that logs to stderr,
 3461:     8:     console.error(data)
 3462      9      return data  
 3463     10    })
 ....
 3466     19    .pipe(JSONStream.parse('rows.*'))
 3467     20    .pipe(es.mapSync(function (data) {
 3468:    21:     console.error(data)
 3469     22      return data
 3470     23    }))
 ....
 3473     37      
 3474     38        it(lines).has(expected)
 3475:    39:       console.error('PASSED')
 3476     40      })
 3477     41    )
 ....
 3480     10      parser.on('end', function() {
 3481     11          console.log('close')
 3482:    12:         console.error('PASSED');
 3483     13          server.close();
 3484     14      });
 ....
 3487     26    for (var i = 0 ; i < expected.rows.length ; i++)
 3488     27      it(parsed[i]).deepEqual(expected.rows[i].value.rev)
 3489:    28:   console.error('PASSED')
 3490     29  })
 3491     30  
 ....
 3494     26     for (var i = 0 ; i < 5 ; i++)
 3495     27       it(parsed[i]).deepEqual(i)
 3496:    28:    console.error('PASSED')
 3497     29   })
 3498     30  
 ....
 3501     21      [], [{hello: 'world'}]
 3502     22    ])
 3503:    23:   console.error('PASSED')
 3504     24  }
 3505     25  parser1.on('end', onend)
 ....
 3508     36    it(called).equal(expected.rows.length)
 3509     37    it(parsed).deepEqual(expected.rows)
 3510:    38:   console.error('PASSED')
 3511     39  })
 3512     40  
 ....
 3515     15  
 3516     16    p.onValue = function (v) {
 3517:    17:     console.error('parsed', v)
 3518     18      assert.equal(
 3519     19        String(v).slice(0,12),
 ....
 3521     21      )
 3522     22    }
 3523:    23:   console.error('correct', r)
 3524     24    p.write (new Buffer(JSON.stringify([r])))
 3525     25  
 ....
 3528     37        
 3529     38        it(JSON.parse(lines.join(''))).deepEqual(expected)
 3530:    39:       console.error('PASSED')
 3531     40      })
 3532     41    )
 ....
 3535     31        it(JSON.parse(lines.join(''))).deepEqual(expected)
 3536     32        if (--pending === 0) {
 3537:    33:         console.error('PASSED')
 3538     34        }
 3539     35      })
 ....
 3542     32    it(called).equal(expected.rows.length)
 3543     33    it(parsed).deepEqual(expected.rows)
 3544:    34:   console.error('PASSED')
 3545     35  })
 3546     36  
 ....
 3549     26  process.on('exit', function () {
 3550     27    it(called).equal(1)
 3551:    28:   console.error('PASSED')
 3552     29  })
 3553  
 ....
 3555     37      
 3556     38        it(lines).has(expected)
 3557:    39:       console.error('PASSED')
 3558     40      })
 3559     41    )
 ....
 3562    230              tick + ' ms';
 3563    231          if (failures.length) {
 3564:   232:             console.error(header);
 3565    233              failures.forEach(function (failure) {
 3566:   234:                 console.error(failure.source + ': Expected\n    ' +
 3567    235                      failure.expected.split('\n').join('\n    ') +
 3568    236                      '\nto match\n    ' + failure.actual);
 ....
 3571    492              tick + ' ms';
 3572    493          if (failures.length) {
 3573:   494:             console.error(header);
 3574    495              failures.forEach(function (failure) {
 3575    496                  try {
 ....
 3577    498                      var actualObject = JSON.parse(failure.actual);
 3578    499  
 3579:   500:                     console.error(failure.source + ': Expected\n    ' +
 3580    501                          failure.expected.split('\n').join('\n    ') +
 3581    502                          '\nto match\n    ' + failure.actual + '\nDiff:\n' +
 3582    503                          diff(expectedObject, actualObject));
 3583    504                  } catch (ex) {
 3584:   505:                     console.error(failure.source + ': Expected\n    ' +
 3585    506                          failure.expected.split('\n').join('\n    ') +
 3586    507                          '\nto match\n    ' + failure.actual);
 ....
 3589    626  writer.end('this is the end\n');
 3590    627  writer.on('finish', () => {
 3591:   628:   console.error('all writes are now complete.');
 3592    629  });
 3593    630  ```
 ....
 3595    641  var reader = getReadableStreamSomehow();
 3596    642  writer.on('pipe', (src) => {
 3597:   643:   console.error('something is piping into the writer');
 3598    644    assert.equal(src, reader);
 3599    645  });
 ....
 3601    659  var reader = getReadableStreamSomehow();
 3602    660  writer.on('unpipe', (src) => {
 3603:   661:   console.error('something has stopped piping into the writer');
 3604    662    assert.equal(src, reader);
 3605    663  });
 ....
 3608      7  function outputRejectedMessage(err) {
 3609      8  	if (err instanceof Error) {
 3610:     9: 		console.error(err.stack);
 3611     10  	} else {
 3612:    11: 		console.error('Promise rejected with value: ' + util.inspect(err));
 3613     12  	}
 3614     13  }
 ....
 3617     33  
 3618     34  function error(err) {
 3619:    35: 	console.error(err.stack);
 3620     36  	process.exit(1);
 3621     37  }
 ....
 3624     18    if (!didTypeWarning && typeof key !== 'string' && typeof key !== 'number') {
 3625     19      didTypeWarning = true
 3626:    20:     console.error(new TypeError("LRU: key must be a string or number. Almost certainly a bug! " + typeof key).stack)
 3627     21    }
 3628     22  }
 ....
 3631     27  ## Keys should always be Strings or Numbers
 3632     28  
 3633:    29: Note: this module will print warnings to `console.error` if you use a
 3634     30  key that is not a String or Number.  Because items are stored in an
 3635     31  object, which coerces keys to a string, it won't go well for you if
 ....
 3638     45    t.equal(refs, startRefs, 'no leaky refs')
 3639     46  
 3640:    47:   console.error('start: %j\n' +
 3641     48                  'end:   %j', start, end);
 3642     49    t.pass();
 ....
 3645    297    }
 3646    298  
 3647:   299:   //console.error('PROCESS %d', this._processing, pattern)
 3648    300  
 3649    301    // Get the first [n] parts of pattern that are all strings.
 ....
 3651    389    }
 3652    390  
 3653:   391:   //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
 3654    392  
 3655    393    var len = matchedEntries.length
 ....
 3657    516      return
 3658    517  
 3659:   518:   //console.error('RD %j %j', +inGlobStar, abs)
 3660    519    if (inGlobStar && !ownProp(this.symlinks, abs))
 3661    520      return this._readdirInGlobStar(abs, cb)
 ....
 3663    591        }
 3664    592        if (!this.silent)
 3665:   593:         console.error('glob error', er)
 3666    594        break
 3667    595    }
 ....
 3669    607  
 3670    608  Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
 3671:   609:   //console.error('pgs2', prefix, remain[0], entries)
 3672    610  
 3673    611    // no entries means not a dir, so it can never have matches
 ....
 3675    656  Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
 3676    657  
 3677:   658:   //console.error('ps2', prefix, exists)
 3678    659  
 3679    660    if (!this.matches[index])
 ....
 3682    321          throw er
 3683    322        if (!this.silent)
 3684:   323:         console.error('glob error', er)
 3685    324        break
 3686    325    }
 ....
 3689    626  writer.end('this is the end\n');
 3690    627  writer.on('finish', () => {
 3691:   628:   console.error('all writes are now complete.');
 3692    629  });
 3693    630  ```
 ....
 3695    641  var reader = getReadableStreamSomehow();
 3696    642  writer.on('pipe', (src) => {
 3697:   643:   console.error('something is piping into the writer');
 3698    644    assert.equal(src, reader);
 3699    645  });
 ....
 3701    659  var reader = getReadableStreamSomehow();
 3702    660  writer.on('unpipe', (src) => {
 3703:   661:   console.error('something has stopped piping into the writer');
 3704    662    assert.equal(src, reader);
 3705    663  });
 ....
 3708    156    var set = this.globSet = this.braceExpand()
 3709    157  
 3710:   158:   if (options.debug) this.debug = console.error
 3711    159  
 3712    160    this.debug(this.pattern, set)
 ....
 3715    155    var set = this.globSet = this.braceExpand()
 3716    156  
 3717:   157:   if (options.debug) this.debug = console.error
 3718    158  
 3719    159    this.debug(this.pattern, set)
 ....
 3722     26      function cb (err) {
 3723     27          if (err) {
 3724:    28:             console.error(err.message);
 3725     29              process.exit(1);
 3726     30          }
 ....
 3729      2  
 3730      3  mkdirp('/tmp/foo/bar/baz', function (err) {
 3731:     4:     if (err) console.error(err)
 3732      5      else console.log('pow!')
 3733      6  });
 ....
 3736     13      
 3737     14  mkdirp('/tmp/foo/bar/baz', function (err) {
 3738:    15:     if (err) console.error(err)
 3739     16      else console.log('pow!')
 3740     17  });
 ....
 3743     19  
 3744     20  test('clobber-pre', function (t) {
 3745:    21:     console.error("about to write to "+itw)
 3746     22      fs.writeFileSync(itw, 'I AM IN THE WAY, THE TRUTH, AND THE LIGHT.');
 3747     23  
 ....
 3750    155    var set = this.globSet = this.braceExpand()
 3751    156  
 3752:   157:   if (options.debug) this.debug = console.error
 3753    158  
 3754    159    this.debug(this.pattern, set)
 ....
 3757      2  
 3758      3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
 3759:     4:   ? function () { console.error.apply(console, arguments) }
 3760      5    : function () {}
 3761      6  
 ....
 3764    145  the offending `nopt.invalidHandler(key, val, types)`.
 3765    146  
 3766:   147: If no `nopt.invalidHandler` is assigned, then it will console.error
 3767    148  its whining.  If it is assigned to boolean `false` then the warning is
 3768    149  suppressed.
 ....
 3771     29  normalizeData = require('normalize-package-data')
 3772     30  packageData = fs.readFileSync("package.json")
 3773:    31: warnFn = function(msg) { console.error(msg) }
 3774     32  normalizeData(packageData, true)
 3775     33  // packageData is now normalized
 ....
 3777     43  normalizeData = require('normalize-package-data')
 3778     44  packageData = fs.readFileSync("package.json")
 3779:    45: warnFn = function(msg) { console.error(msg) }
 3780     46  normalizeData(packageData, warnFn)
 3781     47  // packageData is now normalized. Any number of warnings may have been logged.
 ....
 3784    102    }, warn)
 3785    103  
 3786:   104:   console.error(a)
 3787    105  
 3788    106    var expect =
 ....
 3790    130    }, warn)
 3791    131  
 3792:   132:   console.error(a)
 3793    133  
 3794    134    var expect =
 ....
 3796    153    }, warn)
 3797    154  
 3798:   155:   console.error(a)
 3799    156  
 3800    157    var expect =
 ....
 3803    104    }, warn)
 3804    105  
 3805:   106:   console.error(a)
 3806    107  
 3807    108    var expect =
 ....
 3809    132    }, warn)
 3810    133  
 3811:   134:   console.error(a)
 3812    135  
 3813    136    var expect =
 ....
 3815    155    }, warn)
 3816    156  
 3817:   157:   console.error(a)
 3818    158  
 3819    159    var expect =
 ....
 3822    114      function fail (msg) {
 3823    115          self.showHelp();
 3824:   116:         if (msg) console.error(msg);
 3825    117          process.exit(1);
 3826    118      }
 ....
 3828    177      
 3829    178      self.showHelp = function (fn) {
 3830:   179:         if (!fn) fn = console.error;
 3831    180          fn(self.help());
 3832    181      };
 ....
 3835    403  Return the generated usage string.
 3836    404  
 3837:   405: .showHelp(fn=console.error)
 3838    406  ---------------------------
 3839    407  
 ....
 3842    270      var logs = [];
 3843    271  
 3844:   272:     console._error = console.error;
 3845:   273:     console.error = function (msg) { errors.push(msg) };
 3846    274      console._log = console.log;
 3847    275      console.log = function (msg) { logs.push(msg) };
 ....
 3849    281      process.argv = process._argv;
 3850    282  
 3851:   283:     console.error = console._error;
 3852    284      console.log = console._log;
 3853    285  
 ....
 3856    626  writer.end('this is the end\n');
 3857    627  writer.on('finish', () => {
 3858:   628:   console.error('all writes are now complete.');
 3859    629  });
 3860    630  ```
 ....
 3862    641  var reader = getReadableStreamSomehow();
 3863    642  writer.on('pipe', (src) => {
 3864:   643:   console.error('something is piping into the writer');
 3865    644    assert.equal(src, reader);
 3866    645  });
 ....
 3868    659  var reader = getReadableStreamSomehow();
 3869    660  writer.on('unpipe', (src) => {
 3870:   661:   console.error('something has stopped piping into the writer');
 3871    662    assert.equal(src, reader);
 3872    663  });
 ....
 3875     23  if (process.stdin.isTTY) {
 3876     24  	if (!cli.input[0]) {
 3877:    25: 		console.error('Number required');
 3878     26  		process.exit(1);
 3879     27  	}
 ....
 3882      3  module.exports = require('./lib/core.js');
 3883      4  
 3884:     5: console.error('require("promise/core") is deprecated, use require("promise/lib/core") instead.');
 3885      6  
 3886  
 ....
 3888    616  }, function (error) {
 3889    617      // If there's an error or a non-200 status code, log the error.
 3890:   618:     console.error(error);
 3891    619  }, function (progress) {
 3892    620      // Log the progress as it comes in.
 ....
 3895     15  
 3896     16          if (!iconv.supportsNodeEncodingsExtension) {
 3897:    17:             console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
 3898:    18:             console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
 3899     19              return;
 3900     20          }
 ....
 3903     27      if (typeof buf === 'string') {
 3904     28          if (!iconv.skipDecodeWarning) {
 3905:    29:             console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
 3906     30              iconv.skipDecodeWarning = true;
 3907     31          }
 ....
 3910     33  
 3911     34      var callbacks = {
 3912:    35:       error: (err, op) => console.error(err, op),
 3913     36      }
 3914     37  
 ....
 3917     92          errorEvent.description);
 3918     93      } else if (this.state.viewState !== WebViewBridgeState.IDLE) {
 3919:    94:       console.error('RCTWebViewBridge invalid state encountered: ' + this.state.loading);
 3920     95      }
 3921     96  
 ....
 3923    200      onError && onError(event);
 3924    201      onLoadEnd && onLoadEnd(event);
 3925:   202:     console.error('Encountered an error loading page', event.nativeEvent);
 3926    203  
 3927    204      this.setState({
 ....
 3930    138        );
 3931    139      } else if (this.state.viewState !== WebViewBridgeState.IDLE) {
 3932:   140:       console.error(
 3933    141          'RCTWebViewBridge invalid state encountered: ' + this.state.loading
 3934    142        );
 ....
 3937   1159        for (var key in ViewStylePropTypes) {
 3938   1160          if (!Component.propTypes[key] && props[key] !== undefined) {
 3939:  1161:           console.error(
 3940   1162              'You are setting the style `{ ' + key + ': ... }` as a prop. You ' +
 3941   1163              'should nest it in a style object. ' +
 ....
 3944     13  module.exports = {
 3945     14    openURL: function(url) {
 3946:    15:     console.error('IntentAndroid is not supported on iOS');
 3947     16    },
 3948     17  };
 ....
 3951    469  
 3952    470    scrollResponderTextInputFocusError: function(e: Event) {
 3953:   471:     console.error('Error measuring text field: ', e);
 3954    472    },
 3955    473  
 ....
 3958    573      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN &&
 3959    574          curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
 3960:   575:       console.error('Attempted to transition from state `' + curState + '` to `' +
 3961    576          States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' +
 3962    577          'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
 ....
 3965    161          errorEvent.description);
 3966    162      } else if (this.state.viewState !== WebViewState.IDLE) {
 3967:   163:       console.error('RCTWebView invalid state encountered: ' + this.state.loading);
 3968    164      }
 3969    165  
 ....
 3971    269      onError && onError(event);
 3972    270      onLoadEnd && onLoadEnd(event);
 3973:   271:     console.error('Encountered an error loading page', event.nativeEvent);
 3974    272  
 3975    273      this.setState({
 ....
 3978    268        );
 3979    269      } else if (this.state.viewState !== WebViewState.IDLE) {
 3980:   270:       console.error(
 3981    271          'RCTWebView invalid state encountered: ' + this.state.loading
 3982    272        );
 ....
 3985     59        eval(text); // eslint-disable-line no-eval
 3986     60      } catch (e) {
 3987:    61:       console.error('Failed to eval: ' + e.message);
 3988     62        return;
 3989     63      }
 ....
 3991     79        data = JSON.parse(evt.data);
 3992     80      } catch (e) {
 3993:    81:       return console.error('failed to parse json: ' + evt.data);
 3994     82      }
 3995     83      // the devtools closed
 ....
 3998     59    }
 3999     60  
 4000:    61:   (console._errorOriginal || console.error)(e.message);
 4001     62    reportException(e, isFatal);
 4002     63  }
 4003     64  
 4004     65  /**
 4005:    66:  * Shows a redbox with stacktrace for all console.error messages.  Disable by
 4006     67   * setting `console.reportErrorsAsExceptions = false;` in your app.
 4007     68   */
 ....
 4009     72      return; // already installed
 4010     73    }
 4011:    74:   console._errorOriginal = console.error.bind(console);
 4012:    75:   console.error = function reactConsoleError() {
 4013     76      console._errorOriginal.apply(null, arguments);
 4014     77      if (!console.reportErrorsAsExceptions) {
 ....
 4016     85        const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');
 4017     86        if (str.slice(0, 10) === '"Warning: ') {
 4018:    87:         // React warnings use console.error so that a stack trace is shown, but
 4019     88          // we don't (currently) want these to show a redbox
 4020     89          // (Note: Logic duplicated in polyfills/console.js.)
 4021     90          return;
 4022     91        }
 4023:    92:       const error : any = new Error('console.error: ' + str);
 4024     93        error.framesToPop = 1;
 4025     94        reportException(error, /* isFatal */ false);
 ....
 4028     72          callback(currentTime);
 4029     73        } else {
 4030:    74:         console.error('Tried to call a callback with invalid type: ' + type);
 4031     75          return;
 4032     76        }
 ....
 4035     43   *       console.log('Initial url is: ' + url);
 4036     44   *     }
 4037:    45:  *   }).catch(err => console.error('An error occurred', err));
 4038     46   * }
 4039     47   * ```
 ....
 4041     95   *
 4042     96   * ```
 4043:    97:  * Linking.openURL(url).catch(err => console.error('An error occurred', err));
 4044     98   * ```
 4045     99   *
 ....
 4047    106   *     return Linking.openURL(url);
 4048    107   *   }
 4049:   108:  * }).catch(err => console.error('An error occurred', err));
 4050    109   * ```
 4051    110   */
 ....
 4054     50      showModal: function(tag: string, component: any) {
 4055     51        if (!_portalRef) {
 4056:    52:         console.error('Calling showModal but no Portal has been rendered.');
 4057     53          return;
 4058     54        }
 ....
 4060     63      closeModal: function(tag: string) {
 4061     64        if (!_portalRef) {
 4062:    65:         console.error('Calling closeModal but no Portal has been rendered.');
 4063     66          return;
 4064     67        }
 ....
 4066     74      getOpenModals: function(): Array<string> {
 4067     75        if (!_portalRef) {
 4068:    76:         console.error('Calling getOpenModals but no Portal has been rendered.');
 4069     77          return [];
 4070     78        }
 ....
 4072     82      notifyAccessibilityService: function() {
 4073     83        if (!_portalRef) {
 4074:    84:         console.error('Calling closeModal but no Portal has been rendered.');
 4075     85          return;
 4076     86        }
 ....
 4079     38    for (var key in validAttributes.style) {
 4080     39      if (!(validAttributes[key] || props[key] === undefined)) {
 4081:    40:       console.error(
 4082     41          'You are setting the style `{ ' + key + ': ... }` as a prop. You ' +
 4083     42          'should nest it in a style object. ' +
 ....
 4086     45  if (__DEV__) {
 4087     46    const {error, warn} = console;
 4088:    47:   console.error = function() {
 4089     48      error.apply(console, arguments);
 4090     49      // Show yellow box for the `warning` module.
 ....
 4093    139  
 4094    140      if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
 4095:   141:       console.error('You cannot render into anything but a top root');
 4096    142        return;
 4097    143      }
 ....
 4099    219    unmountComponentAtNode: function(containerTag: number): boolean {
 4100    220      if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
 4101:   221:       console.error('You cannot render into anything but a top root');
 4102    222        return false;
 4103    223      }
 ....
 4106     14  /**
 4107     15   * Small utility that can be used as an error handler. You cannot just pass
 4108:    16:  * `console.error` as a failure callback - it's not properly bound.  If passes an
 4109     17   * `Error` object, it will print the message and stack.
 4110     18   */
 ....
 4112     20    if (arguments.length === 1 && arguments[0] instanceof Error) {
 4113     21      var err = arguments[0];
 4114:    22:     console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
 4115     23    } else {
 4116:    24:     console.error.apply(console, arguments);
 4117     25    }
 4118     26  };
 ....
 4121    470            Object.defineProperty(map, 'size', {
 4122    471              set: (v) => {
 4123:   472:               console.error(
 4124    473                  'PLEASE FIX ME: You are changing the map size property which ' +
 4125    474                  'should not be writable and will break in production.'
 ....
 4128     79    var command = commands[args[0]];
 4129     80    if (!command) {
 4130:    81:     console.error('Command `%s` unrecognized', args[0]);
 4131     82      printUsage();
 4132     83      return;
 ....
 4135     40  function validatePackageName(name) {
 4136     41    if (!name.match(/^[$A-Z_][0-9A-Z_$]*$/i)) {
 4137:    42:     console.error(
 4138     43        '"%s" is not a valid name for a project. Please use a valid identifier ' +
 4139     44          'name (alphanumeric).',
 ....
 4142     36      function(error) {
 4143     37        if (error) {
 4144:    38:         console.error(error);
 4145     39          res.end('Unknown error: ' + error.message);
 4146     40        } else {
 ....
 4149     51        opn(debuggerURL, {app: [getChromeAppName()]}, function(err) {
 4150     52          if (err) {
 4151:    53:           console.error('Google Chrome exited with error:', err);
 4152     54          }
 4153     55        });
 ....
 4156     34          res.end(response);
 4157     35        } else {
 4158:    36:         console.error(error);
 4159     37          res.end('Unknown error: ' + error.message);
 4160     38        }
 ....
 4162     42        exec('open ' + dumpName.replace(/json$/, 'html'), function(err) {
 4163     43          if (err) {
 4164:    44:           console.error(err);
 4165     45            res.end(err.message);
 4166     46          } else {
 ....
 4169    125        const errorAttributes = JSON.stringify(error);
 4170    126        if (errorAttributes !== '{}') {
 4171:   127:         console.error(chalk.red(errorAttributes));
 4172    128        }
 4173:   129:       console.error(chalk.red(error.stack));
 4174    130      }
 4175    131      console.log('\nSee', chalk.underline('http://facebook.github.io/react-native/docs/troubleshooting.html'));
 ....
 4178    216                    };
 4179    217                  } else {
 4180:   218:                   console.error(error.stack || error);
 4181    219                    body = {
 4182    220                      type: 'InternalError',
 ....
 4184    243  
 4185    244          client.ws.on('error', e => {
 4186:   245:           console.error('[Hot Module Replacement] Unexpected error', e);
 4187    246            disconnect();
 4188    247          });
 ....
 4191     10   */
 4192     11  
 4193:    12: console.error([
 4194     13    '\033[31mLooks like you installed react-native globally, maybe you meant react-native-cli?',
 4195     14    'To fix the issue, run:\033[0m',
 ....
 4198    154          return Promise.denodeify(fs.writeFile)(cacheFilepath, JSON.stringify(json));
 4199    155        })
 4200:   156:       .catch(e => console.error('Error while persisting cache:', e.message))
 4201    157        .then(() => {
 4202    158          this._persisting = null;
 ....
 4205    105  
 4206    106      this._depGraph.load().catch(err => {
 4207:   107:       console.error(err.message + '\n' + err.stack);
 4208    108        process.exit(1);
 4209    109      });
 ....
 4212    383        var logLevel = level;
 4213    384        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
 4214:   385:         // React warnings use console.error so that a stack trace is shown,
 4215    386          // but we don't (currently) want these to show a redbox
 4216    387          // (Note: Logic duplicated in ExceptionsManager.js.)
 ....
 4219     77  function setupErrorGuard() {
 4220     78    var onError = function(e) {
 4221:    79:     global.console.error('Error: ' + e.message + ', stack:\n' + e.stack);
 4222     80    };
 4223     81    global.ErrorUtils.setGlobalHandler(onError);
 ....
 4226    397          data => res.end(data),
 4227    398          error => {
 4228:   399:           console.error(error.stack);
 4229    400            res.writeHead('404');
 4230    401            res.end('Asset not found');
 ....
 4232    495        }
 4233    496      } else {
 4234:   497:       console.error(error.stack || error);
 4235    498        res.end(JSON.stringify({
 4236    499          type: 'InternalError',
 ....
 4239     34          this._sock.removeAllListeners('error');
 4240     35          process.on('uncaughtException', (error) => {
 4241:    36:           console.error('uncaught error', error.stack);
 4242     37            setImmediate(() => process.exit(1));
 4243     38          });
 ....
 4246     81    _handleMessage(sock, m) {
 4247     82      if (!m || !m.id || !m.data) {
 4248:    83:       console.error('SocketServer recieved a malformed message: %j', m);
 4249     84        return;
 4250     85      }
 ....
 4253     58        if (err) {
 4254     59          console.warn('[React Transform HMR] There was an error updating ' + filename + ':');
 4255:    60:         console.error(err);
 4256     61        }
 4257     62      });
 ....
 4260     38        if (err) {
 4261     39          console.warn(`[React Transform HMR] There was an error updating ${filename}:`);
 4262:    40:         console.error(err);
 4263     41        }
 4264     42      });
 ....
 4267   1934            // Push the requested markup with an additional RESULT_INDEX_ATTR
 4268   1935            // attribute.  If the markup does not start with a < character, it
 4269:  1936:           // will be discarded below (with an appropriate console.error).
 4270   1937            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
 4271   1938            // This index will be parsed back out below.
 ....
 4273   1960            resultListAssignmentCount += 1;
 4274   1961          } else if ("development" !== 'production') {
 4275:  1962:           console.error('Danger: Discarding unexpected node:', renderNode);
 4276   1963          }
 4277   1964        }
 ....
 4279   6558      for (var i = 0; i < expectedFeatures.length; i++) {
 4280   6559        if (!expectedFeatures[i]) {
 4281:  6560:         console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
 4282   6561          break;
 4283   6562        }
 ....
 4285   19550      } else {
 4286   19551        if ("development" !== 'production') {
 4287:  19552:         console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
 4288   19553        }
 4289   19554        return {
 ....
 4291   20755        });
 4292   20756        if (typeof console !== 'undefined') {
 4293:  20757:         console.error(message);
 4294   20758        }
 4295   20759        try {
 ....
 4298   1914            // Push the requested markup with an additional RESULT_INDEX_ATTR
 4299   1915            // attribute.  If the markup does not start with a < character, it
 4300:  1916:           // will be discarded below (with an appropriate console.error).
 4301   1917            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
 4302   1918            // This index will be parsed back out below.
 ....
 4304   1940            resultListAssignmentCount += 1;
 4305   1941          } else if ("development" !== 'production') {
 4306:  1942:           console.error('Danger: Discarding unexpected node:', renderNode);
 4307   1943          }
 4308   1944        }
 ....
 4310   6163      for (var i = 0; i < expectedFeatures.length; i++) {
 4311   6164        if (!expectedFeatures[i]) {
 4312:  6165:         console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
 4313   6166          break;
 4314   6167        }
 ....
 4316   17627      } else {
 4317   17628        if ("development" !== 'production') {
 4318:  17629:         console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
 4319   17630        }
 4320   17631        return {
 ....
 4322   18792        });
 4323   18793        if (typeof console !== 'undefined') {
 4324:  18794:         console.error(message);
 4325   18795        }
 4326   18796        try {
 ....
 4329     79            // Push the requested markup with an additional RESULT_INDEX_ATTR
 4330     80            // attribute.  If the markup does not start with a < character, it
 4331:    81:           // will be discarded below (with an appropriate console.error).
 4332     82            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
 4333     83            // This index will be parsed back out below.
 ....
 4335    105            resultListAssignmentCount += 1;
 4336    106          } else if (process.env.NODE_ENV !== 'production') {
 4337:   107:           console.error('Danger: Discarding unexpected node:', renderNode);
 4338    108          }
 4339    109        }
 ....
 4342     83      for (var i = 0; i < expectedFeatures.length; i++) {
 4343     84        if (!expectedFeatures[i]) {
 4344:    85:         console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
 4345     86          break;
 4346     87        }
 ....
 4349   2544  
 4350   2545         default:
 4351:  2546:         console.error(node);
 4352   2547          throw new Error("not implemented");
 4353   2548        }
 ....
 4356    626  writer.end('this is the end\n');
 4357    627  writer.on('finish', () => {
 4358:   628:   console.error('all writes are now complete.');
 4359    629  });
 4360    630  ```
 ....
 4362    641  var reader = getReadableStreamSomehow();
 4363    642  writer.on('pipe', (src) => {
 4364:   643:   console.error('something is piping into the writer');
 4365    644    assert.equal(src, reader);
 4366    645  });
 ....
 4368    659  var reader = getReadableStreamSomehow();
 4369    660  writer.on('unpipe', (src) => {
 4370:   661:   console.error('something has stopped piping into the writer');
 4371    662    assert.equal(src, reader);
 4372    663  });
 ....
 4375    531  -
 4376    532  -w.on('results', function(res) {
 4377:   533: -  console.error(res, w.length);
 4378    534  -  assert.equal(w.length, size);
 4379    535  -  var l = 0;
 ....
 4381    616   
 4382    617   r.on('readable', function() {
 4383:   618: -  console.error('>> readable');
 4384:   619: +  //console.error('>> readable');
 4385    620     do {
 4386:   621: -    console.error('  > read(%d)', READSIZE);
 4387:   622: +    //console.error('  > read(%d)', READSIZE);
 4388    623       var ret = r.read(READSIZE);
 4389:   624: -    console.error('  < %j (%d remain)', ret && ret.length, rs.length);
 4390:   625: +    //console.error('  < %j (%d remain)', ret && ret.length, rs.length);
 4391    626     } while (ret && ret.length === READSIZE);
 4392    627   
 4393:   628: -  console.error('<< after read()',
 4394    629  -                ret && ret.length,
 4395    630  -                rs.needReadable,
 4396    631  -                rs.length);
 4397:   632: +  //console.error('<< after read()',
 4398    633  +  //              ret && ret.length,
 4399    634  +  //              rs.needReadable,
 ....
 4401    639   r.on('end', function() {
 4402    640     endEmitted = true;
 4403:   641: -  console.error('end');
 4404:   642: +  //console.error('end');
 4405    643   });
 4406    644   
 ....
 4408    648   
 4409    649     if (pushes++ === PUSHCOUNT) {
 4410:   650: -    console.error('   push(EOF)');
 4411:   651: +    //console.error('   push(EOF)');
 4412    652       return r.push(null);
 4413    653     }
 4414    654   
 4415:   655: -  console.error('   push #%d', pushes);
 4416:   656: +  //console.error('   push #%d', pushes);
 4417    657     if (r.push(new Buffer(PUSHSIZE)))
 4418    658       setTimeout(push);
 ....
 4421      4    if (errors) {
 4422      5      errors.forEach(function (err) {
 4423:     6:       console.error('Error: ', err);
 4424      7      });
 4425      8    }
 ....
 4428      5  // print out all JavaScript files along with their size
 4429      6  readdirp({ root: path.join(__dirname), fileFilter: '*.js' })
 4430:     7:   .on('warn', function (err) { console.error('non-fatal error', err); })
 4431:     8:   .on('error', function (err) { console.error('fatal error', err); })
 4432      9    .pipe(through.obj(function (entry, _, cb) { 
 4433     10      this.push({ path: entry.path, size: entry.stat.size });
 ....
 4436      4  readdirp({ root: path.join(__dirname), fileFilter: '*.js' })
 4437      5    .on('warn', function (err) { 
 4438:     6:     console.error('something went wrong when processing an entry', err); 
 4439      7    })
 4440      8    .on('error', function (err) { 
 4441:     9:     console.error('something went fatally wrong and the stream was aborted', err); 
 4442     10    })
 4443     11    .on('data', function (entry) { 
 ....
 4446    626  writer.end('this is the end\n');
 4447    627  writer.on('finish', () => {
 4448:   628:   console.error('all writes are now complete.');
 4449    629  });
 4450    630  ```
 ....
 4452    641  var reader = getReadableStreamSomehow();
 4453    642  writer.on('pipe', (src) => {
 4454:   643:   console.error('something is piping into the writer');
 4455    644    assert.equal(src, reader);
 4456    645  });
 ....
 4458    659  var reader = getReadableStreamSomehow();
 4459    660  writer.on('unpipe', (src) => {
 4460:   661:   console.error('something has stopped piping into the writer');
 4461    662    assert.equal(src, reader);
 4462    663  });
 ....
 4465     15  stream
 4466     16    .on('warn', function (err) { 
 4467:    17:     console.error('non-fatal error', err); 
 4468     18      // optionally call stream.destroy() here in order to abort and cause 'close' to be emitted
 4469     19    })
 4470:    20:   .on('error', function (err) { console.error('fatal error', err); })
 4471     21    .pipe(es.mapSync(function (entry) { 
 4472     22      return { path: entry.path, size: entry.stat.size };
 ....
 4475     18      require("fs").readFile(path, "utf-8", function(err, code) {
 4476     19          if (err) {
 4477:    20:             console.error(err);
 4478     21              return;
 4479     22          }
 ....
 4482     30  
 4483     31  if (!argv[1]) {
 4484:    32: 	console.error('You have to define how many times to repeat the string.');
 4485     33  	process.exit(1);
 4486     34  }
 ....
 4489      1  var resolve = require('../');
 4490      2  resolve('tap', { basedir: __dirname }, function (err, res) {
 4491:     3:     if (err) console.error(err)
 4492      4      else console.log(res)
 4493      5  });
 ....
 4496     15  var resolve = require('resolve');
 4497     16  resolve('tap', { basedir: __dirname }, function (err, res) {
 4498:    17:     if (err) console.error(err)
 4499     18      else console.log(res)
 4500     19  });
 ....
 4503    107  
 4504    108  stats.socket.on('error', function (error) {
 4505:   109:   console.error(error.stack)
 4506    110  })
 4507    111  
 ....
 4510     18  if (help || args.length === 0) {
 4511     19    // If they didn't ask for help, then this is not a "success"
 4512:    20:   var log = help ? console.log : console.error
 4513     21    log('Usage: rimraf <path>')
 4514     22    log('')
 ....
 4517    194    var set = this.globSet = this.braceExpand()
 4518    195  
 4519:   196:   if (options.debug) this.debug = console.error
 4520    197  
 4521    198    this.debug(this.pattern, set)
 ....
 4524     27      t.equivalent(minimatch.braceExpand(p), expect, p)
 4525     28    })
 4526:    29:   console.error("ending")
 4527     30    t.end()
 4528     31  })
 ....
 4531      9    var msg = 'Usage: sane <command> [...directory] [--glob=<filePattern>] ' +
 4532     10              '[--poll] [--watchman] [--dot] [--wait=<seconds>]';
 4533:    11:   console.error(msg);
 4534     12    process.exit();
 4535     13  }
 ....
 4538     25  
 4539     26  if (program.compress && program.block !== undefined) {
 4540:    27:     console.error('--block can only be used with decompression');
 4541     28      return 1;
 4542     29  }
 4543     30  
 4544     31  if (program.decompress && program.compress) {
 4545:    32:     console.error('Must specify either -d or -z.');
 4546     33      return 1;
 4547     34  }
 ....
 4549    124  }
 4550    125  if (program.compress) {
 4551:   126:     console.error('Compression not yet implemented.');
 4552    127      return 1;
 4553    128  }
 ....
 4556    538    proc.on('error', function(err) {
 4557    539      if (err.code == "ENOENT") {
 4558:   540:       console.error('\n  %s(1) does not exist, try --help\n', bin);
 4559    541      } else if (err.code == "EACCES") {
 4560:   542:       console.error('\n  %s(1) not executable. try chmod or run with root\n', bin);
 4561    543      }
 4562    544      process.exit(1);
 ....
 4564    745  
 4565    746  Command.prototype.missingArgument = function(name) {
 4566:   747:   console.error();
 4567:   748:   console.error("  error: missing required argument `%s'", name);
 4568:   749:   console.error();
 4569    750    process.exit(1);
 4570    751  };
 ....
 4572    760  
 4573    761  Command.prototype.optionMissingArgument = function(option, flag) {
 4574:   762:   console.error();
 4575    763    if (flag) {
 4576:   764:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
 4577    765    } else {
 4578:   766:     console.error("  error: option `%s' argument missing", option.flags);
 4579    767    }
 4580:   768:   console.error();
 4581    769    process.exit(1);
 4582    770  };
 ....
 4584    779  Command.prototype.unknownOption = function(flag) {
 4585    780    if (this._allowUnknownOption) return;
 4586:   781:   console.error();
 4587:   782:   console.error("  error: unknown option `%s'", flag);
 4588:   783:   console.error();
 4589    784    process.exit(1);
 4590    785  };
 ....
 4592    793  
 4593    794  Command.prototype.variadicArgNotLast = function(name) {
 4594:   795:   console.error();
 4595:   796:   console.error("  error: variadic arguments must be last `%s'", name);
 4596:   797:   console.error();
 4597    798    process.exit(1);
 4598    799  };
 ....
 4601    151  
 4602    152  if (typeof cmdValue === 'undefined') {
 4603:   153:    console.error('no command given!');
 4604    154     process.exit(1);
 4605    155  }
 ....
 4608     80  
 4609     81  function failInc () {
 4610:    82:   console.error("--inc can only be used on a single version with no range")
 4611     83    fail()
 4612     84  }
 ....
 4615     50            var data = JSON.parse(stdout)
 4616     51          } catch (er) {
 4617:    52:           console.error('invalid json: %j', stdout, stderr)
 4618     53            throw er
 4619     54          }
 ....
 4621     77            var data = JSON.parse(stdout)
 4622     78          } catch (er) {
 4623:    79:           console.error('invalid json: %j', stdout, stderr)
 4624     80            throw er
 4625     81          }
 ....
 4628     31  }
 4629     32  
 4630:    33: console.error('want', wanted)
 4631     34  
 4632     35  setTimeout(function () {}, 1000)
 ....
 4635     34  
 4636     35    process.on('exit', function (code) {
 4637:    36:     console.error('first code=%j', code)
 4638     37    })
 4639     38  
 4640     39    if (change !== 'nochange') {
 4641     40      process.once('exit', function (code) {
 4642:    41:       console.error('set code from %j to %j', code, 5)
 4643     42        if (change === 'code' || change === 'twicecode') {
 4644     43          process.exitCode = 5
 ....
 4646     49        process.once('exit', function (code) {
 4647     50          code = process.exitCode || code
 4648:    51:         console.error('set code from %j to %j', code, code + 1)
 4649     52          process.exit(code + 1)
 4650     53        })
 ....
 4652     56  
 4653     57    process.on('exit', function (code) {
 4654:    58:     console.error('second code=%j', code)
 4655     59    })
 4656     60  
 ....
 4658     76  
 4659     77  function run (opt) {
 4660:    78:   console.error(opt)
 4661     79    exec(process.execPath + ' ' + __filename + ' ' + opt, function (err, stdout, stderr) {
 4662     80      var res = JSON.parse(stdout)
 ....
 4665      8  var spawn = require('child_process').spawn
 4666      9  var file = require.resolve('./awaiter.js')
 4667:    10: console.error(process.pid, signal, gens)
 4668     11  
 4669     12  if (gens > 0) {
 ....
 4672     84        process.removeListener(signal, fn)
 4673     85        setTimeout(function () {
 4674:    86:         console.error('signal again')
 4675     87          process.kill(process.pid, signal)
 4676     88        })
 ....
 4679      1  var onSignalExit = require('../..')
 4680      2  onSignalExit(function (code, signal) {
 4681:     3:   console.error('onSignalExit(%j,%j)', code, signal)
 4682      4  })
 4683      5  setTimeout(function () {
 ....
 4686    626  writer.end('this is the end\n');
 4687    627  writer.on('finish', () => {
 4688:   628:   console.error('all writes are now complete.');
 4689    629  });
 4690    630  ```
 ....
 4692    641  var reader = getReadableStreamSomehow();
 4693    642  writer.on('pipe', (src) => {
 4694:   643:   console.error('something is piping into the writer');
 4695    644    assert.equal(src, reader);
 4696    645  });
 ....
 4698    659  var reader = getReadableStreamSomehow();
 4699    660  writer.on('unpipe', (src) => {
 4700:   661:   console.error('something has stopped piping into the writer');
 4701    662    assert.equal(src, reader);
 4702    663  });
 ....
 4705     39  
 4706     40    stream.queue = stream.push = function (data) {
 4707:    41: //    console.error(ended)
 4708     42      if(_ended) return stream
 4709     43      if(data === null) _ended = true
 ....
 4712    626  writer.end('this is the end\n');
 4713    627  writer.on('finish', () => {
 4714:   628:   console.error('all writes are now complete.');
 4715    629  });
 4716    630  ```
 ....
 4718    641  var reader = getReadableStreamSomehow();
 4719    642  writer.on('pipe', (src) => {
 4720:   643:   console.error('something is piping into the writer');
 4721    644    assert.equal(src, reader);
 4722    645  });
 ....
 4724    659  var reader = getReadableStreamSomehow();
 4725    660  writer.on('unpipe', (src) => {
 4726:   661:   console.error('something has stopped piping into the writer');
 4727    662    assert.equal(src, reader);
 4728    663  });
 ....
 4731    236        args.unshift('TUNNEL:')
 4732    237      }
 4733:   238:     console.error.apply(console, args)
 4734    239    }
 4735    240  } else {
 ....
 4738    566  
 4739    567  function print_error(msg) {
 4740:   568:     console.error("%s", msg);
 4741    569  }
 4742    570  
 ....
 4745     35      } else {
 4746     36        if (showHelpOnFail) yargs.showHelp('error')
 4747:    37:       if (msg) console.error(msg)
 4748     38        if (failMessage) {
 4749:    39:         if (msg) console.error('')
 4750:    40:         console.error(failMessage)
 4751     41        }
 4752     42        if (yargs.getExitProcess()) {
 ....
 4755     28  
 4756     29  UglifyJS.AST_Node.warn_function = function(txt) {
 4757:    30:     console.error("WARN: %s", txt);
 4758     31  };
 4759     32  
 ....
 4762    835   *
 4763    836   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 4764:   837:  * will invoke `console.trace()` instead of `console.error()`.
 4765    838   *
 4766    839   * @param {Function} fn - the function to deprecate
 ....
 4769     16   *
 4770     17   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 4771:    18:  * will invoke `console.trace()` instead of `console.error()`.
 4772     19   *
 4773     20   * @param {Function} fn - the function to deprecate
 ....
 4776     83          console.trace(msg);
 4777     84        } else {
 4778:    85:         console.error(msg);
 4779     86        }
 4780     87        warned = true;
 ....
 4782    105        debugs[set] = function() {
 4783    106          var msg = exports.format.apply(exports, arguments);
 4784:   107:         console.error('%s %d: %s', set, pid, msg);
 4785    108        };
 4786    109      } else {
 ....
 4789      2    var nodeuuid = require('../uuid');
 4790      3  } catch (e) {
 4791:     4:   console.error('node-uuid require failed - skipping tests');
 4792      5  }
 4793      6  
 ....
 4795      8    var uuid = require('uuid');
 4796      9  } catch (e) {
 4797:    10:   console.error('uuid require failed - skipping tests');
 4798     11  }
 4799     12  
 ....
 4801     14    var uuidjs = require('uuid-js');
 4802     15  } catch (e) {
 4803:    16:   console.error('uuid-js require failed - skipping tests');
 4804     17  }
 4805     18  
 ....
 4808    626  writer.end('this is the end\n');
 4809    627  writer.on('finish', () => {
 4810:   628:   console.error('all writes are now complete.');
 4811    629  });
 4812    630  ```
 ....
 4814    641  var reader = getReadableStreamSomehow();
 4815    642  writer.on('pipe', (src) => {
 4816:   643:   console.error('something is piping into the writer');
 4817    644    assert.equal(src, reader);
 4818    645  });
 ....
 4820    659  var reader = getReadableStreamSomehow();
 4821    660  writer.on('unpipe', (src) => {
 4822:   661:   console.error('something has stopped piping into the writer');
 4823    662    assert.equal(src, reader);
 4824    663  });
 ....
 4827    626  writer.end('this is the end\n');
 4828    627  writer.on('finish', () => {
 4829:   628:   console.error('all writes are now complete.');
 4830    629  });
 4831    630  ```
 ....
 4833    641  var reader = getReadableStreamSomehow();
 4834    642  writer.on('pipe', (src) => {
 4835:   643:   console.error('something is piping into the writer');
 4836    644    assert.equal(src, reader);
 4837    645  });
 ....
 4839    659  var reader = getReadableStreamSomehow();
 4840    660  writer.on('unpipe', (src) => {
 4841:   661:   console.error('something has stopped piping into the writer');
 4842    662    assert.equal(src, reader);
 4843    663  });
 ....
 4846      5  
 4847      6  function usage () {
 4848:     7:   console.error('usage: which [-as] program ...')
 4849      8    process.exit(1)
 4850      9  }
 ....
 4852     32          break
 4853     33        default:
 4854:    34:         console.error('which: illegal option -- ' + flag)
 4855     35          usage()
 4856     36      }
 ....
 4859     37  
 4860     38    if (!exec)
 4861:    39:     return console.error('NO SUCH METHOD:', method)
 4862     40  
 4863     41    exec.apply(null, args.concat([ callback ]))
 ....
 4866    141  
 4867    142    if (!child) {
 4868:   143:     return console.error(
 4869    144          'Worker Farm: Received message for unknown child. '
 4870    145        + 'This is likely as a result of premature child death, '
 ....
 4872    150    call = child.calls[idx]
 4873    151    if (!call) {
 4874:   152:     return console.error(
 4875    153          'Worker Farm: Received message for unknown index for existing child. '
 4876    154        + 'This should not happen!'
 ....
 4879     41          failureOutput = true
 4880     42          if (showHelpOnFail) yargs.showHelp('error')
 4881:    43:         if (msg) console.error(msg)
 4882     44          if (failMessage) {
 4883:    45:           if (msg) console.error('')
 4884:    46:           console.error(failMessage)
 4885     47          }
 4886     48        }
 ....
 4889   1019  var yargs = require("yargs")
 4890   1020    .usage("$0 -operand1 number -operand2 number -operation [add|subtract]");
 4891:  1021: yargs.showHelp(); //prints to stderr using console.error()
 4892   1022  ```
 4893   1023  
 ....
 4896     99      this.register(realPath, namespace);
 4897    100    } catch (e) {
 4898:   101:     console.error('Unable to register %s (Error: %s)', generatorReference, e.message);
 4899    102    }
 4900    103  };
 ....
 4903     57    //
 4904     58    // Log functions take two arguments, a message and a context. For any
 4905:    59:   // other kind of paramters, `console.error` is used, so all of the
 4906     60    // console format string goodies you're used to work fine.
 4907     61    //
 ....
 4909     68  
 4910     69      if (typeof ctx === 'object' && !Array.isArray(ctx)) {
 4911:    70:       console.error(formatter(msg, ctx));
 4912     71      } else {
 4913:    72:       console.error.apply(console, arguments);
 4914     73      }
 4915     74  
 ....
 4918   1064                  if (typeof console === 'object') {
 4919   1065                      if (err) {
 4920:  1066:                         if (console.error) {
 4921:  1067:                             console.error(err);
 4922   1068                          }
 4923   1069                      }
 4924  
 4925  /Users/TQi/Documents/workspace/ReactReddit/node_modules/yeoman-generator/node_modules/async/dist/async.min.js:
 4926:     1: !function(){function n(){}function t(n){return n}function e(n){return!!n}function r(n){return!n}function u(n){return function(){if(null===n)throw new Error("Callback was already called.");n.apply(this,arguments),n=null}}function i(n){return function(){null!==n&&(n.apply(this,arguments),n=null)}}function o(n){return M(n)||"number"==typeof n.length&&n.length>=0&&n.length%1===0}function c(n,t){for(var e=-1,r=n.length;++e<r;)t(n[e],e,n)}function a(n,t){for(var e=-1,r=n.length,u=Array(r);++e<r;)u[e]=t(n[e],e,n);return u}function f(n){return a(Array(n),function(n,t){return t})}function l(n,t,e){return c(n,function(n,r,u){e=t(e,n,r,u)}),e}function s(n,t){c(W(n),function(e){t(n[e],e)})}function p(n,t){for(var e=0;e<n.length;e++)if(n[e]===t)return e;return-1}function h(n){var t,e,r=-1;return o(n)?(t=n.length,function(){return r++,t>r?r:null}):(e=W(n),t=e.length,function(){return r++,t>r?e[r]:null})}function m(n,t){return t=null==t?n.length-1:+t,function(){for(var e=Math.max(arguments.length-t,0),r=Array(e),u=0;e>u;u++)r[u]=arguments[u+t];switch(t){case 0:return n.call(this,r);case 1:return n.call(this,arguments[0],r)}}}function y(n){return function(t,e,r){return n(t,r)}}function v(t){return function(e,r,o){o=i(o||n),e=e||[];var c=h(e);if(0>=t)return o(null);var a=!1,f=0,l=!1;!function s(){if(a&&0>=f)return o(null);for(;t>f&&!l;){var n=c();if(null===n)return a=!0,void(0>=f&&o(null));f+=1,r(e[n],n,u(function(n){f-=1,n?(o(n),l=!0):s()}))}}()}}function d(n){return function(t,e,r){return n(P.eachOf,t,e,r)}}function g(n){return function(t,e,r,u){return n(v(e),t,r,u)}}function k(n){return function(t,e,r){return n(P.eachOfSeries,t,e,r)}}function b(t,e,r,u){u=i(u||n),e=e||[];var c=o(e)?[]:{};t(e,function(n,t,e){r(n,function(n,r){c[t]=r,e(n)})},function(n){u(n,c)})}function w(n,t,e,r){var u=[];n(t,function(n,t,r){e(n,function(e){e&&u.push({index:t,value:n}),r()})},function(){r(a(u.sort(function(n,t){return n.index-t.index}),function(n){return n.value}))})}function O(n,t,e,r){w(n,t,function(n,t){e(n,function(n){t(!n)})},r)}function S(n,t,e){return function(r,u,i,o){function c(){o&&o(e(!1,void 0))}function a(n,r,u){return o?void i(n,function(r){o&&t(r)&&(o(e(!0,n)),o=i=!1),u()}):u()}arguments.length>3?n(r,u,a,c):(o=i,i=u,n(r,a,c))}}function E(n,t){return t}function L(t,e,r){r=r||n;var u=o(e)?[]:{};t(e,function(n,t,e){n(m(function(n,r){r.length<=1&&(r=r[0]),u[t]=r,e(n)}))},function(n){r(n,u)})}function j(n,t,e,r){var u=[];n(t,function(n,t,r){e(n,function(n,t){u=u.concat(t||[]),r(n)})},function(n){r(n,u)})}function I(t,e,r){function i(t,e,r,u){if(null!=u&&"function"!=typeof u)throw new Error("task callback must be a function");return t.started=!0,M(e)||(e=[e]),0===e.length&&t.idle()?P.setImmediate(function(){t.drain()}):(c(e,function(e){var i={data:e,callback:u||n};r?t.tasks.unshift(i):t.tasks.push(i),t.tasks.length===t.concurrency&&t.saturated()}),void P.setImmediate(t.process))}function o(n,t){return function(){f-=1;var e=!1,r=arguments;c(t,function(n){c(l,function(t,r){t!==n||e||(l.splice(r,1),e=!0)}),n.callback.apply(n,r)}),n.tasks.length+f===0&&n.drain(),n.process()}}if(null==e)e=1;else if(0===e)throw new Error("Concurrency must not be zero");var f=0,l=[],s={tasks:[],concurrency:e,payload:r,saturated:n,empty:n,drain:n,started:!1,paused:!1,push:function(n,t){i(s,n,!1,t)},kill:function(){s.drain=n,s.tasks=[]},unshift:function(n,t){i(s,n,!0,t)},process:function(){for(;!s.paused&&f<s.concurrency&&s.tasks.length;){var n=s.payload?s.tasks.splice(0,s.payload):s.tasks.splice(0,s.tasks.length),e=a(n,function(n){return n.data});0===s.tasks.length&&s.empty(),f+=1,l.push(n[0]);var r=u(o(s,n));t(e,r)}},length:function(){return s.tasks.length},running:function(){return f},workersList:function(){return l},idle:function(){return s.tasks.length+f===0},pause:function(){s.paused=!0},resume:function(){if(s.paused!==!1){s.paused=!1;for(var n=Math.min(s.concurrency,s.tasks.length),t=1;n>=t;t++)P.setImmediate(s.process)}}};return s}function x(n){return m(function(t,e){t.apply(null,e.concat([m(function(t,e){"object"==typeof console&&(t?console.error&&console.error(t):console[n]&&c(e,function(t){console[n](t)}))})]))})}function A(n){return function(t,e,r){n(f(t),e,r)}}function T(n){return m(function(t,e){var r=m(function(e){var r=this,u=e.pop();return n(t,function(n,t,u){n.apply(r,e.concat([u]))},u)});return e.length?r.apply(this,e):r})}function z(n){return m(function(t){var e=t.pop();t.push(function(){var n=arguments;r?P.setImmediate(function(){e.apply(null,n)}):e.apply(null,n)});var r=!0;n.apply(this,t),r=!1})}var q,P={},C="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||this;null!=C&&(q=C.async),P.noConflict=function(){return C.async=q,P};var H=Object.prototype.toString,M=Array.isArray||function(n){return"[object Array]"===H.call(n)},U=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},W=Object.keys||function(n){var t=[];for(var e in n)n.hasOwnProperty(e)&&t.push(e);return t},B="function"==typeof setImmediate&&setImmediate,D=B?function(n){B(n)}:function(n){setTimeout(n,0)};"object"==typeof process&&"function"==typeof process.nextTick?P.nextTick=process.nextTick:P.nextTick=D,P.setImmediate=B?D:P.nextTick,P.forEach=P.each=function(n,t,e){return P.eachOf(n,y(t),e)},P.forEachSeries=P.eachSeries=function(n,t,e){return P.eachOfSeries(n,y(t),e)},P.forEachLimit=P.eachLimit=function(n,t,e,r){return v(t)(n,y(e),r)},P.forEachOf=P.eachOf=function(t,e,r){function o(n){f--,n?r(n):null===c&&0>=f&&r(null)}r=i(r||n),t=t||[];for(var c,a=h(t),f=0;null!=(c=a());)f+=1,e(t[c],c,u(o));0===f&&r(null)},P.forEachOfSeries=P.eachOfSeries=function(t,e,r){function o(){var n=!0;return null===a?r(null):(e(t[a],a,u(function(t){if(t)r(t);else{if(a=c(),null===a)return r(null);n?P.setImmediate(o):o()}})),void(n=!1))}r=i(r||n),t=t||[];var c=h(t),a=c();o()},P.forEachOfLimit=P.eachOfLimit=function(n,t,e,r){v(t)(n,e,r)},P.map=d(b),P.mapSeries=k(b),P.mapLimit=g(b),P.inject=P.foldl=P.reduce=function(n,t,e,r){P.eachOfSeries(n,function(n,r,u){e(t,n,function(n,e){t=e,u(n)})},function(n){r(n,t)})},P.foldr=P.reduceRight=function(n,e,r,u){var i=a(n,t).reverse();P.reduce(i,e,r,u)},P.transform=function(n,t,e,r){3===arguments.length&&(r=e,e=t,t=M(n)?[]:{}),P.eachOf(n,function(n,r,u){e(t,n,r,u)},function(n){r(n,t)})},P.select=P.filter=d(w),P.selectLimit=P.filterLimit=g(w),P.selectSeries=P.filterSeries=k(w),P.reject=d(O),P.rejectLimit=g(O),P.rejectSeries=k(O),P.any=P.some=S(P.eachOf,e,t),P.someLimit=S(P.eachOfLimit,e,t),P.all=P.every=S(P.eachOf,r,r),P.everyLimit=S(P.eachOfLimit,r,r),P.detect=S(P.eachOf,t,E),P.detectSeries=S(P.eachOfSeries,t,E),P.detectLimit=S(P.eachOfLimit,t,E),P.sortBy=function(n,t,e){function r(n,t){var e=n.criteria,r=t.criteria;return r>e?-1:e>r?1:0}P.map(n,function(n,e){t(n,function(t,r){t?e(t):e(null,{value:n,criteria:r})})},function(n,t){return n?e(n):void e(null,a(t.sort(r),function(n){return n.value}))})},P.auto=function(t,e,r){function u(n){g.unshift(n)}function o(n){var t=p(g,n);t>=0&&g.splice(t,1)}function a(){h--,c(g.slice(0),function(n){n()})}"function"==typeof arguments[1]&&(r=e,e=null),r=i(r||n);var f=W(t),h=f.length;if(!h)return r(null);e||(e=h);var y={},v=0,d=!1,g=[];u(function(){h||r(null,y)}),c(f,function(n){function i(){return e>v&&l(k,function(n,t){return n&&y.hasOwnProperty(t)},!0)&&!y.hasOwnProperty(n)}function c(){i()&&(v++,o(c),h[h.length-1](g,y))}if(!d){for(var f,h=M(t[n])?t[n]:[t[n]],g=m(function(t,e){if(v--,e.length<=1&&(e=e[0]),t){var u={};s(y,function(n,t){u[t]=n}),u[n]=e,d=!0,r(t,u)}else y[n]=e,P.setImmediate(a)}),k=h.slice(0,h.length-1),b=k.length;b--;){if(!(f=t[k[b]]))throw new Error("Has nonexistent dependency in "+k.join(", "));if(M(f)&&p(f,n)>=0)throw new Error("Has cyclic dependencies")}i()?(v++,h[h.length-1](g,y)):u(c)}})},P.retry=function(n,t,e){function r(n,t){if("number"==typeof t)n.times=parseInt(t,10)||i;else{if("object"!=typeof t)throw new Error("Unsupported argument type for 'times': "+typeof t);n.times=parseInt(t.times,10)||i,n.interval=parseInt(t.interval,10)||o}}function u(n,t){function e(n,e){return function(r){n(function(n,t){r(!n||e,{err:n,result:t})},t)}}function r(n){return function(t){setTimeout(function(){t(null)},n)}}for(;a.times;){var u=!(a.times-=1);c.push(e(a.task,u)),!u&&a.interval>0&&c.push(r(a.interval))}P.series(c,function(t,e){e=e[e.length-1],(n||a.callback)(e.err,e.result)})}var i=5,o=0,c=[],a={times:i,interval:o},f=arguments.length;if(1>f||f>3)throw new Error("Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)");return 2>=f&&"function"==typeof n&&(e=t,t=n),"function"!=typeof n&&r(a,n),a.callback=e,a.task=t,a.callback?u():u},P.waterfall=function(t,e){function r(n){return m(function(t,u){if(t)e.apply(null,[t].concat(u));else{var i=n.next();i?u.push(r(i)):u.push(e),z(n).apply(null,u)}})}if(e=i(e||n),!M(t)){var u=new Error("First argument to waterfall must be an array of functions");return e(u)}return t.length?void r(P.iterator(t))():e()},P.parallel=function(n,t){L(P.eachOf,n,t)},P.parallelLimit=function(n,t,e){L(v(t),n,e)},P.series=function(n,t){L(P.eachOfSeries,n,t)},P.iterator=function(n){function t(e){function r(){return n.length&&n[e].apply(null,arguments),r.next()}return r.next=function(){return e<n.length-1?t(e+1):null},r}return t(0)},P.apply=m(function(n,t){return m(function(e){return n.apply(null,t.concat(e))})}),P.concat=d(j),P.concatSeries=k(j),P.whilst=function(t,e,r){if(r=r||n,t()){var u=m(function(n,i){n?r(n):t.apply(this,i)?e(u):r.apply(null,[null].concat(i))});e(u)}else r(null)},P.doWhilst=function(n,t,e){var r=0;return P.whilst(function(){return++r<=1||t.apply(this,arguments)},n,e)},P.until=function(n,t,e){return P.whilst(function(){return!n.apply(this,arguments)},t,e)},P.doUntil=function(n,t,e){return P.doWhilst(n,function(){return!t.apply(this,arguments)},e)},P.during=function(t,e,r){r=r||n;var u=m(function(n,e){n?r(n):(e.push(i),t.apply(this,e))}),i=function(n,t){n?r(n):t?e(u):r(null)};t(i)},P.doDuring=function(n,t,e){var r=0;P.during(function(n){r++<1?n(null,!0):t.apply(this,arguments)},n,e)},P.queue=function(n,t){var e=I(function(t,e){n(t[0],e)},t,1);return e},P.priorityQueue=function(t,e){function r(n,t){return n.priority-t.priority}function u(n,t,e){for(var r=-1,u=n.length-1;u>r;){var i=r+(u-r+1>>>1);e(t,n[i])>=0?r=i:u=i-1}return r}function i(t,e,i,o){if(null!=o&&"function"!=typeof o)throw new Error("task callback must be a function");return t.started=!0,M(e)||(e=[e]),0===e.length?P.setImmediate(function(){t.drain()}):void c(e,function(e){var c={data:e,priority:i,callback:"function"==typeof o?o:n};t.tasks.splice(u(t.tasks,c,r)+1,0,c),t.tasks.length===t.concurrency&&t.saturated(),P.setImmediate(t.process)})}var o=P.queue(t,e);return o.push=function(n,t,e){i(o,n,t,e)},delete o.unshift,o},P.cargo=function(n,t){return I(n,1,t)},P.log=x("log"),P.dir=x("dir"),P.memoize=function(n,e){var r={},u={},i=Object.prototype.hasOwnProperty;e=e||t;var o=m(function(t){var o=t.pop(),c=e.apply(null,t);i.call(r,c)?P.setImmediate(function(){o.apply(null,r[c])}):i.call(u,c)?u[c].push(o):(u[c]=[o],n.apply(null,t.concat([m(function(n){r[c]=n;var t=u[c];delete u[c];for(var e=0,i=t.length;i>e;e++)t[e].apply(null,n)})])))});return o.memo=r,o.unmemoized=n,o},P.unmemoize=function(n){return function(){return(n.unmemoized||n).apply(null,arguments)}},P.times=A(P.map),P.timesSeries=A(P.mapSeries),P.timesLimit=function(n,t,e,r){return P.mapLimit(f(n),t,e,r)},P.seq=function(){var t=arguments;return m(function(e){var r=this,u=e[e.length-1];"function"==typeof u?e.pop():u=n,P.reduce(t,e,function(n,t,e){t.apply(r,n.concat([m(function(n,t){e(n,t)})]))},function(n,t){u.apply(r,[n].concat(t))})})},P.compose=function(){return P.seq.apply(null,Array.prototype.reverse.call(arguments))},P.applyEach=T(P.eachOf),P.applyEachSeries=T(P.eachOfSeries),P.forever=function(t,e){function r(n){return n?i(n):void o(r)}var i=u(e||n),o=z(t);r()},P.ensureAsync=z,P.constant=m(function(n){var t=[null].concat(n);return function(n){return n.apply(this,t)}}),P.wrapSync=P.asyncify=function(n){return m(function(t){var e,r=t.pop();try{e=n.apply(this,t)}catch(u){return r(u)}U(e)&&"function"==typeof e.then?e.then(function(n){r(null,n)})["catch"](function(n){r(n.message?n:new Error(n))}):r(null,e)})},"object"==typeof module&&module.exports?module.exports=P:"function"==typeof define&&define.amd?define([],function(){return P}):C.async=P}();
 4927      2  //# sourceMappingURL=dist/async.min.map
 4928  
 ....
 4930   1064                  if (typeof console === 'object') {
 4931   1065                      if (err) {
 4932:  1066:                         if (console.error) {
 4933:  1067:                             console.error(err);
 4934   1068                          }
 4935   1069                      }
 ....
 4938    338    })
 4939    339  }, function (err) {
 4940:   340:   if (err) console.error(err.message);
 4941    341    // configs is now a map of JSON data
 4942    342    doSomethingWith(configs);
 ....
 4944   1102    )(req.session.user_id, function (err, cats) {
 4945   1103      if (err) {
 4946:  1104:       console.error(err);
 4947   1105        response.json({ status: 'error', message: err.message });
 4948   1106      } else {
 ....
 4950   1816  
 4951   1817  Logs the result of an `async` function to the `console`. Only works in Node.js or
 4952:  1818: in browsers that support `console.log` and `console.error` (such as FF and Chrome).
 4953   1819  If multiple arguments are returned from the async function, `console.log` is
 4954   1820  called on each argument in order.
 ....
 4956   1846  Logs the result of an `async` function to the `console` using `console.dir` to
 4957   1847  display the properties of the resulting object. Only works in Node.js or
 4958:  1848: in browsers that support `console.dir` and `console.error` (such as FF and Chrome).
 4959   1849  If multiple arguments are returned from the async function, `console.dir` is
 4960   1850  called on each argument in order.
 ....
 4963     19  		.then(function(responseData){
 4964     20  			resolve(JSON.stringify(responseData));
 4965:    21: 		}).catch((e) => {console.error(e)}).done();
 4966     22  	},
 4967     23  	getStorageToken: function(resolve){
 ....
 4969     48              resolve(JSON.stringify(token));
 4970     49              storage.setStorage("ACCESS_TOKEN", token);
 4971:    50: 		}).catch((e) => {console.error(e)}).done();
 4972     51  	},
 4973     52  	checkCaptcha: function(resolve, reject){
 ....
 4975     94  				}
 4976     95  			}).catch((e) => {
 4977:    96: 				console.error(e);
 4978     97  			}).done();
 4979     98  
 ....
 4981    144  				}
 4982    145  			}).catch((e) => {
 4983:   146: 				console.error(e);
 4984    147  			}).done();			
 4985    148  		};
 ....
 4987    208  				}
 4988    209  			}).catch((e) => {
 4989:   210: 				console.error(e);
 4990    211  			}).done();
 4991    212  		};
 ....
 4993    257  				}
 4994    258  			}).catch((e) => {
 4995:   259: 				console.error(e);
 4996    260  			}).done();
 4997    261  		};
 ....
 4999    278  		  	}
 5000    279  		  }).catch((e) => {
 5001:   280: 		  	console.error(e);
 5002    281  		  }).done();
 5003    282  	},
 ....
 5005    360  				}
 5006    361  			}).catch((e) => {
 5007:   362: 				console.error(e);
 5008    363  			}).done();
 5009    364  		};	
 ....
 5012     44  				this.forceUpdate();
 5013     45  		  }).catch((e) => {
 5014:    46: 		  	console.error(e);
 5015     47  		  }).done();
 5016     48  	};
 ....
 5019    125              }
 5020    126  		  }).catch((e) => {
 5021:   127: 		  	console.error(e);
 5022    128  		  }).done();
 5023    129  	};
 ....
 5026     50  			});
 5027     51  		  }).catch((e) => {
 5028:    52:             console.error(e);
 5029     53            }).done();
 5030     54      };
 ....
 5033    119              storage.setStorage( this.state.name, this.state.dataSource);
 5034    120  		  }).catch((e) => {
 5035:   121:         console.error(e);
 5036    122        }).done();
 5037    123  	};
 ....
 5040  
 5041  
 5042: Searching 30 files for "console.error"
 5043  
 5044  /Users/TQi/Documents/workspace/ReactReddit/src/http/ajax.js:
 5045     19  		.then(function(responseData){
 5046     20  			resolve(JSON.stringify(responseData));
 5047:    21: 		}).catch((e) => {console.error(e)}).done();
 5048     22  	},
 5049     23  	getStorageToken: function(resolve){
 ....
 5051     48              resolve(JSON.stringify(token));
 5052     49              storage.setStorage("ACCESS_TOKEN", token);
 5053:    50: 		}).catch((e) => {console.error(e)}).done();
 5054     51  	},
 5055     52  	checkCaptcha: function(resolve, reject){
 ....
 5057     94  				}
 5058     95  			}).catch((e) => {
 5059:    96: 				console.error(e);
 5060     97  			}).done();
 5061     98  
 ....
 5063    144  				}
 5064    145  			}).catch((e) => {
 5065:   146: 				console.error(e);
 5066    147  			}).done();			
 5067    148  		};
 ....
 5069    208  				}
 5070    209  			}).catch((e) => {
 5071:   210: 				console.error(e);
 5072    211  			}).done();
 5073    212  		};
 ....
 5075    257  				}
 5076    258  			}).catch((e) => {
 5077:   259: 				console.error(e);
 5078    260  			}).done();
 5079    261  		};
 ....
 5081    278  		  	}
 5082    279  		  }).catch((e) => {
 5083:   280: 		  	console.error(e);
 5084    281  		  }).done();
 5085    282  	},
 ....
 5087    360  				}
 5088    361  			}).catch((e) => {
 5089:   362: 				console.error(e);
 5090    363  			}).done();
 5091    364  		};	
 ....
 5094     44  				this.forceUpdate();
 5095     45  		  }).catch((e) => {
 5096:    46: 		  	console.error(e);
 5097     47  		  }).done();
 5098     48  	};
 ....
 5101    125              }
 5102    126  		  }).catch((e) => {
 5103:   127: 		  	console.error(e);
 5104    128  		  }).done();
 5105    129  	};
 ....
 5108     50  			});
 5109     51  		  }).catch((e) => {
 5110:    52:             console.error(e);
 5111     53            }).done();
 5112     54      };
 ....
 5115    119              storage.setStorage( this.state.name, this.state.dataSource);
 5116    120  		  }).catch((e) => {
 5117:   121:         console.error(e);
 5118    122        }).done();
 5119    123  	};

/Users/TQi/Documents/workspace/ReactReddit/src/scenes/Comment.js:
   44  				this.forceUpdate();
   45  		  }).catch((e) => {
   46: 		  	console.e(e);
   47  		  }).done();
   48  	};

/Users/TQi/Documents/workspace/ReactReddit/src/scenes/MainPage.js:
  125              }
  126  		  }).catch((e) => {
  127: 		  	console.e(e);
  128  		  }).done();
  129  	};

/Users/TQi/Documents/workspace/ReactReddit/src/scenes/Search.js:
   50  			});
   51  		  }).catch((e) => {
   52:             console.e(e);
   53            }).done();
   54      };

/Users/TQi/Documents/workspace/ReactReddit/src/scenes/SubReddit.js:
  119              storage.setStorage( this.state.name, this.state.dataSource);
  120  		  }).catch((e) => {
  121:         console.e(e);
  122        }).done();
  123  	};

938 matches across 6 files
